
TrafficSystem.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000022be  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000022be  00002332  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000040c8  00000000  00000000  00002334  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000f82  00000000  00000000  000063fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  0000737e  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00007390  2**2
                  CONTENTS, READONLY
  6 .debug_info   000004e6  00000000  00000000  000073cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004a3  00000000  00000000  000078b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001a  00000000  00000000  00007d55  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000196  00000000  00000000  00007d6f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 be 00 	jmp	0x17c	; 0x17c <__ctors_end>
       4:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
       8:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
       c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      10:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      14:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      18:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      1c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      20:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      24:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      28:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      2c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      30:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      34:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      38:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      3c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      40:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      44:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      48:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      4c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      50:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      54:	7e 06       	cpc	r7, r30
      56:	83 06       	cpc	r8, r19
      58:	88 06       	cpc	r8, r24
      5a:	8d 06       	cpc	r8, r29
      5c:	92 06       	cpc	r9, r18
      5e:	97 06       	cpc	r9, r23
      60:	9c 06       	cpc	r9, r28
      62:	a1 06       	cpc	r10, r17
      64:	a6 06       	cpc	r10, r22
      66:	ab 06       	cpc	r10, r27
      68:	b0 06       	cpc	r11, r16
      6a:	b5 06       	cpc	r11, r21
      6c:	ba 06       	cpc	r11, r26
      6e:	bf 06       	cpc	r11, r31
      70:	c4 06       	cpc	r12, r20
      72:	c9 06       	cpc	r12, r25
      74:	ce 06       	cpc	r12, r30
      76:	d3 06       	cpc	r13, r19
      78:	d8 06       	cpc	r13, r24
      7a:	dd 06       	cpc	r13, r29
      7c:	e2 06       	cpc	r14, r18
      7e:	e7 06       	cpc	r14, r23
      80:	ec 06       	cpc	r14, r28
      82:	f1 06       	cpc	r15, r17
      84:	f6 06       	cpc	r15, r22
      86:	fb 06       	cpc	r15, r27
      88:	00 07       	cpc	r16, r16
      8a:	05 07       	cpc	r16, r21
      8c:	0a 07       	cpc	r16, r26
      8e:	0f 07       	cpc	r16, r31
      90:	14 07       	cpc	r17, r20
      92:	19 07       	cpc	r17, r25
      94:	3f 07       	cpc	r19, r31
      96:	44 07       	cpc	r20, r20
      98:	49 07       	cpc	r20, r25
      9a:	4e 07       	cpc	r20, r30
      9c:	53 07       	cpc	r21, r19
      9e:	58 07       	cpc	r21, r24
      a0:	5d 07       	cpc	r21, r29
      a2:	62 07       	cpc	r22, r18
      a4:	67 07       	cpc	r22, r23
      a6:	6c 07       	cpc	r22, r28
      a8:	71 07       	cpc	r23, r17
      aa:	76 07       	cpc	r23, r22
      ac:	7b 07       	cpc	r23, r27
      ae:	80 07       	cpc	r24, r16
      b0:	85 07       	cpc	r24, r21
      b2:	8a 07       	cpc	r24, r26
      b4:	8f 07       	cpc	r24, r31
      b6:	94 07       	cpc	r25, r20
      b8:	99 07       	cpc	r25, r25
      ba:	9e 07       	cpc	r25, r30
      bc:	a3 07       	cpc	r26, r19
      be:	a8 07       	cpc	r26, r24
      c0:	ad 07       	cpc	r26, r29
      c2:	b2 07       	cpc	r27, r18
      c4:	b7 07       	cpc	r27, r23
      c6:	bc 07       	cpc	r27, r28
      c8:	c1 07       	cpc	r28, r17
      ca:	c6 07       	cpc	r28, r22
      cc:	cb 07       	cpc	r28, r27
      ce:	d0 07       	cpc	r29, r16
      d0:	d5 07       	cpc	r29, r21
      d2:	da 07       	cpc	r29, r26
      d4:	00 08       	sbc	r0, r0
      d6:	04 08       	sbc	r0, r4
      d8:	08 08       	sbc	r0, r8
      da:	0c 08       	sbc	r0, r12
      dc:	10 08       	sbc	r1, r0
      de:	14 08       	sbc	r1, r4
      e0:	18 08       	sbc	r1, r8
      e2:	1c 08       	sbc	r1, r12
      e4:	20 08       	sbc	r2, r0
      e6:	24 08       	sbc	r2, r4
      e8:	28 08       	sbc	r2, r8
      ea:	2c 08       	sbc	r2, r12
      ec:	30 08       	sbc	r3, r0
      ee:	34 08       	sbc	r3, r4
      f0:	38 08       	sbc	r3, r8
      f2:	3c 08       	sbc	r3, r12
      f4:	40 08       	sbc	r4, r0
      f6:	44 08       	sbc	r4, r4
      f8:	48 08       	sbc	r4, r8
      fa:	4c 08       	sbc	r4, r12
      fc:	50 08       	sbc	r5, r0
      fe:	54 08       	sbc	r5, r4
     100:	58 08       	sbc	r5, r8
     102:	5c 08       	sbc	r5, r12
     104:	60 08       	sbc	r6, r0
     106:	64 08       	sbc	r6, r4
     108:	68 08       	sbc	r6, r8
     10a:	6c 08       	sbc	r6, r12
     10c:	70 08       	sbc	r7, r0
     10e:	74 08       	sbc	r7, r4
     110:	78 08       	sbc	r7, r8
     112:	7c 08       	sbc	r7, r12
     114:	b4 08       	sbc	r11, r4
     116:	d1 08       	sbc	r13, r1
     118:	ee 08       	sbc	r14, r14
     11a:	0b 09       	sbc	r16, r11
     11c:	28 09       	sbc	r18, r8
     11e:	45 09       	sbc	r20, r5
     120:	62 09       	sbc	r22, r2
     122:	7f 09       	sbc	r23, r15
     124:	9c 09       	sbc	r25, r12
     126:	b9 09       	sbc	r27, r9
     128:	ed 09       	sbc	r30, r13
     12a:	0a 0a       	sbc	r0, r26
     12c:	27 0a       	sbc	r2, r23
     12e:	44 0a       	sbc	r4, r20
     130:	61 0a       	sbc	r6, r17
     132:	7e 0a       	sbc	r7, r30
     134:	9b 0a       	sbc	r9, r27
     136:	b8 0a       	sbc	r11, r24
     138:	d5 0a       	sbc	r13, r21
     13a:	f2 0a       	sbc	r15, r18
     13c:	76 0b       	sbc	r23, r22
     13e:	86 0b       	sbc	r24, r22
     140:	96 0b       	sbc	r25, r22
     142:	a6 0b       	sbc	r26, r22
     144:	b6 0b       	sbc	r27, r22
     146:	c6 0b       	sbc	r28, r22
     148:	d6 0b       	sbc	r29, r22
     14a:	e6 0b       	sbc	r30, r22
     14c:	f6 0b       	sbc	r31, r22
     14e:	06 0c       	add	r0, r6
     150:	16 0c       	add	r1, r6
     152:	26 0c       	add	r2, r6
     154:	36 0c       	add	r3, r6
     156:	46 0c       	add	r4, r6
     158:	56 0c       	add	r5, r6
     15a:	66 0c       	add	r6, r6
     15c:	76 0c       	add	r7, r6
     15e:	86 0c       	add	r8, r6
     160:	96 0c       	add	r9, r6
     162:	a6 0c       	add	r10, r6
     164:	b6 0c       	add	r11, r6
     166:	c6 0c       	add	r12, r6
     168:	d6 0c       	add	r13, r6
     16a:	e6 0c       	add	r14, r6
     16c:	f6 0c       	add	r15, r6
     16e:	06 0d       	add	r16, r6
     170:	16 0d       	add	r17, r6
     172:	26 0d       	add	r18, r6
     174:	36 0d       	add	r19, r6
     176:	46 0d       	add	r20, r6
     178:	56 0d       	add	r21, r6
     17a:	66 0d       	add	r22, r6

0000017c <__ctors_end>:
     17c:	11 24       	eor	r1, r1
     17e:	1f be       	out	0x3f, r1	; 63
     180:	cf e5       	ldi	r28, 0x5F	; 95
     182:	d8 e0       	ldi	r29, 0x08	; 8
     184:	de bf       	out	0x3e, r29	; 62
     186:	cd bf       	out	0x3d, r28	; 61
     188:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <main>
     18c:	0c 94 5d 11 	jmp	0x22ba	; 0x22ba <_exit>

00000190 <__bad_interrupt>:
     190:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000194 <DIO_voidInitialize>:
#include "BIT_MATH.h"
#include "DIO_priv.h"
#include "DIO_config.h"
#include "DIO_int.h"

void DIO_voidInitialize(void){
     194:	cf 93       	push	r28
     196:	df 93       	push	r29
     198:	cd b7       	in	r28, 0x3d	; 61
     19a:	de b7       	in	r29, 0x3e	; 62

	DDRA = CONCBIT(PIN_7DIR,PIN_6DIR,PIN_5DIR,PIN_4DIR,PIN_3DIR,PIN_2DIR,PIN_1DIR,PIN_0DIR);
     19c:	8a e3       	ldi	r24, 0x3A	; 58
     19e:	90 e0       	ldi	r25, 0x00	; 0
     1a0:	2f ef       	ldi	r18, 0xFF	; 255
     1a2:	fc 01       	movw	r30, r24
     1a4:	20 83       	st	Z, r18
	DDRB = CONCBIT(PIN_15DIR,PIN_14DIR,PIN_13DIR,PIN_12DIR,PIN_11DIR,PIN_10DIR,PIN_9DIR,PIN_8DIR);
     1a6:	87 e3       	ldi	r24, 0x37	; 55
     1a8:	90 e0       	ldi	r25, 0x00	; 0
     1aa:	27 e0       	ldi	r18, 0x07	; 7
     1ac:	fc 01       	movw	r30, r24
     1ae:	20 83       	st	Z, r18
	DDRC = CONCBIT(PIN_23DIR,PIN_22DIR,PIN_21DIR,PIN_20DIR,PIN_19DIR,PIN_18DIR,PIN_17DIR,PIN_16DIR);
     1b0:	84 e3       	ldi	r24, 0x34	; 52
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	2f e7       	ldi	r18, 0x7F	; 127
     1b6:	fc 01       	movw	r30, r24
     1b8:	20 83       	st	Z, r18
	DDRD = CONCBIT(PIN_31DIR,PIN_30DIR,PIN_29DIR,PIN_28DIR,PIN_27DIR,PIN_26DIR,PIN_25DIR,PIN_24DIR);
     1ba:	81 e3       	ldi	r24, 0x31	; 49
     1bc:	90 e0       	ldi	r25, 0x00	; 0
     1be:	2f e7       	ldi	r18, 0x7F	; 127
     1c0:	fc 01       	movw	r30, r24
     1c2:	20 83       	st	Z, r18

}
     1c4:	00 00       	nop
     1c6:	df 91       	pop	r29
     1c8:	cf 91       	pop	r28
     1ca:	08 95       	ret

000001cc <DIO_voidSetPin>:

void DIO_voidSetPin(u8 PinNum,u8 Value){
     1cc:	cf 93       	push	r28
     1ce:	df 93       	push	r29
     1d0:	00 d0       	rcall	.+0      	; 0x1d2 <DIO_voidSetPin+0x6>
     1d2:	cd b7       	in	r28, 0x3d	; 61
     1d4:	de b7       	in	r29, 0x3e	; 62
     1d6:	89 83       	std	Y+1, r24	; 0x01
     1d8:	6a 83       	std	Y+2, r22	; 0x02
    if (Value==HIGH){
     1da:	8a 81       	ldd	r24, Y+2	; 0x02
     1dc:	81 30       	cpi	r24, 0x01	; 1
     1de:	09 f0       	breq	.+2      	; 0x1e2 <DIO_voidSetPin+0x16>
     1e0:	74 c0       	rjmp	.+232    	; 0x2ca <DIO_voidSetPin+0xfe>

        if((PinNum>=0 && PinNum<8)){
     1e2:	89 81       	ldd	r24, Y+1	; 0x01
     1e4:	88 30       	cpi	r24, 0x08	; 8
     1e6:	a8 f4       	brcc	.+42     	; 0x212 <DIO_voidSetPin+0x46>
            SETBIT(PORTA,PinNum);
     1e8:	8b e3       	ldi	r24, 0x3B	; 59
     1ea:	90 e0       	ldi	r25, 0x00	; 0
     1ec:	2b e3       	ldi	r18, 0x3B	; 59
     1ee:	30 e0       	ldi	r19, 0x00	; 0
     1f0:	f9 01       	movw	r30, r18
     1f2:	20 81       	ld	r18, Z
     1f4:	62 2f       	mov	r22, r18
     1f6:	29 81       	ldd	r18, Y+1	; 0x01
     1f8:	42 2f       	mov	r20, r18
     1fa:	50 e0       	ldi	r21, 0x00	; 0
     1fc:	21 e0       	ldi	r18, 0x01	; 1
     1fe:	30 e0       	ldi	r19, 0x00	; 0
     200:	02 c0       	rjmp	.+4      	; 0x206 <DIO_voidSetPin+0x3a>
     202:	22 0f       	add	r18, r18
     204:	33 1f       	adc	r19, r19
     206:	4a 95       	dec	r20
     208:	e2 f7       	brpl	.-8      	; 0x202 <DIO_voidSetPin+0x36>
     20a:	26 2b       	or	r18, r22
     20c:	fc 01       	movw	r30, r24
     20e:	20 83       	st	Z, r18
    	    CLRBIT(PORTD,PinNum-16);
    	}

    }

}
     210:	d6 c0       	rjmp	.+428    	; 0x3be <DIO_voidSetPin+0x1f2>
void DIO_voidSetPin(u8 PinNum,u8 Value){
    if (Value==HIGH){

        if((PinNum>=0 && PinNum<8)){
            SETBIT(PORTA,PinNum);
        }else if((PinNum>=8) && (PinNum<16)){
     212:	89 81       	ldd	r24, Y+1	; 0x01
     214:	88 30       	cpi	r24, 0x08	; 8
     216:	d8 f0       	brcs	.+54     	; 0x24e <DIO_voidSetPin+0x82>
     218:	89 81       	ldd	r24, Y+1	; 0x01
     21a:	80 31       	cpi	r24, 0x10	; 16
     21c:	c0 f4       	brcc	.+48     	; 0x24e <DIO_voidSetPin+0x82>
        	SETBIT(PORTB,PinNum-8);
     21e:	88 e3       	ldi	r24, 0x38	; 56
     220:	90 e0       	ldi	r25, 0x00	; 0
     222:	28 e3       	ldi	r18, 0x38	; 56
     224:	30 e0       	ldi	r19, 0x00	; 0
     226:	f9 01       	movw	r30, r18
     228:	20 81       	ld	r18, Z
     22a:	62 2f       	mov	r22, r18
     22c:	29 81       	ldd	r18, Y+1	; 0x01
     22e:	22 2f       	mov	r18, r18
     230:	30 e0       	ldi	r19, 0x00	; 0
     232:	a9 01       	movw	r20, r18
     234:	48 50       	subi	r20, 0x08	; 8
     236:	51 09       	sbc	r21, r1
     238:	21 e0       	ldi	r18, 0x01	; 1
     23a:	30 e0       	ldi	r19, 0x00	; 0
     23c:	02 c0       	rjmp	.+4      	; 0x242 <DIO_voidSetPin+0x76>
     23e:	22 0f       	add	r18, r18
     240:	33 1f       	adc	r19, r19
     242:	4a 95       	dec	r20
     244:	e2 f7       	brpl	.-8      	; 0x23e <DIO_voidSetPin+0x72>
     246:	26 2b       	or	r18, r22
     248:	fc 01       	movw	r30, r24
     24a:	20 83       	st	Z, r18
     24c:	b8 c0       	rjmp	.+368    	; 0x3be <DIO_voidSetPin+0x1f2>
        }else if((PinNum>=16) && (PinNum<24)){
     24e:	89 81       	ldd	r24, Y+1	; 0x01
     250:	80 31       	cpi	r24, 0x10	; 16
     252:	d8 f0       	brcs	.+54     	; 0x28a <DIO_voidSetPin+0xbe>
     254:	89 81       	ldd	r24, Y+1	; 0x01
     256:	88 31       	cpi	r24, 0x18	; 24
     258:	c0 f4       	brcc	.+48     	; 0x28a <DIO_voidSetPin+0xbe>
        	SETBIT(PORTC,PinNum-16);
     25a:	85 e3       	ldi	r24, 0x35	; 53
     25c:	90 e0       	ldi	r25, 0x00	; 0
     25e:	25 e3       	ldi	r18, 0x35	; 53
     260:	30 e0       	ldi	r19, 0x00	; 0
     262:	f9 01       	movw	r30, r18
     264:	20 81       	ld	r18, Z
     266:	62 2f       	mov	r22, r18
     268:	29 81       	ldd	r18, Y+1	; 0x01
     26a:	22 2f       	mov	r18, r18
     26c:	30 e0       	ldi	r19, 0x00	; 0
     26e:	a9 01       	movw	r20, r18
     270:	40 51       	subi	r20, 0x10	; 16
     272:	51 09       	sbc	r21, r1
     274:	21 e0       	ldi	r18, 0x01	; 1
     276:	30 e0       	ldi	r19, 0x00	; 0
     278:	02 c0       	rjmp	.+4      	; 0x27e <DIO_voidSetPin+0xb2>
     27a:	22 0f       	add	r18, r18
     27c:	33 1f       	adc	r19, r19
     27e:	4a 95       	dec	r20
     280:	e2 f7       	brpl	.-8      	; 0x27a <DIO_voidSetPin+0xae>
     282:	26 2b       	or	r18, r22
     284:	fc 01       	movw	r30, r24
     286:	20 83       	st	Z, r18
     288:	9a c0       	rjmp	.+308    	; 0x3be <DIO_voidSetPin+0x1f2>
        }else if((PinNum>=24) && (PinNum<32)){
     28a:	89 81       	ldd	r24, Y+1	; 0x01
     28c:	88 31       	cpi	r24, 0x18	; 24
     28e:	08 f4       	brcc	.+2      	; 0x292 <DIO_voidSetPin+0xc6>
     290:	96 c0       	rjmp	.+300    	; 0x3be <DIO_voidSetPin+0x1f2>
     292:	89 81       	ldd	r24, Y+1	; 0x01
     294:	80 32       	cpi	r24, 0x20	; 32
     296:	08 f0       	brcs	.+2      	; 0x29a <DIO_voidSetPin+0xce>
     298:	92 c0       	rjmp	.+292    	; 0x3be <DIO_voidSetPin+0x1f2>
        	SETBIT(PORTD,PinNum-16);
     29a:	82 e3       	ldi	r24, 0x32	; 50
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	22 e3       	ldi	r18, 0x32	; 50
     2a0:	30 e0       	ldi	r19, 0x00	; 0
     2a2:	f9 01       	movw	r30, r18
     2a4:	20 81       	ld	r18, Z
     2a6:	62 2f       	mov	r22, r18
     2a8:	29 81       	ldd	r18, Y+1	; 0x01
     2aa:	22 2f       	mov	r18, r18
     2ac:	30 e0       	ldi	r19, 0x00	; 0
     2ae:	a9 01       	movw	r20, r18
     2b0:	40 51       	subi	r20, 0x10	; 16
     2b2:	51 09       	sbc	r21, r1
     2b4:	21 e0       	ldi	r18, 0x01	; 1
     2b6:	30 e0       	ldi	r19, 0x00	; 0
     2b8:	02 c0       	rjmp	.+4      	; 0x2be <DIO_voidSetPin+0xf2>
     2ba:	22 0f       	add	r18, r18
     2bc:	33 1f       	adc	r19, r19
     2be:	4a 95       	dec	r20
     2c0:	e2 f7       	brpl	.-8      	; 0x2ba <DIO_voidSetPin+0xee>
     2c2:	26 2b       	or	r18, r22
     2c4:	fc 01       	movw	r30, r24
     2c6:	20 83       	st	Z, r18
    	    CLRBIT(PORTD,PinNum-16);
    	}

    }

}
     2c8:	7a c0       	rjmp	.+244    	; 0x3be <DIO_voidSetPin+0x1f2>
        	SETBIT(PORTC,PinNum-16);
        }else if((PinNum>=24) && (PinNum<32)){
        	SETBIT(PORTD,PinNum-16);
        }

    }else if (Value==LOW){
     2ca:	8a 81       	ldd	r24, Y+2	; 0x02
     2cc:	88 23       	and	r24, r24
     2ce:	09 f0       	breq	.+2      	; 0x2d2 <DIO_voidSetPin+0x106>
     2d0:	76 c0       	rjmp	.+236    	; 0x3be <DIO_voidSetPin+0x1f2>

    	if((PinNum>=0 && PinNum<8)){
     2d2:	89 81       	ldd	r24, Y+1	; 0x01
     2d4:	88 30       	cpi	r24, 0x08	; 8
     2d6:	b0 f4       	brcc	.+44     	; 0x304 <DIO_voidSetPin+0x138>
    	    CLRBIT(PORTA,PinNum);
     2d8:	8b e3       	ldi	r24, 0x3B	; 59
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	2b e3       	ldi	r18, 0x3B	; 59
     2de:	30 e0       	ldi	r19, 0x00	; 0
     2e0:	f9 01       	movw	r30, r18
     2e2:	20 81       	ld	r18, Z
     2e4:	62 2f       	mov	r22, r18
     2e6:	29 81       	ldd	r18, Y+1	; 0x01
     2e8:	42 2f       	mov	r20, r18
     2ea:	50 e0       	ldi	r21, 0x00	; 0
     2ec:	21 e0       	ldi	r18, 0x01	; 1
     2ee:	30 e0       	ldi	r19, 0x00	; 0
     2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <DIO_voidSetPin+0x12a>
     2f2:	22 0f       	add	r18, r18
     2f4:	33 1f       	adc	r19, r19
     2f6:	4a 95       	dec	r20
     2f8:	e2 f7       	brpl	.-8      	; 0x2f2 <DIO_voidSetPin+0x126>
     2fa:	20 95       	com	r18
     2fc:	26 23       	and	r18, r22
     2fe:	fc 01       	movw	r30, r24
     300:	20 83       	st	Z, r18
    	    CLRBIT(PORTD,PinNum-16);
    	}

    }

}
     302:	5d c0       	rjmp	.+186    	; 0x3be <DIO_voidSetPin+0x1f2>

    }else if (Value==LOW){

    	if((PinNum>=0 && PinNum<8)){
    	    CLRBIT(PORTA,PinNum);
    	}else if((PinNum>=8) && (PinNum<16)){
     304:	89 81       	ldd	r24, Y+1	; 0x01
     306:	88 30       	cpi	r24, 0x08	; 8
     308:	e0 f0       	brcs	.+56     	; 0x342 <DIO_voidSetPin+0x176>
     30a:	89 81       	ldd	r24, Y+1	; 0x01
     30c:	80 31       	cpi	r24, 0x10	; 16
     30e:	c8 f4       	brcc	.+50     	; 0x342 <DIO_voidSetPin+0x176>
    	    CLRBIT(PORTB,PinNum-8);
     310:	88 e3       	ldi	r24, 0x38	; 56
     312:	90 e0       	ldi	r25, 0x00	; 0
     314:	28 e3       	ldi	r18, 0x38	; 56
     316:	30 e0       	ldi	r19, 0x00	; 0
     318:	f9 01       	movw	r30, r18
     31a:	20 81       	ld	r18, Z
     31c:	62 2f       	mov	r22, r18
     31e:	29 81       	ldd	r18, Y+1	; 0x01
     320:	22 2f       	mov	r18, r18
     322:	30 e0       	ldi	r19, 0x00	; 0
     324:	a9 01       	movw	r20, r18
     326:	48 50       	subi	r20, 0x08	; 8
     328:	51 09       	sbc	r21, r1
     32a:	21 e0       	ldi	r18, 0x01	; 1
     32c:	30 e0       	ldi	r19, 0x00	; 0
     32e:	02 c0       	rjmp	.+4      	; 0x334 <DIO_voidSetPin+0x168>
     330:	22 0f       	add	r18, r18
     332:	33 1f       	adc	r19, r19
     334:	4a 95       	dec	r20
     336:	e2 f7       	brpl	.-8      	; 0x330 <DIO_voidSetPin+0x164>
     338:	20 95       	com	r18
     33a:	26 23       	and	r18, r22
     33c:	fc 01       	movw	r30, r24
     33e:	20 83       	st	Z, r18
     340:	3e c0       	rjmp	.+124    	; 0x3be <DIO_voidSetPin+0x1f2>
    	}else if((PinNum>=16) && (PinNum<24)){
     342:	89 81       	ldd	r24, Y+1	; 0x01
     344:	80 31       	cpi	r24, 0x10	; 16
     346:	e0 f0       	brcs	.+56     	; 0x380 <DIO_voidSetPin+0x1b4>
     348:	89 81       	ldd	r24, Y+1	; 0x01
     34a:	88 31       	cpi	r24, 0x18	; 24
     34c:	c8 f4       	brcc	.+50     	; 0x380 <DIO_voidSetPin+0x1b4>
    	    CLRBIT(PORTC,PinNum-16);
     34e:	85 e3       	ldi	r24, 0x35	; 53
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	25 e3       	ldi	r18, 0x35	; 53
     354:	30 e0       	ldi	r19, 0x00	; 0
     356:	f9 01       	movw	r30, r18
     358:	20 81       	ld	r18, Z
     35a:	62 2f       	mov	r22, r18
     35c:	29 81       	ldd	r18, Y+1	; 0x01
     35e:	22 2f       	mov	r18, r18
     360:	30 e0       	ldi	r19, 0x00	; 0
     362:	a9 01       	movw	r20, r18
     364:	40 51       	subi	r20, 0x10	; 16
     366:	51 09       	sbc	r21, r1
     368:	21 e0       	ldi	r18, 0x01	; 1
     36a:	30 e0       	ldi	r19, 0x00	; 0
     36c:	02 c0       	rjmp	.+4      	; 0x372 <DIO_voidSetPin+0x1a6>
     36e:	22 0f       	add	r18, r18
     370:	33 1f       	adc	r19, r19
     372:	4a 95       	dec	r20
     374:	e2 f7       	brpl	.-8      	; 0x36e <DIO_voidSetPin+0x1a2>
     376:	20 95       	com	r18
     378:	26 23       	and	r18, r22
     37a:	fc 01       	movw	r30, r24
     37c:	20 83       	st	Z, r18
     37e:	1f c0       	rjmp	.+62     	; 0x3be <DIO_voidSetPin+0x1f2>
    	}else if((PinNum>=24) && (PinNum<32)){
     380:	89 81       	ldd	r24, Y+1	; 0x01
     382:	88 31       	cpi	r24, 0x18	; 24
     384:	e0 f0       	brcs	.+56     	; 0x3be <DIO_voidSetPin+0x1f2>
     386:	89 81       	ldd	r24, Y+1	; 0x01
     388:	80 32       	cpi	r24, 0x20	; 32
     38a:	c8 f4       	brcc	.+50     	; 0x3be <DIO_voidSetPin+0x1f2>
    	    CLRBIT(PORTD,PinNum-16);
     38c:	82 e3       	ldi	r24, 0x32	; 50
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	22 e3       	ldi	r18, 0x32	; 50
     392:	30 e0       	ldi	r19, 0x00	; 0
     394:	f9 01       	movw	r30, r18
     396:	20 81       	ld	r18, Z
     398:	62 2f       	mov	r22, r18
     39a:	29 81       	ldd	r18, Y+1	; 0x01
     39c:	22 2f       	mov	r18, r18
     39e:	30 e0       	ldi	r19, 0x00	; 0
     3a0:	a9 01       	movw	r20, r18
     3a2:	40 51       	subi	r20, 0x10	; 16
     3a4:	51 09       	sbc	r21, r1
     3a6:	21 e0       	ldi	r18, 0x01	; 1
     3a8:	30 e0       	ldi	r19, 0x00	; 0
     3aa:	02 c0       	rjmp	.+4      	; 0x3b0 <DIO_voidSetPin+0x1e4>
     3ac:	22 0f       	add	r18, r18
     3ae:	33 1f       	adc	r19, r19
     3b0:	4a 95       	dec	r20
     3b2:	e2 f7       	brpl	.-8      	; 0x3ac <DIO_voidSetPin+0x1e0>
     3b4:	20 95       	com	r18
     3b6:	26 23       	and	r18, r22
     3b8:	fc 01       	movw	r30, r24
     3ba:	20 83       	st	Z, r18
    	}

    }

}
     3bc:	00 c0       	rjmp	.+0      	; 0x3be <DIO_voidSetPin+0x1f2>
     3be:	00 00       	nop
     3c0:	0f 90       	pop	r0
     3c2:	0f 90       	pop	r0
     3c4:	df 91       	pop	r29
     3c6:	cf 91       	pop	r28
     3c8:	08 95       	ret

000003ca <DIO_u8GetPin>:

u8 DIO_u8GetPin(u8 PinNum){
     3ca:	cf 93       	push	r28
     3cc:	df 93       	push	r29
     3ce:	00 d0       	rcall	.+0      	; 0x3d0 <DIO_u8GetPin+0x6>
     3d0:	cd b7       	in	r28, 0x3d	; 61
     3d2:	de b7       	in	r29, 0x3e	; 62
     3d4:	8a 83       	std	Y+2, r24	; 0x02

	u8 ret;

	if((PinNum>=0 && PinNum<8)){
     3d6:	8a 81       	ldd	r24, Y+2	; 0x02
     3d8:	88 30       	cpi	r24, 0x08	; 8
     3da:	88 f4       	brcc	.+34     	; 0x3fe <DIO_u8GetPin+0x34>
	     ret= GETBIT(PINA,PinNum);
     3dc:	89 e3       	ldi	r24, 0x39	; 57
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	fc 01       	movw	r30, r24
     3e2:	80 81       	ld	r24, Z
     3e4:	88 2f       	mov	r24, r24
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	2a 81       	ldd	r18, Y+2	; 0x02
     3ea:	22 2f       	mov	r18, r18
     3ec:	30 e0       	ldi	r19, 0x00	; 0
     3ee:	02 c0       	rjmp	.+4      	; 0x3f4 <DIO_u8GetPin+0x2a>
     3f0:	95 95       	asr	r25
     3f2:	87 95       	ror	r24
     3f4:	2a 95       	dec	r18
     3f6:	e2 f7       	brpl	.-8      	; 0x3f0 <DIO_u8GetPin+0x26>
     3f8:	81 70       	andi	r24, 0x01	; 1
     3fa:	89 83       	std	Y+1, r24	; 0x01
     3fc:	4a c0       	rjmp	.+148    	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
	}else if((PinNum>=8) && (PinNum<16)){
     3fe:	8a 81       	ldd	r24, Y+2	; 0x02
     400:	88 30       	cpi	r24, 0x08	; 8
     402:	b0 f0       	brcs	.+44     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     404:	8a 81       	ldd	r24, Y+2	; 0x02
     406:	80 31       	cpi	r24, 0x10	; 16
     408:	98 f4       	brcc	.+38     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
	     ret= GETBIT(PINB,PinNum-8);
     40a:	86 e3       	ldi	r24, 0x36	; 54
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	fc 01       	movw	r30, r24
     410:	80 81       	ld	r24, Z
     412:	88 2f       	mov	r24, r24
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	2a 81       	ldd	r18, Y+2	; 0x02
     418:	22 2f       	mov	r18, r18
     41a:	30 e0       	ldi	r19, 0x00	; 0
     41c:	28 50       	subi	r18, 0x08	; 8
     41e:	31 09       	sbc	r19, r1
     420:	02 c0       	rjmp	.+4      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
     422:	95 95       	asr	r25
     424:	87 95       	ror	r24
     426:	2a 95       	dec	r18
     428:	e2 f7       	brpl	.-8      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     42a:	81 70       	andi	r24, 0x01	; 1
     42c:	89 83       	std	Y+1, r24	; 0x01
     42e:	31 c0       	rjmp	.+98     	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
	}else if((PinNum>=16) && (PinNum<24)){
     430:	8a 81       	ldd	r24, Y+2	; 0x02
     432:	80 31       	cpi	r24, 0x10	; 16
     434:	b0 f0       	brcs	.+44     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     436:	8a 81       	ldd	r24, Y+2	; 0x02
     438:	88 31       	cpi	r24, 0x18	; 24
     43a:	98 f4       	brcc	.+38     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
	     ret= GETBIT(PINC,PinNum-16);
     43c:	83 e3       	ldi	r24, 0x33	; 51
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	fc 01       	movw	r30, r24
     442:	80 81       	ld	r24, Z
     444:	88 2f       	mov	r24, r24
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	2a 81       	ldd	r18, Y+2	; 0x02
     44a:	22 2f       	mov	r18, r18
     44c:	30 e0       	ldi	r19, 0x00	; 0
     44e:	20 51       	subi	r18, 0x10	; 16
     450:	31 09       	sbc	r19, r1
     452:	02 c0       	rjmp	.+4      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
     454:	95 95       	asr	r25
     456:	87 95       	ror	r24
     458:	2a 95       	dec	r18
     45a:	e2 f7       	brpl	.-8      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
     45c:	81 70       	andi	r24, 0x01	; 1
     45e:	89 83       	std	Y+1, r24	; 0x01
     460:	18 c0       	rjmp	.+48     	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
	}else if((PinNum>=24) && (PinNum<32)){
     462:	8a 81       	ldd	r24, Y+2	; 0x02
     464:	88 31       	cpi	r24, 0x18	; 24
     466:	a8 f0       	brcs	.+42     	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
     468:	8a 81       	ldd	r24, Y+2	; 0x02
     46a:	80 32       	cpi	r24, 0x20	; 32
     46c:	90 f4       	brcc	.+36     	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
	     ret= GETBIT(PIND,PinNum-16);
     46e:	80 e3       	ldi	r24, 0x30	; 48
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	fc 01       	movw	r30, r24
     474:	80 81       	ld	r24, Z
     476:	88 2f       	mov	r24, r24
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	2a 81       	ldd	r18, Y+2	; 0x02
     47c:	22 2f       	mov	r18, r18
     47e:	30 e0       	ldi	r19, 0x00	; 0
     480:	20 51       	subi	r18, 0x10	; 16
     482:	31 09       	sbc	r19, r1
     484:	02 c0       	rjmp	.+4      	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
     486:	95 95       	asr	r25
     488:	87 95       	ror	r24
     48a:	2a 95       	dec	r18
     48c:	e2 f7       	brpl	.-8      	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
     48e:	81 70       	andi	r24, 0x01	; 1
     490:	89 83       	std	Y+1, r24	; 0x01
	}

	return ret;
     492:	89 81       	ldd	r24, Y+1	; 0x01

}
     494:	0f 90       	pop	r0
     496:	0f 90       	pop	r0
     498:	df 91       	pop	r29
     49a:	cf 91       	pop	r28
     49c:	08 95       	ret

0000049e <DIO_voidTogglePin>:

void DIO_voidTogglePin(u8 PinNum){
     49e:	cf 93       	push	r28
     4a0:	df 93       	push	r29
     4a2:	1f 92       	push	r1
     4a4:	cd b7       	in	r28, 0x3d	; 61
     4a6:	de b7       	in	r29, 0x3e	; 62
     4a8:	89 83       	std	Y+1, r24	; 0x01

	if((PinNum>=0 && PinNum<8)){
     4aa:	89 81       	ldd	r24, Y+1	; 0x01
     4ac:	88 30       	cpi	r24, 0x08	; 8
     4ae:	a8 f4       	brcc	.+42     	; 0x4da <DIO_voidTogglePin+0x3c>
		    TOGGLEBIT(PORTA,PinNum);
     4b0:	8b e3       	ldi	r24, 0x3B	; 59
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	2b e3       	ldi	r18, 0x3B	; 59
     4b6:	30 e0       	ldi	r19, 0x00	; 0
     4b8:	f9 01       	movw	r30, r18
     4ba:	20 81       	ld	r18, Z
     4bc:	62 2f       	mov	r22, r18
     4be:	29 81       	ldd	r18, Y+1	; 0x01
     4c0:	42 2f       	mov	r20, r18
     4c2:	50 e0       	ldi	r21, 0x00	; 0
     4c4:	21 e0       	ldi	r18, 0x01	; 1
     4c6:	30 e0       	ldi	r19, 0x00	; 0
     4c8:	02 c0       	rjmp	.+4      	; 0x4ce <DIO_voidTogglePin+0x30>
     4ca:	22 0f       	add	r18, r18
     4cc:	33 1f       	adc	r19, r19
     4ce:	4a 95       	dec	r20
     4d0:	e2 f7       	brpl	.-8      	; 0x4ca <DIO_voidTogglePin+0x2c>
     4d2:	26 27       	eor	r18, r22
     4d4:	fc 01       	movw	r30, r24
     4d6:	20 83       	st	Z, r18
		}else if((PinNum>=24) && (PinNum<32)){
		    TOGGLEBIT(PORTD,PinNum-16);
		}


}
     4d8:	5a c0       	rjmp	.+180    	; 0x58e <DIO_voidTogglePin+0xf0>

void DIO_voidTogglePin(u8 PinNum){

	if((PinNum>=0 && PinNum<8)){
		    TOGGLEBIT(PORTA,PinNum);
		}else if((PinNum>=8) && (PinNum<16)){
     4da:	89 81       	ldd	r24, Y+1	; 0x01
     4dc:	88 30       	cpi	r24, 0x08	; 8
     4de:	d8 f0       	brcs	.+54     	; 0x516 <DIO_voidTogglePin+0x78>
     4e0:	89 81       	ldd	r24, Y+1	; 0x01
     4e2:	80 31       	cpi	r24, 0x10	; 16
     4e4:	c0 f4       	brcc	.+48     	; 0x516 <DIO_voidTogglePin+0x78>
		    TOGGLEBIT(PORTB,PinNum-8);
     4e6:	88 e3       	ldi	r24, 0x38	; 56
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	28 e3       	ldi	r18, 0x38	; 56
     4ec:	30 e0       	ldi	r19, 0x00	; 0
     4ee:	f9 01       	movw	r30, r18
     4f0:	20 81       	ld	r18, Z
     4f2:	62 2f       	mov	r22, r18
     4f4:	29 81       	ldd	r18, Y+1	; 0x01
     4f6:	22 2f       	mov	r18, r18
     4f8:	30 e0       	ldi	r19, 0x00	; 0
     4fa:	a9 01       	movw	r20, r18
     4fc:	48 50       	subi	r20, 0x08	; 8
     4fe:	51 09       	sbc	r21, r1
     500:	21 e0       	ldi	r18, 0x01	; 1
     502:	30 e0       	ldi	r19, 0x00	; 0
     504:	02 c0       	rjmp	.+4      	; 0x50a <DIO_voidTogglePin+0x6c>
     506:	22 0f       	add	r18, r18
     508:	33 1f       	adc	r19, r19
     50a:	4a 95       	dec	r20
     50c:	e2 f7       	brpl	.-8      	; 0x506 <DIO_voidTogglePin+0x68>
     50e:	26 27       	eor	r18, r22
     510:	fc 01       	movw	r30, r24
     512:	20 83       	st	Z, r18
     514:	3c c0       	rjmp	.+120    	; 0x58e <DIO_voidTogglePin+0xf0>
		}else if((PinNum>=16) && (PinNum<24)){
     516:	89 81       	ldd	r24, Y+1	; 0x01
     518:	80 31       	cpi	r24, 0x10	; 16
     51a:	d8 f0       	brcs	.+54     	; 0x552 <DIO_voidTogglePin+0xb4>
     51c:	89 81       	ldd	r24, Y+1	; 0x01
     51e:	88 31       	cpi	r24, 0x18	; 24
     520:	c0 f4       	brcc	.+48     	; 0x552 <DIO_voidTogglePin+0xb4>
		    TOGGLEBIT(PORTC,PinNum-16);
     522:	85 e3       	ldi	r24, 0x35	; 53
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	25 e3       	ldi	r18, 0x35	; 53
     528:	30 e0       	ldi	r19, 0x00	; 0
     52a:	f9 01       	movw	r30, r18
     52c:	20 81       	ld	r18, Z
     52e:	62 2f       	mov	r22, r18
     530:	29 81       	ldd	r18, Y+1	; 0x01
     532:	22 2f       	mov	r18, r18
     534:	30 e0       	ldi	r19, 0x00	; 0
     536:	a9 01       	movw	r20, r18
     538:	40 51       	subi	r20, 0x10	; 16
     53a:	51 09       	sbc	r21, r1
     53c:	21 e0       	ldi	r18, 0x01	; 1
     53e:	30 e0       	ldi	r19, 0x00	; 0
     540:	02 c0       	rjmp	.+4      	; 0x546 <DIO_voidTogglePin+0xa8>
     542:	22 0f       	add	r18, r18
     544:	33 1f       	adc	r19, r19
     546:	4a 95       	dec	r20
     548:	e2 f7       	brpl	.-8      	; 0x542 <DIO_voidTogglePin+0xa4>
     54a:	26 27       	eor	r18, r22
     54c:	fc 01       	movw	r30, r24
     54e:	20 83       	st	Z, r18
     550:	1e c0       	rjmp	.+60     	; 0x58e <DIO_voidTogglePin+0xf0>
		}else if((PinNum>=24) && (PinNum<32)){
     552:	89 81       	ldd	r24, Y+1	; 0x01
     554:	88 31       	cpi	r24, 0x18	; 24
     556:	d8 f0       	brcs	.+54     	; 0x58e <DIO_voidTogglePin+0xf0>
     558:	89 81       	ldd	r24, Y+1	; 0x01
     55a:	80 32       	cpi	r24, 0x20	; 32
     55c:	c0 f4       	brcc	.+48     	; 0x58e <DIO_voidTogglePin+0xf0>
		    TOGGLEBIT(PORTD,PinNum-16);
     55e:	82 e3       	ldi	r24, 0x32	; 50
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	22 e3       	ldi	r18, 0x32	; 50
     564:	30 e0       	ldi	r19, 0x00	; 0
     566:	f9 01       	movw	r30, r18
     568:	20 81       	ld	r18, Z
     56a:	62 2f       	mov	r22, r18
     56c:	29 81       	ldd	r18, Y+1	; 0x01
     56e:	22 2f       	mov	r18, r18
     570:	30 e0       	ldi	r19, 0x00	; 0
     572:	a9 01       	movw	r20, r18
     574:	40 51       	subi	r20, 0x10	; 16
     576:	51 09       	sbc	r21, r1
     578:	21 e0       	ldi	r18, 0x01	; 1
     57a:	30 e0       	ldi	r19, 0x00	; 0
     57c:	02 c0       	rjmp	.+4      	; 0x582 <DIO_voidTogglePin+0xe4>
     57e:	22 0f       	add	r18, r18
     580:	33 1f       	adc	r19, r19
     582:	4a 95       	dec	r20
     584:	e2 f7       	brpl	.-8      	; 0x57e <DIO_voidTogglePin+0xe0>
     586:	26 27       	eor	r18, r22
     588:	fc 01       	movw	r30, r24
     58a:	20 83       	st	Z, r18
		}


}
     58c:	00 c0       	rjmp	.+0      	; 0x58e <DIO_voidTogglePin+0xf0>
     58e:	00 00       	nop
     590:	0f 90       	pop	r0
     592:	df 91       	pop	r29
     594:	cf 91       	pop	r28
     596:	08 95       	ret

00000598 <LCD_voidInitialize>:
#include "LCD_priv.h"
#include "LCD_config.h"
#include "LCD_int.h"


void LCD_voidInitialize(void){
     598:	cf 93       	push	r28
     59a:	df 93       	push	r29
     59c:	cd b7       	in	r28, 0x3d	; 61
     59e:	de b7       	in	r29, 0x3e	; 62
     5a0:	e8 97       	sbiw	r28, 0x38	; 56
     5a2:	0f b6       	in	r0, 0x3f	; 63
     5a4:	f8 94       	cli
     5a6:	de bf       	out	0x3e, r29	; 62
     5a8:	0f be       	out	0x3f, r0	; 63
     5aa:	cd bf       	out	0x3d, r28	; 61
     5ac:	80 e0       	ldi	r24, 0x00	; 0
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	a8 ef       	ldi	r26, 0xF8	; 248
     5b2:	b1 e4       	ldi	r27, 0x41	; 65
     5b4:	89 83       	std	Y+1, r24	; 0x01
     5b6:	9a 83       	std	Y+2, r25	; 0x02
     5b8:	ab 83       	std	Y+3, r26	; 0x03
     5ba:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     5bc:	20 e0       	ldi	r18, 0x00	; 0
     5be:	30 e0       	ldi	r19, 0x00	; 0
     5c0:	4a ef       	ldi	r20, 0xFA	; 250
     5c2:	54 e4       	ldi	r21, 0x44	; 68
     5c4:	69 81       	ldd	r22, Y+1	; 0x01
     5c6:	7a 81       	ldd	r23, Y+2	; 0x02
     5c8:	8b 81       	ldd	r24, Y+3	; 0x03
     5ca:	9c 81       	ldd	r25, Y+4	; 0x04
     5cc:	0e 94 c8 10 	call	0x2190	; 0x2190 <__mulsf3>
     5d0:	dc 01       	movw	r26, r24
     5d2:	cb 01       	movw	r24, r22
     5d4:	8f a7       	std	Y+47, r24	; 0x2f
     5d6:	98 ab       	std	Y+48, r25	; 0x30
     5d8:	a9 ab       	std	Y+49, r26	; 0x31
     5da:	ba ab       	std	Y+50, r27	; 0x32
	if (__tmp < 1.0)
     5dc:	20 e0       	ldi	r18, 0x00	; 0
     5de:	30 e0       	ldi	r19, 0x00	; 0
     5e0:	40 e8       	ldi	r20, 0x80	; 128
     5e2:	5f e3       	ldi	r21, 0x3F	; 63
     5e4:	6f a5       	ldd	r22, Y+47	; 0x2f
     5e6:	78 a9       	ldd	r23, Y+48	; 0x30
     5e8:	89 a9       	ldd	r24, Y+49	; 0x31
     5ea:	9a a9       	ldd	r25, Y+50	; 0x32
     5ec:	0e 94 42 10 	call	0x2084	; 0x2084 <__cmpsf2>
     5f0:	88 23       	and	r24, r24
     5f2:	2c f4       	brge	.+10     	; 0x5fe <LCD_voidInitialize+0x66>
		__ticks = 1;
     5f4:	81 e0       	ldi	r24, 0x01	; 1
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	9c ab       	std	Y+52, r25	; 0x34
     5fa:	8b ab       	std	Y+51, r24	; 0x33
     5fc:	3f c0       	rjmp	.+126    	; 0x67c <LCD_voidInitialize+0xe4>
	else if (__tmp > 65535)
     5fe:	20 e0       	ldi	r18, 0x00	; 0
     600:	3f ef       	ldi	r19, 0xFF	; 255
     602:	4f e7       	ldi	r20, 0x7F	; 127
     604:	57 e4       	ldi	r21, 0x47	; 71
     606:	6f a5       	ldd	r22, Y+47	; 0x2f
     608:	78 a9       	ldd	r23, Y+48	; 0x30
     60a:	89 a9       	ldd	r24, Y+49	; 0x31
     60c:	9a a9       	ldd	r25, Y+50	; 0x32
     60e:	0e 94 c3 10 	call	0x2186	; 0x2186 <__gesf2>
     612:	18 16       	cp	r1, r24
     614:	4c f5       	brge	.+82     	; 0x668 <LCD_voidInitialize+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     616:	20 e0       	ldi	r18, 0x00	; 0
     618:	30 e0       	ldi	r19, 0x00	; 0
     61a:	40 e2       	ldi	r20, 0x20	; 32
     61c:	51 e4       	ldi	r21, 0x41	; 65
     61e:	69 81       	ldd	r22, Y+1	; 0x01
     620:	7a 81       	ldd	r23, Y+2	; 0x02
     622:	8b 81       	ldd	r24, Y+3	; 0x03
     624:	9c 81       	ldd	r25, Y+4	; 0x04
     626:	0e 94 c8 10 	call	0x2190	; 0x2190 <__mulsf3>
     62a:	dc 01       	movw	r26, r24
     62c:	cb 01       	movw	r24, r22
     62e:	bc 01       	movw	r22, r24
     630:	cd 01       	movw	r24, r26
     632:	0e 94 47 10 	call	0x208e	; 0x208e <__fixunssfsi>
     636:	dc 01       	movw	r26, r24
     638:	cb 01       	movw	r24, r22
     63a:	9c ab       	std	Y+52, r25	; 0x34
     63c:	8b ab       	std	Y+51, r24	; 0x33
     63e:	0f c0       	rjmp	.+30     	; 0x65e <LCD_voidInitialize+0xc6>
     640:	88 ec       	ldi	r24, 0xC8	; 200
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	9e ab       	std	Y+54, r25	; 0x36
     646:	8d ab       	std	Y+53, r24	; 0x35
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     648:	8d a9       	ldd	r24, Y+53	; 0x35
     64a:	9e a9       	ldd	r25, Y+54	; 0x36
     64c:	01 97       	sbiw	r24, 0x01	; 1
     64e:	f1 f7       	brne	.-4      	; 0x64c <LCD_voidInitialize+0xb4>
     650:	9e ab       	std	Y+54, r25	; 0x36
     652:	8d ab       	std	Y+53, r24	; 0x35
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     654:	8b a9       	ldd	r24, Y+51	; 0x33
     656:	9c a9       	ldd	r25, Y+52	; 0x34
     658:	01 97       	sbiw	r24, 0x01	; 1
     65a:	9c ab       	std	Y+52, r25	; 0x34
     65c:	8b ab       	std	Y+51, r24	; 0x33
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     65e:	8b a9       	ldd	r24, Y+51	; 0x33
     660:	9c a9       	ldd	r25, Y+52	; 0x34
     662:	89 2b       	or	r24, r25
     664:	69 f7       	brne	.-38     	; 0x640 <LCD_voidInitialize+0xa8>
     666:	14 c0       	rjmp	.+40     	; 0x690 <LCD_voidInitialize+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     668:	6f a5       	ldd	r22, Y+47	; 0x2f
     66a:	78 a9       	ldd	r23, Y+48	; 0x30
     66c:	89 a9       	ldd	r24, Y+49	; 0x31
     66e:	9a a9       	ldd	r25, Y+50	; 0x32
     670:	0e 94 47 10 	call	0x208e	; 0x208e <__fixunssfsi>
     674:	dc 01       	movw	r26, r24
     676:	cb 01       	movw	r24, r22
     678:	9c ab       	std	Y+52, r25	; 0x34
     67a:	8b ab       	std	Y+51, r24	; 0x33
     67c:	8b a9       	ldd	r24, Y+51	; 0x33
     67e:	9c a9       	ldd	r25, Y+52	; 0x34
     680:	98 af       	std	Y+56, r25	; 0x38
     682:	8f ab       	std	Y+55, r24	; 0x37
     684:	8f a9       	ldd	r24, Y+55	; 0x37
     686:	98 ad       	ldd	r25, Y+56	; 0x38
     688:	01 97       	sbiw	r24, 0x01	; 1
     68a:	f1 f7       	brne	.-4      	; 0x688 <LCD_voidInitialize+0xf0>
     68c:	98 af       	std	Y+56, r25	; 0x38
     68e:	8f ab       	std	Y+55, r24	; 0x37

	_delay_ms(31);
	LCD_voidWriteCmd(0b00101000);
     690:	88 e2       	ldi	r24, 0x28	; 40
     692:	0e 94 ca 04 	call	0x994	; 0x994 <LCD_voidWriteCmd>
     696:	80 e0       	ldi	r24, 0x00	; 0
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	a0 e8       	ldi	r26, 0x80	; 128
     69c:	bf e3       	ldi	r27, 0x3F	; 63
     69e:	8d 83       	std	Y+5, r24	; 0x05
     6a0:	9e 83       	std	Y+6, r25	; 0x06
     6a2:	af 83       	std	Y+7, r26	; 0x07
     6a4:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     6a6:	20 e0       	ldi	r18, 0x00	; 0
     6a8:	30 e0       	ldi	r19, 0x00	; 0
     6aa:	4a ef       	ldi	r20, 0xFA	; 250
     6ac:	54 e4       	ldi	r21, 0x44	; 68
     6ae:	6d 81       	ldd	r22, Y+5	; 0x05
     6b0:	7e 81       	ldd	r23, Y+6	; 0x06
     6b2:	8f 81       	ldd	r24, Y+7	; 0x07
     6b4:	98 85       	ldd	r25, Y+8	; 0x08
     6b6:	0e 94 c8 10 	call	0x2190	; 0x2190 <__mulsf3>
     6ba:	dc 01       	movw	r26, r24
     6bc:	cb 01       	movw	r24, r22
     6be:	8d a3       	std	Y+37, r24	; 0x25
     6c0:	9e a3       	std	Y+38, r25	; 0x26
     6c2:	af a3       	std	Y+39, r26	; 0x27
     6c4:	b8 a7       	std	Y+40, r27	; 0x28
	if (__tmp < 1.0)
     6c6:	20 e0       	ldi	r18, 0x00	; 0
     6c8:	30 e0       	ldi	r19, 0x00	; 0
     6ca:	40 e8       	ldi	r20, 0x80	; 128
     6cc:	5f e3       	ldi	r21, 0x3F	; 63
     6ce:	6d a1       	ldd	r22, Y+37	; 0x25
     6d0:	7e a1       	ldd	r23, Y+38	; 0x26
     6d2:	8f a1       	ldd	r24, Y+39	; 0x27
     6d4:	98 a5       	ldd	r25, Y+40	; 0x28
     6d6:	0e 94 42 10 	call	0x2084	; 0x2084 <__cmpsf2>
     6da:	88 23       	and	r24, r24
     6dc:	2c f4       	brge	.+10     	; 0x6e8 <LCD_voidInitialize+0x150>
		__ticks = 1;
     6de:	81 e0       	ldi	r24, 0x01	; 1
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	9a a7       	std	Y+42, r25	; 0x2a
     6e4:	89 a7       	std	Y+41, r24	; 0x29
     6e6:	3f c0       	rjmp	.+126    	; 0x766 <LCD_voidInitialize+0x1ce>
	else if (__tmp > 65535)
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	3f ef       	ldi	r19, 0xFF	; 255
     6ec:	4f e7       	ldi	r20, 0x7F	; 127
     6ee:	57 e4       	ldi	r21, 0x47	; 71
     6f0:	6d a1       	ldd	r22, Y+37	; 0x25
     6f2:	7e a1       	ldd	r23, Y+38	; 0x26
     6f4:	8f a1       	ldd	r24, Y+39	; 0x27
     6f6:	98 a5       	ldd	r25, Y+40	; 0x28
     6f8:	0e 94 c3 10 	call	0x2186	; 0x2186 <__gesf2>
     6fc:	18 16       	cp	r1, r24
     6fe:	4c f5       	brge	.+82     	; 0x752 <LCD_voidInitialize+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     700:	20 e0       	ldi	r18, 0x00	; 0
     702:	30 e0       	ldi	r19, 0x00	; 0
     704:	40 e2       	ldi	r20, 0x20	; 32
     706:	51 e4       	ldi	r21, 0x41	; 65
     708:	6d 81       	ldd	r22, Y+5	; 0x05
     70a:	7e 81       	ldd	r23, Y+6	; 0x06
     70c:	8f 81       	ldd	r24, Y+7	; 0x07
     70e:	98 85       	ldd	r25, Y+8	; 0x08
     710:	0e 94 c8 10 	call	0x2190	; 0x2190 <__mulsf3>
     714:	dc 01       	movw	r26, r24
     716:	cb 01       	movw	r24, r22
     718:	bc 01       	movw	r22, r24
     71a:	cd 01       	movw	r24, r26
     71c:	0e 94 47 10 	call	0x208e	; 0x208e <__fixunssfsi>
     720:	dc 01       	movw	r26, r24
     722:	cb 01       	movw	r24, r22
     724:	9a a7       	std	Y+42, r25	; 0x2a
     726:	89 a7       	std	Y+41, r24	; 0x29
     728:	0f c0       	rjmp	.+30     	; 0x748 <LCD_voidInitialize+0x1b0>
     72a:	88 ec       	ldi	r24, 0xC8	; 200
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	9c a7       	std	Y+44, r25	; 0x2c
     730:	8b a7       	std	Y+43, r24	; 0x2b
     732:	8b a5       	ldd	r24, Y+43	; 0x2b
     734:	9c a5       	ldd	r25, Y+44	; 0x2c
     736:	01 97       	sbiw	r24, 0x01	; 1
     738:	f1 f7       	brne	.-4      	; 0x736 <LCD_voidInitialize+0x19e>
     73a:	9c a7       	std	Y+44, r25	; 0x2c
     73c:	8b a7       	std	Y+43, r24	; 0x2b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     73e:	89 a5       	ldd	r24, Y+41	; 0x29
     740:	9a a5       	ldd	r25, Y+42	; 0x2a
     742:	01 97       	sbiw	r24, 0x01	; 1
     744:	9a a7       	std	Y+42, r25	; 0x2a
     746:	89 a7       	std	Y+41, r24	; 0x29
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     748:	89 a5       	ldd	r24, Y+41	; 0x29
     74a:	9a a5       	ldd	r25, Y+42	; 0x2a
     74c:	89 2b       	or	r24, r25
     74e:	69 f7       	brne	.-38     	; 0x72a <LCD_voidInitialize+0x192>
     750:	14 c0       	rjmp	.+40     	; 0x77a <LCD_voidInitialize+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     752:	6d a1       	ldd	r22, Y+37	; 0x25
     754:	7e a1       	ldd	r23, Y+38	; 0x26
     756:	8f a1       	ldd	r24, Y+39	; 0x27
     758:	98 a5       	ldd	r25, Y+40	; 0x28
     75a:	0e 94 47 10 	call	0x208e	; 0x208e <__fixunssfsi>
     75e:	dc 01       	movw	r26, r24
     760:	cb 01       	movw	r24, r22
     762:	9a a7       	std	Y+42, r25	; 0x2a
     764:	89 a7       	std	Y+41, r24	; 0x29
     766:	89 a5       	ldd	r24, Y+41	; 0x29
     768:	9a a5       	ldd	r25, Y+42	; 0x2a
     76a:	9e a7       	std	Y+46, r25	; 0x2e
     76c:	8d a7       	std	Y+45, r24	; 0x2d
     76e:	8d a5       	ldd	r24, Y+45	; 0x2d
     770:	9e a5       	ldd	r25, Y+46	; 0x2e
     772:	01 97       	sbiw	r24, 0x01	; 1
     774:	f1 f7       	brne	.-4      	; 0x772 <LCD_voidInitialize+0x1da>
     776:	9e a7       	std	Y+46, r25	; 0x2e
     778:	8d a7       	std	Y+45, r24	; 0x2d
	_delay_ms(1);
	LCD_voidWriteCmd(0b00001100);
     77a:	8c e0       	ldi	r24, 0x0C	; 12
     77c:	0e 94 ca 04 	call	0x994	; 0x994 <LCD_voidWriteCmd>
     780:	80 e0       	ldi	r24, 0x00	; 0
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	a0 e8       	ldi	r26, 0x80	; 128
     786:	bf e3       	ldi	r27, 0x3F	; 63
     788:	89 87       	std	Y+9, r24	; 0x09
     78a:	9a 87       	std	Y+10, r25	; 0x0a
     78c:	ab 87       	std	Y+11, r26	; 0x0b
     78e:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     790:	20 e0       	ldi	r18, 0x00	; 0
     792:	30 e0       	ldi	r19, 0x00	; 0
     794:	4a ef       	ldi	r20, 0xFA	; 250
     796:	54 e4       	ldi	r21, 0x44	; 68
     798:	69 85       	ldd	r22, Y+9	; 0x09
     79a:	7a 85       	ldd	r23, Y+10	; 0x0a
     79c:	8b 85       	ldd	r24, Y+11	; 0x0b
     79e:	9c 85       	ldd	r25, Y+12	; 0x0c
     7a0:	0e 94 c8 10 	call	0x2190	; 0x2190 <__mulsf3>
     7a4:	dc 01       	movw	r26, r24
     7a6:	cb 01       	movw	r24, r22
     7a8:	8b 8f       	std	Y+27, r24	; 0x1b
     7aa:	9c 8f       	std	Y+28, r25	; 0x1c
     7ac:	ad 8f       	std	Y+29, r26	; 0x1d
     7ae:	be 8f       	std	Y+30, r27	; 0x1e
	if (__tmp < 1.0)
     7b0:	20 e0       	ldi	r18, 0x00	; 0
     7b2:	30 e0       	ldi	r19, 0x00	; 0
     7b4:	40 e8       	ldi	r20, 0x80	; 128
     7b6:	5f e3       	ldi	r21, 0x3F	; 63
     7b8:	6b 8d       	ldd	r22, Y+27	; 0x1b
     7ba:	7c 8d       	ldd	r23, Y+28	; 0x1c
     7bc:	8d 8d       	ldd	r24, Y+29	; 0x1d
     7be:	9e 8d       	ldd	r25, Y+30	; 0x1e
     7c0:	0e 94 42 10 	call	0x2084	; 0x2084 <__cmpsf2>
     7c4:	88 23       	and	r24, r24
     7c6:	2c f4       	brge	.+10     	; 0x7d2 <LCD_voidInitialize+0x23a>
		__ticks = 1;
     7c8:	81 e0       	ldi	r24, 0x01	; 1
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	98 a3       	std	Y+32, r25	; 0x20
     7ce:	8f 8f       	std	Y+31, r24	; 0x1f
     7d0:	3f c0       	rjmp	.+126    	; 0x850 <LCD_voidInitialize+0x2b8>
	else if (__tmp > 65535)
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	3f ef       	ldi	r19, 0xFF	; 255
     7d6:	4f e7       	ldi	r20, 0x7F	; 127
     7d8:	57 e4       	ldi	r21, 0x47	; 71
     7da:	6b 8d       	ldd	r22, Y+27	; 0x1b
     7dc:	7c 8d       	ldd	r23, Y+28	; 0x1c
     7de:	8d 8d       	ldd	r24, Y+29	; 0x1d
     7e0:	9e 8d       	ldd	r25, Y+30	; 0x1e
     7e2:	0e 94 c3 10 	call	0x2186	; 0x2186 <__gesf2>
     7e6:	18 16       	cp	r1, r24
     7e8:	4c f5       	brge	.+82     	; 0x83c <LCD_voidInitialize+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     7ea:	20 e0       	ldi	r18, 0x00	; 0
     7ec:	30 e0       	ldi	r19, 0x00	; 0
     7ee:	40 e2       	ldi	r20, 0x20	; 32
     7f0:	51 e4       	ldi	r21, 0x41	; 65
     7f2:	69 85       	ldd	r22, Y+9	; 0x09
     7f4:	7a 85       	ldd	r23, Y+10	; 0x0a
     7f6:	8b 85       	ldd	r24, Y+11	; 0x0b
     7f8:	9c 85       	ldd	r25, Y+12	; 0x0c
     7fa:	0e 94 c8 10 	call	0x2190	; 0x2190 <__mulsf3>
     7fe:	dc 01       	movw	r26, r24
     800:	cb 01       	movw	r24, r22
     802:	bc 01       	movw	r22, r24
     804:	cd 01       	movw	r24, r26
     806:	0e 94 47 10 	call	0x208e	; 0x208e <__fixunssfsi>
     80a:	dc 01       	movw	r26, r24
     80c:	cb 01       	movw	r24, r22
     80e:	98 a3       	std	Y+32, r25	; 0x20
     810:	8f 8f       	std	Y+31, r24	; 0x1f
     812:	0f c0       	rjmp	.+30     	; 0x832 <LCD_voidInitialize+0x29a>
     814:	88 ec       	ldi	r24, 0xC8	; 200
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	9a a3       	std	Y+34, r25	; 0x22
     81a:	89 a3       	std	Y+33, r24	; 0x21
     81c:	89 a1       	ldd	r24, Y+33	; 0x21
     81e:	9a a1       	ldd	r25, Y+34	; 0x22
     820:	01 97       	sbiw	r24, 0x01	; 1
     822:	f1 f7       	brne	.-4      	; 0x820 <LCD_voidInitialize+0x288>
     824:	9a a3       	std	Y+34, r25	; 0x22
     826:	89 a3       	std	Y+33, r24	; 0x21
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     828:	8f 8d       	ldd	r24, Y+31	; 0x1f
     82a:	98 a1       	ldd	r25, Y+32	; 0x20
     82c:	01 97       	sbiw	r24, 0x01	; 1
     82e:	98 a3       	std	Y+32, r25	; 0x20
     830:	8f 8f       	std	Y+31, r24	; 0x1f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     832:	8f 8d       	ldd	r24, Y+31	; 0x1f
     834:	98 a1       	ldd	r25, Y+32	; 0x20
     836:	89 2b       	or	r24, r25
     838:	69 f7       	brne	.-38     	; 0x814 <LCD_voidInitialize+0x27c>
     83a:	14 c0       	rjmp	.+40     	; 0x864 <__stack+0x5>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     83c:	6b 8d       	ldd	r22, Y+27	; 0x1b
     83e:	7c 8d       	ldd	r23, Y+28	; 0x1c
     840:	8d 8d       	ldd	r24, Y+29	; 0x1d
     842:	9e 8d       	ldd	r25, Y+30	; 0x1e
     844:	0e 94 47 10 	call	0x208e	; 0x208e <__fixunssfsi>
     848:	dc 01       	movw	r26, r24
     84a:	cb 01       	movw	r24, r22
     84c:	98 a3       	std	Y+32, r25	; 0x20
     84e:	8f 8f       	std	Y+31, r24	; 0x1f
     850:	8f 8d       	ldd	r24, Y+31	; 0x1f
     852:	98 a1       	ldd	r25, Y+32	; 0x20
     854:	9c a3       	std	Y+36, r25	; 0x24
     856:	8b a3       	std	Y+35, r24	; 0x23
     858:	8b a1       	ldd	r24, Y+35	; 0x23
     85a:	9c a1       	ldd	r25, Y+36	; 0x24
     85c:	01 97       	sbiw	r24, 0x01	; 1
     85e:	f1 f7       	brne	.-4      	; 0x85c <LCD_voidInitialize+0x2c4>
     860:	9c a3       	std	Y+36, r25	; 0x24
     862:	8b a3       	std	Y+35, r24	; 0x23
	_delay_ms(1);
	LCD_voidWriteCmd(CLR_DISPLAY);
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	0e 94 ca 04 	call	0x994	; 0x994 <LCD_voidWriteCmd>
     86a:	80 e0       	ldi	r24, 0x00	; 0
     86c:	90 e0       	ldi	r25, 0x00	; 0
     86e:	a0 e0       	ldi	r26, 0x00	; 0
     870:	b0 e4       	ldi	r27, 0x40	; 64
     872:	8d 87       	std	Y+13, r24	; 0x0d
     874:	9e 87       	std	Y+14, r25	; 0x0e
     876:	af 87       	std	Y+15, r26	; 0x0f
     878:	b8 8b       	std	Y+16, r27	; 0x10

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     87a:	20 e0       	ldi	r18, 0x00	; 0
     87c:	30 e0       	ldi	r19, 0x00	; 0
     87e:	4a ef       	ldi	r20, 0xFA	; 250
     880:	54 e4       	ldi	r21, 0x44	; 68
     882:	6d 85       	ldd	r22, Y+13	; 0x0d
     884:	7e 85       	ldd	r23, Y+14	; 0x0e
     886:	8f 85       	ldd	r24, Y+15	; 0x0f
     888:	98 89       	ldd	r25, Y+16	; 0x10
     88a:	0e 94 c8 10 	call	0x2190	; 0x2190 <__mulsf3>
     88e:	dc 01       	movw	r26, r24
     890:	cb 01       	movw	r24, r22
     892:	89 8b       	std	Y+17, r24	; 0x11
     894:	9a 8b       	std	Y+18, r25	; 0x12
     896:	ab 8b       	std	Y+19, r26	; 0x13
     898:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     89a:	20 e0       	ldi	r18, 0x00	; 0
     89c:	30 e0       	ldi	r19, 0x00	; 0
     89e:	40 e8       	ldi	r20, 0x80	; 128
     8a0:	5f e3       	ldi	r21, 0x3F	; 63
     8a2:	69 89       	ldd	r22, Y+17	; 0x11
     8a4:	7a 89       	ldd	r23, Y+18	; 0x12
     8a6:	8b 89       	ldd	r24, Y+19	; 0x13
     8a8:	9c 89       	ldd	r25, Y+20	; 0x14
     8aa:	0e 94 42 10 	call	0x2084	; 0x2084 <__cmpsf2>
     8ae:	88 23       	and	r24, r24
     8b0:	2c f4       	brge	.+10     	; 0x8bc <__stack+0x5d>
		__ticks = 1;
     8b2:	81 e0       	ldi	r24, 0x01	; 1
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	9e 8b       	std	Y+22, r25	; 0x16
     8b8:	8d 8b       	std	Y+21, r24	; 0x15
     8ba:	3f c0       	rjmp	.+126    	; 0x93a <__stack+0xdb>
	else if (__tmp > 65535)
     8bc:	20 e0       	ldi	r18, 0x00	; 0
     8be:	3f ef       	ldi	r19, 0xFF	; 255
     8c0:	4f e7       	ldi	r20, 0x7F	; 127
     8c2:	57 e4       	ldi	r21, 0x47	; 71
     8c4:	69 89       	ldd	r22, Y+17	; 0x11
     8c6:	7a 89       	ldd	r23, Y+18	; 0x12
     8c8:	8b 89       	ldd	r24, Y+19	; 0x13
     8ca:	9c 89       	ldd	r25, Y+20	; 0x14
     8cc:	0e 94 c3 10 	call	0x2186	; 0x2186 <__gesf2>
     8d0:	18 16       	cp	r1, r24
     8d2:	4c f5       	brge	.+82     	; 0x926 <__stack+0xc7>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     8d4:	20 e0       	ldi	r18, 0x00	; 0
     8d6:	30 e0       	ldi	r19, 0x00	; 0
     8d8:	40 e2       	ldi	r20, 0x20	; 32
     8da:	51 e4       	ldi	r21, 0x41	; 65
     8dc:	6d 85       	ldd	r22, Y+13	; 0x0d
     8de:	7e 85       	ldd	r23, Y+14	; 0x0e
     8e0:	8f 85       	ldd	r24, Y+15	; 0x0f
     8e2:	98 89       	ldd	r25, Y+16	; 0x10
     8e4:	0e 94 c8 10 	call	0x2190	; 0x2190 <__mulsf3>
     8e8:	dc 01       	movw	r26, r24
     8ea:	cb 01       	movw	r24, r22
     8ec:	bc 01       	movw	r22, r24
     8ee:	cd 01       	movw	r24, r26
     8f0:	0e 94 47 10 	call	0x208e	; 0x208e <__fixunssfsi>
     8f4:	dc 01       	movw	r26, r24
     8f6:	cb 01       	movw	r24, r22
     8f8:	9e 8b       	std	Y+22, r25	; 0x16
     8fa:	8d 8b       	std	Y+21, r24	; 0x15
     8fc:	0f c0       	rjmp	.+30     	; 0x91c <__stack+0xbd>
     8fe:	88 ec       	ldi	r24, 0xC8	; 200
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	98 8f       	std	Y+24, r25	; 0x18
     904:	8f 8b       	std	Y+23, r24	; 0x17
     906:	8f 89       	ldd	r24, Y+23	; 0x17
     908:	98 8d       	ldd	r25, Y+24	; 0x18
     90a:	01 97       	sbiw	r24, 0x01	; 1
     90c:	f1 f7       	brne	.-4      	; 0x90a <__stack+0xab>
     90e:	98 8f       	std	Y+24, r25	; 0x18
     910:	8f 8b       	std	Y+23, r24	; 0x17
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     912:	8d 89       	ldd	r24, Y+21	; 0x15
     914:	9e 89       	ldd	r25, Y+22	; 0x16
     916:	01 97       	sbiw	r24, 0x01	; 1
     918:	9e 8b       	std	Y+22, r25	; 0x16
     91a:	8d 8b       	std	Y+21, r24	; 0x15
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     91c:	8d 89       	ldd	r24, Y+21	; 0x15
     91e:	9e 89       	ldd	r25, Y+22	; 0x16
     920:	89 2b       	or	r24, r25
     922:	69 f7       	brne	.-38     	; 0x8fe <__stack+0x9f>





}
     924:	14 c0       	rjmp	.+40     	; 0x94e <__stack+0xef>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     926:	69 89       	ldd	r22, Y+17	; 0x11
     928:	7a 89       	ldd	r23, Y+18	; 0x12
     92a:	8b 89       	ldd	r24, Y+19	; 0x13
     92c:	9c 89       	ldd	r25, Y+20	; 0x14
     92e:	0e 94 47 10 	call	0x208e	; 0x208e <__fixunssfsi>
     932:	dc 01       	movw	r26, r24
     934:	cb 01       	movw	r24, r22
     936:	9e 8b       	std	Y+22, r25	; 0x16
     938:	8d 8b       	std	Y+21, r24	; 0x15
     93a:	8d 89       	ldd	r24, Y+21	; 0x15
     93c:	9e 89       	ldd	r25, Y+22	; 0x16
     93e:	9a 8f       	std	Y+26, r25	; 0x1a
     940:	89 8f       	std	Y+25, r24	; 0x19
     942:	89 8d       	ldd	r24, Y+25	; 0x19
     944:	9a 8d       	ldd	r25, Y+26	; 0x1a
     946:	01 97       	sbiw	r24, 0x01	; 1
     948:	f1 f7       	brne	.-4      	; 0x946 <__stack+0xe7>
     94a:	9a 8f       	std	Y+26, r25	; 0x1a
     94c:	89 8f       	std	Y+25, r24	; 0x19
     94e:	00 00       	nop
     950:	e8 96       	adiw	r28, 0x38	; 56
     952:	0f b6       	in	r0, 0x3f	; 63
     954:	f8 94       	cli
     956:	de bf       	out	0x3e, r29	; 62
     958:	0f be       	out	0x3f, r0	; 63
     95a:	cd bf       	out	0x3d, r28	; 61
     95c:	df 91       	pop	r29
     95e:	cf 91       	pop	r28
     960:	08 95       	ret

00000962 <LCD_voidWriteData>:
void LCD_voidWriteData(u8 Data){
     962:	cf 93       	push	r28
     964:	df 93       	push	r29
     966:	1f 92       	push	r1
     968:	cd b7       	in	r28, 0x3d	; 61
     96a:	de b7       	in	r29, 0x3e	; 62
     96c:	89 83       	std	Y+1, r24	; 0x01

	DIO_voidSetPin(LCD_RS_PIN,HIGH);
     96e:	61 e0       	ldi	r22, 0x01	; 1
     970:	80 e1       	ldi	r24, 0x10	; 16
     972:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
	DIO_voidSetPin(LCD_RW_PIN,LOW);
     976:	60 e0       	ldi	r22, 0x00	; 0
     978:	81 e1       	ldi	r24, 0x11	; 17
     97a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>

	LCD_writeHighNibble(Data);
     97e:	89 81       	ldd	r24, Y+1	; 0x01
     980:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <LCD_writeHighNibble>

	LCD_writeLowNibble(Data);
     984:	89 81       	ldd	r24, Y+1	; 0x01
     986:	0e 94 ad 05 	call	0xb5a	; 0xb5a <LCD_writeLowNibble>

}
     98a:	00 00       	nop
     98c:	0f 90       	pop	r0
     98e:	df 91       	pop	r29
     990:	cf 91       	pop	r28
     992:	08 95       	ret

00000994 <LCD_voidWriteCmd>:
void LCD_voidWriteCmd(u8 Cmd){
     994:	cf 93       	push	r28
     996:	df 93       	push	r29
     998:	1f 92       	push	r1
     99a:	cd b7       	in	r28, 0x3d	; 61
     99c:	de b7       	in	r29, 0x3e	; 62
     99e:	89 83       	std	Y+1, r24	; 0x01


	DIO_voidSetPin(LCD_RS_PIN,LOW);
     9a0:	60 e0       	ldi	r22, 0x00	; 0
     9a2:	80 e1       	ldi	r24, 0x10	; 16
     9a4:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
	DIO_voidSetPin(LCD_RW_PIN,LOW);
     9a8:	60 e0       	ldi	r22, 0x00	; 0
     9aa:	81 e1       	ldi	r24, 0x11	; 17
     9ac:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>

	LCD_writeHighNibble(Cmd);
     9b0:	89 81       	ldd	r24, Y+1	; 0x01
     9b2:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <LCD_writeHighNibble>

	LCD_writeLowNibble(Cmd);
     9b6:	89 81       	ldd	r24, Y+1	; 0x01
     9b8:	0e 94 ad 05 	call	0xb5a	; 0xb5a <LCD_writeLowNibble>


}
     9bc:	00 00       	nop
     9be:	0f 90       	pop	r0
     9c0:	df 91       	pop	r29
     9c2:	cf 91       	pop	r28
     9c4:	08 95       	ret

000009c6 <LCD_voidClrScreen>:
void LCD_voidClrScreen(void){
     9c6:	cf 93       	push	r28
     9c8:	df 93       	push	r29
     9ca:	cd b7       	in	r28, 0x3d	; 61
     9cc:	de b7       	in	r29, 0x3e	; 62

	LCD_voidWriteCmd(CLR_DISPLAY);
     9ce:	81 e0       	ldi	r24, 0x01	; 1
     9d0:	0e 94 ca 04 	call	0x994	; 0x994 <LCD_voidWriteCmd>

}
     9d4:	00 00       	nop
     9d6:	df 91       	pop	r29
     9d8:	cf 91       	pop	r28
     9da:	08 95       	ret

000009dc <LCD_voidGoToXY>:

void LCD_voidGoToXY(u8 x,u8 y){
     9dc:	cf 93       	push	r28
     9de:	df 93       	push	r29
     9e0:	00 d0       	rcall	.+0      	; 0x9e2 <LCD_voidGoToXY+0x6>
     9e2:	cd b7       	in	r28, 0x3d	; 61
     9e4:	de b7       	in	r29, 0x3e	; 62
     9e6:	89 83       	std	Y+1, r24	; 0x01
     9e8:	6a 83       	std	Y+2, r22	; 0x02



}
     9ea:	00 00       	nop
     9ec:	0f 90       	pop	r0
     9ee:	0f 90       	pop	r0
     9f0:	df 91       	pop	r29
     9f2:	cf 91       	pop	r28
     9f4:	08 95       	ret

000009f6 <LCD_writeHighNibble>:
static void LCD_writeHighNibble(u8 Data){
     9f6:	cf 93       	push	r28
     9f8:	df 93       	push	r29
     9fa:	cd b7       	in	r28, 0x3d	; 61
     9fc:	de b7       	in	r29, 0x3e	; 62
     9fe:	2f 97       	sbiw	r28, 0x0f	; 15
     a00:	0f b6       	in	r0, 0x3f	; 63
     a02:	f8 94       	cli
     a04:	de bf       	out	0x3e, r29	; 62
     a06:	0f be       	out	0x3f, r0	; 63
     a08:	cd bf       	out	0x3d, r28	; 61
     a0a:	8f 87       	std	Y+15, r24	; 0x0f

	DIO_voidSetPin(LCD_D7_PIN,GETBIT(Data,7));
     a0c:	8f 85       	ldd	r24, Y+15	; 0x0f
     a0e:	88 1f       	adc	r24, r24
     a10:	88 27       	eor	r24, r24
     a12:	88 1f       	adc	r24, r24
     a14:	68 2f       	mov	r22, r24
     a16:	86 e1       	ldi	r24, 0x16	; 22
     a18:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
	DIO_voidSetPin(LCD_D6_PIN,GETBIT(Data,6));
     a1c:	8f 85       	ldd	r24, Y+15	; 0x0f
     a1e:	82 95       	swap	r24
     a20:	86 95       	lsr	r24
     a22:	86 95       	lsr	r24
     a24:	83 70       	andi	r24, 0x03	; 3
     a26:	81 70       	andi	r24, 0x01	; 1
     a28:	68 2f       	mov	r22, r24
     a2a:	85 e1       	ldi	r24, 0x15	; 21
     a2c:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
	DIO_voidSetPin(LCD_D5_PIN,GETBIT(Data,5));
     a30:	8f 85       	ldd	r24, Y+15	; 0x0f
     a32:	82 95       	swap	r24
     a34:	86 95       	lsr	r24
     a36:	87 70       	andi	r24, 0x07	; 7
     a38:	81 70       	andi	r24, 0x01	; 1
     a3a:	68 2f       	mov	r22, r24
     a3c:	84 e1       	ldi	r24, 0x14	; 20
     a3e:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
	DIO_voidSetPin(LCD_D4_PIN,GETBIT(Data,4));
     a42:	8f 85       	ldd	r24, Y+15	; 0x0f
     a44:	82 95       	swap	r24
     a46:	8f 70       	andi	r24, 0x0F	; 15
     a48:	81 70       	andi	r24, 0x01	; 1
     a4a:	68 2f       	mov	r22, r24
     a4c:	83 e1       	ldi	r24, 0x13	; 19
     a4e:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
	DIO_voidSetPin(LCD_E_PIN,HIGH);
     a52:	61 e0       	ldi	r22, 0x01	; 1
     a54:	82 e1       	ldi	r24, 0x12	; 18
     a56:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
     a5a:	80 e0       	ldi	r24, 0x00	; 0
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	a0 ea       	ldi	r26, 0xA0	; 160
     a60:	b0 e4       	ldi	r27, 0x40	; 64
     a62:	89 83       	std	Y+1, r24	; 0x01
     a64:	9a 83       	std	Y+2, r25	; 0x02
     a66:	ab 83       	std	Y+3, r26	; 0x03
     a68:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     a6a:	20 e0       	ldi	r18, 0x00	; 0
     a6c:	30 e0       	ldi	r19, 0x00	; 0
     a6e:	4a ef       	ldi	r20, 0xFA	; 250
     a70:	54 e4       	ldi	r21, 0x44	; 68
     a72:	69 81       	ldd	r22, Y+1	; 0x01
     a74:	7a 81       	ldd	r23, Y+2	; 0x02
     a76:	8b 81       	ldd	r24, Y+3	; 0x03
     a78:	9c 81       	ldd	r25, Y+4	; 0x04
     a7a:	0e 94 c8 10 	call	0x2190	; 0x2190 <__mulsf3>
     a7e:	dc 01       	movw	r26, r24
     a80:	cb 01       	movw	r24, r22
     a82:	8d 83       	std	Y+5, r24	; 0x05
     a84:	9e 83       	std	Y+6, r25	; 0x06
     a86:	af 83       	std	Y+7, r26	; 0x07
     a88:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     a8a:	20 e0       	ldi	r18, 0x00	; 0
     a8c:	30 e0       	ldi	r19, 0x00	; 0
     a8e:	40 e8       	ldi	r20, 0x80	; 128
     a90:	5f e3       	ldi	r21, 0x3F	; 63
     a92:	6d 81       	ldd	r22, Y+5	; 0x05
     a94:	7e 81       	ldd	r23, Y+6	; 0x06
     a96:	8f 81       	ldd	r24, Y+7	; 0x07
     a98:	98 85       	ldd	r25, Y+8	; 0x08
     a9a:	0e 94 42 10 	call	0x2084	; 0x2084 <__cmpsf2>
     a9e:	88 23       	and	r24, r24
     aa0:	2c f4       	brge	.+10     	; 0xaac <LCD_writeHighNibble+0xb6>
		__ticks = 1;
     aa2:	81 e0       	ldi	r24, 0x01	; 1
     aa4:	90 e0       	ldi	r25, 0x00	; 0
     aa6:	9a 87       	std	Y+10, r25	; 0x0a
     aa8:	89 87       	std	Y+9, r24	; 0x09
     aaa:	3f c0       	rjmp	.+126    	; 0xb2a <LCD_writeHighNibble+0x134>
	else if (__tmp > 65535)
     aac:	20 e0       	ldi	r18, 0x00	; 0
     aae:	3f ef       	ldi	r19, 0xFF	; 255
     ab0:	4f e7       	ldi	r20, 0x7F	; 127
     ab2:	57 e4       	ldi	r21, 0x47	; 71
     ab4:	6d 81       	ldd	r22, Y+5	; 0x05
     ab6:	7e 81       	ldd	r23, Y+6	; 0x06
     ab8:	8f 81       	ldd	r24, Y+7	; 0x07
     aba:	98 85       	ldd	r25, Y+8	; 0x08
     abc:	0e 94 c3 10 	call	0x2186	; 0x2186 <__gesf2>
     ac0:	18 16       	cp	r1, r24
     ac2:	4c f5       	brge	.+82     	; 0xb16 <LCD_writeHighNibble+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ac4:	20 e0       	ldi	r18, 0x00	; 0
     ac6:	30 e0       	ldi	r19, 0x00	; 0
     ac8:	40 e2       	ldi	r20, 0x20	; 32
     aca:	51 e4       	ldi	r21, 0x41	; 65
     acc:	69 81       	ldd	r22, Y+1	; 0x01
     ace:	7a 81       	ldd	r23, Y+2	; 0x02
     ad0:	8b 81       	ldd	r24, Y+3	; 0x03
     ad2:	9c 81       	ldd	r25, Y+4	; 0x04
     ad4:	0e 94 c8 10 	call	0x2190	; 0x2190 <__mulsf3>
     ad8:	dc 01       	movw	r26, r24
     ada:	cb 01       	movw	r24, r22
     adc:	bc 01       	movw	r22, r24
     ade:	cd 01       	movw	r24, r26
     ae0:	0e 94 47 10 	call	0x208e	; 0x208e <__fixunssfsi>
     ae4:	dc 01       	movw	r26, r24
     ae6:	cb 01       	movw	r24, r22
     ae8:	9a 87       	std	Y+10, r25	; 0x0a
     aea:	89 87       	std	Y+9, r24	; 0x09
     aec:	0f c0       	rjmp	.+30     	; 0xb0c <LCD_writeHighNibble+0x116>
     aee:	88 ec       	ldi	r24, 0xC8	; 200
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	9c 87       	std	Y+12, r25	; 0x0c
     af4:	8b 87       	std	Y+11, r24	; 0x0b
     af6:	8b 85       	ldd	r24, Y+11	; 0x0b
     af8:	9c 85       	ldd	r25, Y+12	; 0x0c
     afa:	01 97       	sbiw	r24, 0x01	; 1
     afc:	f1 f7       	brne	.-4      	; 0xafa <LCD_writeHighNibble+0x104>
     afe:	9c 87       	std	Y+12, r25	; 0x0c
     b00:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b02:	89 85       	ldd	r24, Y+9	; 0x09
     b04:	9a 85       	ldd	r25, Y+10	; 0x0a
     b06:	01 97       	sbiw	r24, 0x01	; 1
     b08:	9a 87       	std	Y+10, r25	; 0x0a
     b0a:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b0c:	89 85       	ldd	r24, Y+9	; 0x09
     b0e:	9a 85       	ldd	r25, Y+10	; 0x0a
     b10:	89 2b       	or	r24, r25
     b12:	69 f7       	brne	.-38     	; 0xaee <LCD_writeHighNibble+0xf8>
     b14:	14 c0       	rjmp	.+40     	; 0xb3e <LCD_writeHighNibble+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b16:	6d 81       	ldd	r22, Y+5	; 0x05
     b18:	7e 81       	ldd	r23, Y+6	; 0x06
     b1a:	8f 81       	ldd	r24, Y+7	; 0x07
     b1c:	98 85       	ldd	r25, Y+8	; 0x08
     b1e:	0e 94 47 10 	call	0x208e	; 0x208e <__fixunssfsi>
     b22:	dc 01       	movw	r26, r24
     b24:	cb 01       	movw	r24, r22
     b26:	9a 87       	std	Y+10, r25	; 0x0a
     b28:	89 87       	std	Y+9, r24	; 0x09
     b2a:	89 85       	ldd	r24, Y+9	; 0x09
     b2c:	9a 85       	ldd	r25, Y+10	; 0x0a
     b2e:	9e 87       	std	Y+14, r25	; 0x0e
     b30:	8d 87       	std	Y+13, r24	; 0x0d
     b32:	8d 85       	ldd	r24, Y+13	; 0x0d
     b34:	9e 85       	ldd	r25, Y+14	; 0x0e
     b36:	01 97       	sbiw	r24, 0x01	; 1
     b38:	f1 f7       	brne	.-4      	; 0xb36 <LCD_writeHighNibble+0x140>
     b3a:	9e 87       	std	Y+14, r25	; 0x0e
     b3c:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(5);
	DIO_voidSetPin(LCD_E_PIN,LOW);
     b3e:	60 e0       	ldi	r22, 0x00	; 0
     b40:	82 e1       	ldi	r24, 0x12	; 18
     b42:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>


}
     b46:	00 00       	nop
     b48:	2f 96       	adiw	r28, 0x0f	; 15
     b4a:	0f b6       	in	r0, 0x3f	; 63
     b4c:	f8 94       	cli
     b4e:	de bf       	out	0x3e, r29	; 62
     b50:	0f be       	out	0x3f, r0	; 63
     b52:	cd bf       	out	0x3d, r28	; 61
     b54:	df 91       	pop	r29
     b56:	cf 91       	pop	r28
     b58:	08 95       	ret

00000b5a <LCD_writeLowNibble>:

static void LCD_writeLowNibble(u8 Data){
     b5a:	cf 93       	push	r28
     b5c:	df 93       	push	r29
     b5e:	cd b7       	in	r28, 0x3d	; 61
     b60:	de b7       	in	r29, 0x3e	; 62
     b62:	2f 97       	sbiw	r28, 0x0f	; 15
     b64:	0f b6       	in	r0, 0x3f	; 63
     b66:	f8 94       	cli
     b68:	de bf       	out	0x3e, r29	; 62
     b6a:	0f be       	out	0x3f, r0	; 63
     b6c:	cd bf       	out	0x3d, r28	; 61
     b6e:	8f 87       	std	Y+15, r24	; 0x0f

	DIO_voidSetPin(LCD_D7_PIN,GETBIT(Data,3));
     b70:	8f 85       	ldd	r24, Y+15	; 0x0f
     b72:	86 95       	lsr	r24
     b74:	86 95       	lsr	r24
     b76:	86 95       	lsr	r24
     b78:	81 70       	andi	r24, 0x01	; 1
     b7a:	68 2f       	mov	r22, r24
     b7c:	86 e1       	ldi	r24, 0x16	; 22
     b7e:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
	DIO_voidSetPin(LCD_D6_PIN,GETBIT(Data,2));
     b82:	8f 85       	ldd	r24, Y+15	; 0x0f
     b84:	86 95       	lsr	r24
     b86:	86 95       	lsr	r24
     b88:	81 70       	andi	r24, 0x01	; 1
     b8a:	68 2f       	mov	r22, r24
     b8c:	85 e1       	ldi	r24, 0x15	; 21
     b8e:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
	DIO_voidSetPin(LCD_D5_PIN,GETBIT(Data,1));
     b92:	8f 85       	ldd	r24, Y+15	; 0x0f
     b94:	86 95       	lsr	r24
     b96:	81 70       	andi	r24, 0x01	; 1
     b98:	68 2f       	mov	r22, r24
     b9a:	84 e1       	ldi	r24, 0x14	; 20
     b9c:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
	DIO_voidSetPin(LCD_D4_PIN,GETBIT(Data,0));
     ba0:	8f 85       	ldd	r24, Y+15	; 0x0f
     ba2:	81 70       	andi	r24, 0x01	; 1
     ba4:	68 2f       	mov	r22, r24
     ba6:	83 e1       	ldi	r24, 0x13	; 19
     ba8:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
	DIO_voidSetPin(LCD_E_PIN,HIGH);
     bac:	61 e0       	ldi	r22, 0x01	; 1
     bae:	82 e1       	ldi	r24, 0x12	; 18
     bb0:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
     bb4:	80 e0       	ldi	r24, 0x00	; 0
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	a0 ea       	ldi	r26, 0xA0	; 160
     bba:	b0 e4       	ldi	r27, 0x40	; 64
     bbc:	89 83       	std	Y+1, r24	; 0x01
     bbe:	9a 83       	std	Y+2, r25	; 0x02
     bc0:	ab 83       	std	Y+3, r26	; 0x03
     bc2:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     bc4:	20 e0       	ldi	r18, 0x00	; 0
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	4a ef       	ldi	r20, 0xFA	; 250
     bca:	54 e4       	ldi	r21, 0x44	; 68
     bcc:	69 81       	ldd	r22, Y+1	; 0x01
     bce:	7a 81       	ldd	r23, Y+2	; 0x02
     bd0:	8b 81       	ldd	r24, Y+3	; 0x03
     bd2:	9c 81       	ldd	r25, Y+4	; 0x04
     bd4:	0e 94 c8 10 	call	0x2190	; 0x2190 <__mulsf3>
     bd8:	dc 01       	movw	r26, r24
     bda:	cb 01       	movw	r24, r22
     bdc:	8d 83       	std	Y+5, r24	; 0x05
     bde:	9e 83       	std	Y+6, r25	; 0x06
     be0:	af 83       	std	Y+7, r26	; 0x07
     be2:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     be4:	20 e0       	ldi	r18, 0x00	; 0
     be6:	30 e0       	ldi	r19, 0x00	; 0
     be8:	40 e8       	ldi	r20, 0x80	; 128
     bea:	5f e3       	ldi	r21, 0x3F	; 63
     bec:	6d 81       	ldd	r22, Y+5	; 0x05
     bee:	7e 81       	ldd	r23, Y+6	; 0x06
     bf0:	8f 81       	ldd	r24, Y+7	; 0x07
     bf2:	98 85       	ldd	r25, Y+8	; 0x08
     bf4:	0e 94 42 10 	call	0x2084	; 0x2084 <__cmpsf2>
     bf8:	88 23       	and	r24, r24
     bfa:	2c f4       	brge	.+10     	; 0xc06 <LCD_writeLowNibble+0xac>
		__ticks = 1;
     bfc:	81 e0       	ldi	r24, 0x01	; 1
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	9a 87       	std	Y+10, r25	; 0x0a
     c02:	89 87       	std	Y+9, r24	; 0x09
     c04:	3f c0       	rjmp	.+126    	; 0xc84 <LCD_writeLowNibble+0x12a>
	else if (__tmp > 65535)
     c06:	20 e0       	ldi	r18, 0x00	; 0
     c08:	3f ef       	ldi	r19, 0xFF	; 255
     c0a:	4f e7       	ldi	r20, 0x7F	; 127
     c0c:	57 e4       	ldi	r21, 0x47	; 71
     c0e:	6d 81       	ldd	r22, Y+5	; 0x05
     c10:	7e 81       	ldd	r23, Y+6	; 0x06
     c12:	8f 81       	ldd	r24, Y+7	; 0x07
     c14:	98 85       	ldd	r25, Y+8	; 0x08
     c16:	0e 94 c3 10 	call	0x2186	; 0x2186 <__gesf2>
     c1a:	18 16       	cp	r1, r24
     c1c:	4c f5       	brge	.+82     	; 0xc70 <LCD_writeLowNibble+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c1e:	20 e0       	ldi	r18, 0x00	; 0
     c20:	30 e0       	ldi	r19, 0x00	; 0
     c22:	40 e2       	ldi	r20, 0x20	; 32
     c24:	51 e4       	ldi	r21, 0x41	; 65
     c26:	69 81       	ldd	r22, Y+1	; 0x01
     c28:	7a 81       	ldd	r23, Y+2	; 0x02
     c2a:	8b 81       	ldd	r24, Y+3	; 0x03
     c2c:	9c 81       	ldd	r25, Y+4	; 0x04
     c2e:	0e 94 c8 10 	call	0x2190	; 0x2190 <__mulsf3>
     c32:	dc 01       	movw	r26, r24
     c34:	cb 01       	movw	r24, r22
     c36:	bc 01       	movw	r22, r24
     c38:	cd 01       	movw	r24, r26
     c3a:	0e 94 47 10 	call	0x208e	; 0x208e <__fixunssfsi>
     c3e:	dc 01       	movw	r26, r24
     c40:	cb 01       	movw	r24, r22
     c42:	9a 87       	std	Y+10, r25	; 0x0a
     c44:	89 87       	std	Y+9, r24	; 0x09
     c46:	0f c0       	rjmp	.+30     	; 0xc66 <LCD_writeLowNibble+0x10c>
     c48:	88 ec       	ldi	r24, 0xC8	; 200
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	9c 87       	std	Y+12, r25	; 0x0c
     c4e:	8b 87       	std	Y+11, r24	; 0x0b
     c50:	8b 85       	ldd	r24, Y+11	; 0x0b
     c52:	9c 85       	ldd	r25, Y+12	; 0x0c
     c54:	01 97       	sbiw	r24, 0x01	; 1
     c56:	f1 f7       	brne	.-4      	; 0xc54 <LCD_writeLowNibble+0xfa>
     c58:	9c 87       	std	Y+12, r25	; 0x0c
     c5a:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c5c:	89 85       	ldd	r24, Y+9	; 0x09
     c5e:	9a 85       	ldd	r25, Y+10	; 0x0a
     c60:	01 97       	sbiw	r24, 0x01	; 1
     c62:	9a 87       	std	Y+10, r25	; 0x0a
     c64:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c66:	89 85       	ldd	r24, Y+9	; 0x09
     c68:	9a 85       	ldd	r25, Y+10	; 0x0a
     c6a:	89 2b       	or	r24, r25
     c6c:	69 f7       	brne	.-38     	; 0xc48 <LCD_writeLowNibble+0xee>
     c6e:	14 c0       	rjmp	.+40     	; 0xc98 <LCD_writeLowNibble+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c70:	6d 81       	ldd	r22, Y+5	; 0x05
     c72:	7e 81       	ldd	r23, Y+6	; 0x06
     c74:	8f 81       	ldd	r24, Y+7	; 0x07
     c76:	98 85       	ldd	r25, Y+8	; 0x08
     c78:	0e 94 47 10 	call	0x208e	; 0x208e <__fixunssfsi>
     c7c:	dc 01       	movw	r26, r24
     c7e:	cb 01       	movw	r24, r22
     c80:	9a 87       	std	Y+10, r25	; 0x0a
     c82:	89 87       	std	Y+9, r24	; 0x09
     c84:	89 85       	ldd	r24, Y+9	; 0x09
     c86:	9a 85       	ldd	r25, Y+10	; 0x0a
     c88:	9e 87       	std	Y+14, r25	; 0x0e
     c8a:	8d 87       	std	Y+13, r24	; 0x0d
     c8c:	8d 85       	ldd	r24, Y+13	; 0x0d
     c8e:	9e 85       	ldd	r25, Y+14	; 0x0e
     c90:	01 97       	sbiw	r24, 0x01	; 1
     c92:	f1 f7       	brne	.-4      	; 0xc90 <LCD_writeLowNibble+0x136>
     c94:	9e 87       	std	Y+14, r25	; 0x0e
     c96:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(5);
	DIO_voidSetPin(LCD_E_PIN,LOW);
     c98:	60 e0       	ldi	r22, 0x00	; 0
     c9a:	82 e1       	ldi	r24, 0x12	; 18
     c9c:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>


}
     ca0:	00 00       	nop
     ca2:	2f 96       	adiw	r28, 0x0f	; 15
     ca4:	0f b6       	in	r0, 0x3f	; 63
     ca6:	f8 94       	cli
     ca8:	de bf       	out	0x3e, r29	; 62
     caa:	0f be       	out	0x3f, r0	; 63
     cac:	cd bf       	out	0x3d, r28	; 61
     cae:	df 91       	pop	r29
     cb0:	cf 91       	pop	r28
     cb2:	08 95       	ret

00000cb4 <LED_voidInitialize>:
#include "DIO_int.h"
#include "LED_priv.h"
#include "LED_config.h"
#include "LED_int.h"

void LED_voidInitialize(void){}
     cb4:	cf 93       	push	r28
     cb6:	df 93       	push	r29
     cb8:	cd b7       	in	r28, 0x3d	; 61
     cba:	de b7       	in	r29, 0x3e	; 62
     cbc:	00 00       	nop
     cbe:	df 91       	pop	r29
     cc0:	cf 91       	pop	r28
     cc2:	08 95       	ret

00000cc4 <LED_voidON>:

void LED_voidON(u8 LedNum){
     cc4:	cf 93       	push	r28
     cc6:	df 93       	push	r29
     cc8:	1f 92       	push	r1
     cca:	cd b7       	in	r28, 0x3d	; 61
     ccc:	de b7       	in	r29, 0x3e	; 62
     cce:	89 83       	std	Y+1, r24	; 0x01

	switch(LedNum){
     cd0:	89 81       	ldd	r24, Y+1	; 0x01
     cd2:	88 2f       	mov	r24, r24
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	09 2e       	mov	r0, r25
     cd8:	00 0c       	add	r0, r0
     cda:	aa 0b       	sbc	r26, r26
     cdc:	bb 0b       	sbc	r27, r27
     cde:	40 e0       	ldi	r20, 0x00	; 0
     ce0:	50 e0       	ldi	r21, 0x00	; 0
     ce2:	2f e1       	ldi	r18, 0x1F	; 31
     ce4:	30 e0       	ldi	r19, 0x00	; 0
     ce6:	84 1b       	sub	r24, r20
     ce8:	95 0b       	sbc	r25, r21
     cea:	28 17       	cp	r18, r24
     cec:	39 07       	cpc	r19, r25
     cee:	08 f4       	brcc	.+2      	; 0xcf2 <LED_voidON+0x2e>
     cf0:	a5 c0       	rjmp	.+330    	; 0xe3c <LED_voidON+0x178>
     cf2:	86 5d       	subi	r24, 0xD6	; 214
     cf4:	9f 4f       	sbci	r25, 0xFF	; 255
     cf6:	fc 01       	movw	r30, r24
     cf8:	0c 94 3c 10 	jmp	0x2078	; 0x2078 <__tablejump2__>
	case (LED_0):
	    if(LED_0_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_0,HIGH);
     cfc:	61 e0       	ldi	r22, 0x01	; 1
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
	    }else if(LED_0_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_0,LOW);
	    }
	break;
     d04:	9b c0       	rjmp	.+310    	; 0xe3c <LED_voidON+0x178>
	case (LED_1):
	    if(LED_1_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_1,HIGH);
     d06:	61 e0       	ldi	r22, 0x01	; 1
     d08:	81 e0       	ldi	r24, 0x01	; 1
     d0a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
	    }else if(LED_1_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_1,LOW);
	    }
	break;
     d0e:	96 c0       	rjmp	.+300    	; 0xe3c <LED_voidON+0x178>
	case (LED_2):
	    if(LED_2_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_2,HIGH);
     d10:	61 e0       	ldi	r22, 0x01	; 1
     d12:	82 e0       	ldi	r24, 0x02	; 2
     d14:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
	    }else if(LED_2_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_2,LOW);
	    }
	break;
     d18:	91 c0       	rjmp	.+290    	; 0xe3c <LED_voidON+0x178>
	case (LED_3):
	    if(LED_3_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_3,HIGH);
     d1a:	61 e0       	ldi	r22, 0x01	; 1
     d1c:	83 e0       	ldi	r24, 0x03	; 3
     d1e:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
	    }else if(LED_3_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_3,LOW);
	    }
	break;
     d22:	8c c0       	rjmp	.+280    	; 0xe3c <LED_voidON+0x178>
	case (LED_4):
	    if(LED_4_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_4,HIGH);
     d24:	61 e0       	ldi	r22, 0x01	; 1
     d26:	84 e0       	ldi	r24, 0x04	; 4
     d28:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
	    }else if(LED_4_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_4,LOW);
	    }
	break;
     d2c:	87 c0       	rjmp	.+270    	; 0xe3c <LED_voidON+0x178>
	case (LED_5):
	    if(LED_5_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_5,HIGH);
     d2e:	61 e0       	ldi	r22, 0x01	; 1
     d30:	85 e0       	ldi	r24, 0x05	; 5
     d32:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
	    }else if(LED_5_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_5,LOW);
	    }
	break;
     d36:	82 c0       	rjmp	.+260    	; 0xe3c <LED_voidON+0x178>
	case (LED_6):
	    if(LED_6_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_6,HIGH);
     d38:	61 e0       	ldi	r22, 0x01	; 1
     d3a:	86 e0       	ldi	r24, 0x06	; 6
     d3c:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
	    }else if(LED_6_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_6,LOW);
	    }
	break;
     d40:	7d c0       	rjmp	.+250    	; 0xe3c <LED_voidON+0x178>
	case (LED_7):
	    if(LED_7_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_7,HIGH);
     d42:	61 e0       	ldi	r22, 0x01	; 1
     d44:	87 e0       	ldi	r24, 0x07	; 7
     d46:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
	    }else if(LED_7_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_7,LOW);
	    }
	break;
     d4a:	78 c0       	rjmp	.+240    	; 0xe3c <LED_voidON+0x178>
	case (LED_8):
	    if(LED_8_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_8,HIGH);
     d4c:	61 e0       	ldi	r22, 0x01	; 1
     d4e:	88 e0       	ldi	r24, 0x08	; 8
     d50:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
	    }else if(LED_8_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_8,LOW);
	    }
	break;
     d54:	73 c0       	rjmp	.+230    	; 0xe3c <LED_voidON+0x178>
	case (LED_9):
	    if(LED_9_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_9,HIGH);
     d56:	61 e0       	ldi	r22, 0x01	; 1
     d58:	89 e0       	ldi	r24, 0x09	; 9
     d5a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
	    }else if(LED_9_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_9,LOW);
	    }
	break;
     d5e:	6e c0       	rjmp	.+220    	; 0xe3c <LED_voidON+0x178>
	case (LED_10):
	    if(LED_10_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_10,HIGH);
     d60:	61 e0       	ldi	r22, 0x01	; 1
     d62:	8a e0       	ldi	r24, 0x0A	; 10
     d64:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
	    }else if(LED_10_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_10,LOW);
	    }
	break;
     d68:	69 c0       	rjmp	.+210    	; 0xe3c <LED_voidON+0x178>
	case (LED_11):
	    if(LED_11_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_11,HIGH);
     d6a:	61 e0       	ldi	r22, 0x01	; 1
     d6c:	8b e0       	ldi	r24, 0x0B	; 11
     d6e:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
	    }else if(LED_11_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_11,LOW);
	    }
	break;
     d72:	64 c0       	rjmp	.+200    	; 0xe3c <LED_voidON+0x178>
	case (LED_12):
	    if(LED_12_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_12,HIGH);
     d74:	61 e0       	ldi	r22, 0x01	; 1
     d76:	8c e0       	ldi	r24, 0x0C	; 12
     d78:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
	    }else if(LED_12_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_12,LOW);
	    }
	break;
     d7c:	5f c0       	rjmp	.+190    	; 0xe3c <LED_voidON+0x178>
	case (LED_13):
	    if(LED_13_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_13,HIGH);
     d7e:	61 e0       	ldi	r22, 0x01	; 1
     d80:	8d e0       	ldi	r24, 0x0D	; 13
     d82:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
	    }else if(LED_13_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_13,LOW);
	    }
	break;
     d86:	5a c0       	rjmp	.+180    	; 0xe3c <LED_voidON+0x178>
	case (LED_14):
	    if(LED_14_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_14,HIGH);
     d88:	61 e0       	ldi	r22, 0x01	; 1
     d8a:	8e e0       	ldi	r24, 0x0E	; 14
     d8c:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
	    }else if(LED_14_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_14,LOW);
	    }
	break;
     d90:	55 c0       	rjmp	.+170    	; 0xe3c <LED_voidON+0x178>
	case (LED_15):
	    if(LED_15_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_15,HIGH);
     d92:	61 e0       	ldi	r22, 0x01	; 1
     d94:	8f e0       	ldi	r24, 0x0F	; 15
     d96:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
	    }else if(LED_15_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_15,LOW);
	    }
	break;
     d9a:	50 c0       	rjmp	.+160    	; 0xe3c <LED_voidON+0x178>
	case (LED_16):
	    if(LED_16_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_16,HIGH);
     d9c:	61 e0       	ldi	r22, 0x01	; 1
     d9e:	80 e1       	ldi	r24, 0x10	; 16
     da0:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
	    }else if(LED_16_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_16,LOW);
	    }
	break;
     da4:	4b c0       	rjmp	.+150    	; 0xe3c <LED_voidON+0x178>
	case (LED_17):
	    if(LED_17_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_17,HIGH);
     da6:	61 e0       	ldi	r22, 0x01	; 1
     da8:	81 e1       	ldi	r24, 0x11	; 17
     daa:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
	    }else if(LED_17_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_17,LOW);
	    }
	break;
     dae:	46 c0       	rjmp	.+140    	; 0xe3c <LED_voidON+0x178>
	case (LED_18):
	    if(LED_18_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_18,HIGH);
     db0:	61 e0       	ldi	r22, 0x01	; 1
     db2:	82 e1       	ldi	r24, 0x12	; 18
     db4:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
	    }else if(LED_18_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_18,LOW);
	    }
	break;
     db8:	41 c0       	rjmp	.+130    	; 0xe3c <LED_voidON+0x178>
	case (LED_19):
	    if(LED_19_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_19,HIGH);
     dba:	61 e0       	ldi	r22, 0x01	; 1
     dbc:	83 e1       	ldi	r24, 0x13	; 19
     dbe:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
	    }else if(LED_19_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_19,LOW);
	    }
	break;
     dc2:	3c c0       	rjmp	.+120    	; 0xe3c <LED_voidON+0x178>
	case (LED_20):
	    if(LED_20_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_20,HIGH);
     dc4:	61 e0       	ldi	r22, 0x01	; 1
     dc6:	84 e1       	ldi	r24, 0x14	; 20
     dc8:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
	    }else if(LED_20_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_20,LOW);
	    }
	break;
     dcc:	37 c0       	rjmp	.+110    	; 0xe3c <LED_voidON+0x178>
	case (LED_21):
	    if(LED_21_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_21,HIGH);
     dce:	61 e0       	ldi	r22, 0x01	; 1
     dd0:	85 e1       	ldi	r24, 0x15	; 21
     dd2:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
	    }else if(LED_21_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_21,LOW);
	    }
	break;
     dd6:	32 c0       	rjmp	.+100    	; 0xe3c <LED_voidON+0x178>
	case (LED_22):
	    if(LED_22_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_22,HIGH);
     dd8:	61 e0       	ldi	r22, 0x01	; 1
     dda:	86 e1       	ldi	r24, 0x16	; 22
     ddc:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
	    }else if(LED_22_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_22,LOW);
	    }
	break;
     de0:	2d c0       	rjmp	.+90     	; 0xe3c <LED_voidON+0x178>
	case (LED_23):
	    if(LED_23_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_23,HIGH);
     de2:	61 e0       	ldi	r22, 0x01	; 1
     de4:	87 e1       	ldi	r24, 0x17	; 23
     de6:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
	    }else if(LED_23_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_23,LOW);
	    }
	break;
     dea:	28 c0       	rjmp	.+80     	; 0xe3c <LED_voidON+0x178>
	case (LED_24):
	    if(LED_24_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_24,HIGH);
     dec:	61 e0       	ldi	r22, 0x01	; 1
     dee:	88 e1       	ldi	r24, 0x18	; 24
     df0:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
	    }else if(LED_24_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_24,LOW);
	    }
	break;
     df4:	23 c0       	rjmp	.+70     	; 0xe3c <LED_voidON+0x178>
	case (LED_25):
	    if(LED_25_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_25,HIGH);
     df6:	61 e0       	ldi	r22, 0x01	; 1
     df8:	89 e1       	ldi	r24, 0x19	; 25
     dfa:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
	    }else if(LED_25_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_25,LOW);
	    }
	break;
     dfe:	1e c0       	rjmp	.+60     	; 0xe3c <LED_voidON+0x178>
	case (LED_26):
	    if(LED_26_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_26,HIGH);
     e00:	61 e0       	ldi	r22, 0x01	; 1
     e02:	8a e1       	ldi	r24, 0x1A	; 26
     e04:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
	    }else if(LED_26_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_26,LOW);
	    }
	break;
     e08:	19 c0       	rjmp	.+50     	; 0xe3c <LED_voidON+0x178>
	case (LED_27):
	    if(LED_27_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_27,HIGH);
     e0a:	61 e0       	ldi	r22, 0x01	; 1
     e0c:	8b e1       	ldi	r24, 0x1B	; 27
     e0e:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
	    }else if(LED_27_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_27,LOW);
	    }
	break;
     e12:	14 c0       	rjmp	.+40     	; 0xe3c <LED_voidON+0x178>
	case (LED_28):
	    if(LED_28_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_28,HIGH);
     e14:	61 e0       	ldi	r22, 0x01	; 1
     e16:	8c e1       	ldi	r24, 0x1C	; 28
     e18:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
	    }else if(LED_28_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_28,LOW);
	    }
	break;
     e1c:	0f c0       	rjmp	.+30     	; 0xe3c <LED_voidON+0x178>
	case (LED_29):
	    if(LED_29_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_29,HIGH);
     e1e:	61 e0       	ldi	r22, 0x01	; 1
     e20:	8d e1       	ldi	r24, 0x1D	; 29
     e22:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
	    }else if(LED_29_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_29,LOW);
	    }
	break;
     e26:	0a c0       	rjmp	.+20     	; 0xe3c <LED_voidON+0x178>
	case (LED_30):
	    if(LED_30_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_30,HIGH);
     e28:	61 e0       	ldi	r22, 0x01	; 1
     e2a:	8e e1       	ldi	r24, 0x1E	; 30
     e2c:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
	    }else if(LED_30_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_30,LOW);
	    }
	break;
     e30:	05 c0       	rjmp	.+10     	; 0xe3c <LED_voidON+0x178>
	case (LED_31):
	    if(LED_31_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_31,HIGH);
     e32:	61 e0       	ldi	r22, 0x01	; 1
     e34:	8f e1       	ldi	r24, 0x1F	; 31
     e36:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
	    }else if(LED_31_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_31,LOW);
	    }
	break;
     e3a:	00 00       	nop


	}

}
     e3c:	00 00       	nop
     e3e:	0f 90       	pop	r0
     e40:	df 91       	pop	r29
     e42:	cf 91       	pop	r28
     e44:	08 95       	ret

00000e46 <LED_voidOff>:

void LED_voidOff(u8 LedNum){
     e46:	cf 93       	push	r28
     e48:	df 93       	push	r29
     e4a:	1f 92       	push	r1
     e4c:	cd b7       	in	r28, 0x3d	; 61
     e4e:	de b7       	in	r29, 0x3e	; 62
     e50:	89 83       	std	Y+1, r24	; 0x01

	switch(LedNum){
     e52:	89 81       	ldd	r24, Y+1	; 0x01
     e54:	88 2f       	mov	r24, r24
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	09 2e       	mov	r0, r25
     e5a:	00 0c       	add	r0, r0
     e5c:	aa 0b       	sbc	r26, r26
     e5e:	bb 0b       	sbc	r27, r27
     e60:	40 e0       	ldi	r20, 0x00	; 0
     e62:	50 e0       	ldi	r21, 0x00	; 0
     e64:	2f e1       	ldi	r18, 0x1F	; 31
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	84 1b       	sub	r24, r20
     e6a:	95 0b       	sbc	r25, r21
     e6c:	28 17       	cp	r18, r24
     e6e:	39 07       	cpc	r19, r25
     e70:	08 f4       	brcc	.+2      	; 0xe74 <LED_voidOff+0x2e>
     e72:	a5 c0       	rjmp	.+330    	; 0xfbe <LED_voidOff+0x178>
     e74:	86 5b       	subi	r24, 0xB6	; 182
     e76:	9f 4f       	sbci	r25, 0xFF	; 255
     e78:	fc 01       	movw	r30, r24
     e7a:	0c 94 3c 10 	jmp	0x2078	; 0x2078 <__tablejump2__>

    case (LED_0):
        if(LED_0_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_0,LOW);
     e7e:	60 e0       	ldi	r22, 0x00	; 0
     e80:	80 e0       	ldi	r24, 0x00	; 0
     e82:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
        }else if(LED_0_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_0,HIGH);
        }
    break;
     e86:	9b c0       	rjmp	.+310    	; 0xfbe <LED_voidOff+0x178>
    case (LED_1):
        if(LED_1_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_1,LOW);
     e88:	60 e0       	ldi	r22, 0x00	; 0
     e8a:	81 e0       	ldi	r24, 0x01	; 1
     e8c:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
        }else if(LED_1_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_1,HIGH);
        }
    break;
     e90:	96 c0       	rjmp	.+300    	; 0xfbe <LED_voidOff+0x178>
    case (LED_2):
        if(LED_2_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_2,LOW);
     e92:	60 e0       	ldi	r22, 0x00	; 0
     e94:	82 e0       	ldi	r24, 0x02	; 2
     e96:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
        }else if(LED_2_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_2,HIGH);
        }
    break;
     e9a:	91 c0       	rjmp	.+290    	; 0xfbe <LED_voidOff+0x178>
    case (LED_3):
        if(LED_3_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_3,LOW);
     e9c:	60 e0       	ldi	r22, 0x00	; 0
     e9e:	83 e0       	ldi	r24, 0x03	; 3
     ea0:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
        }else if(LED_3_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_3,HIGH);
        }
    break;
     ea4:	8c c0       	rjmp	.+280    	; 0xfbe <LED_voidOff+0x178>
    case (LED_4):
        if(LED_4_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_4,LOW);
     ea6:	60 e0       	ldi	r22, 0x00	; 0
     ea8:	84 e0       	ldi	r24, 0x04	; 4
     eaa:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
        }else if(LED_4_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_4,HIGH);
        }
    break;
     eae:	87 c0       	rjmp	.+270    	; 0xfbe <LED_voidOff+0x178>
    case (LED_5):
        if(LED_5_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_5,LOW);
     eb0:	60 e0       	ldi	r22, 0x00	; 0
     eb2:	85 e0       	ldi	r24, 0x05	; 5
     eb4:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
        }else if(LED_5_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_5,HIGH);
        }
    break;
     eb8:	82 c0       	rjmp	.+260    	; 0xfbe <LED_voidOff+0x178>
    case (LED_6):
        if(LED_6_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_6,LOW);
     eba:	60 e0       	ldi	r22, 0x00	; 0
     ebc:	86 e0       	ldi	r24, 0x06	; 6
     ebe:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
        }else if(LED_6_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_6,HIGH);
        }
    break;
     ec2:	7d c0       	rjmp	.+250    	; 0xfbe <LED_voidOff+0x178>
    case (LED_7):
        if(LED_7_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_7,LOW);
     ec4:	60 e0       	ldi	r22, 0x00	; 0
     ec6:	87 e0       	ldi	r24, 0x07	; 7
     ec8:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
        }else if(LED_7_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_7,HIGH);
        }
    break;
     ecc:	78 c0       	rjmp	.+240    	; 0xfbe <LED_voidOff+0x178>
    case (LED_8):
        if(LED_8_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_8,LOW);
     ece:	60 e0       	ldi	r22, 0x00	; 0
     ed0:	88 e0       	ldi	r24, 0x08	; 8
     ed2:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
        }else if(LED_8_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_8,HIGH);
        }
    break;
     ed6:	73 c0       	rjmp	.+230    	; 0xfbe <LED_voidOff+0x178>
    case (LED_9):
        if(LED_9_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_9,LOW);
     ed8:	60 e0       	ldi	r22, 0x00	; 0
     eda:	89 e0       	ldi	r24, 0x09	; 9
     edc:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
        }else if(LED_9_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_9,HIGH);
        }
    break;
     ee0:	6e c0       	rjmp	.+220    	; 0xfbe <LED_voidOff+0x178>
    case (LED_10):
        if(LED_10_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_10,LOW);
     ee2:	60 e0       	ldi	r22, 0x00	; 0
     ee4:	8a e0       	ldi	r24, 0x0A	; 10
     ee6:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
        }else if(LED_10_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_10,HIGH);
        }
    break;
     eea:	69 c0       	rjmp	.+210    	; 0xfbe <LED_voidOff+0x178>
    case (LED_11):
        if(LED_11_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_11,LOW);
     eec:	60 e0       	ldi	r22, 0x00	; 0
     eee:	8b e0       	ldi	r24, 0x0B	; 11
     ef0:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
        }else if(LED_11_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_11,HIGH);
        }
    break;
     ef4:	64 c0       	rjmp	.+200    	; 0xfbe <LED_voidOff+0x178>
    case (LED_12):
        if(LED_12_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_12,LOW);
     ef6:	60 e0       	ldi	r22, 0x00	; 0
     ef8:	8c e0       	ldi	r24, 0x0C	; 12
     efa:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
        }else if(LED_12_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_12,HIGH);
        }
    break;
     efe:	5f c0       	rjmp	.+190    	; 0xfbe <LED_voidOff+0x178>
    case (LED_13):
        if(LED_13_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_13,LOW);
     f00:	60 e0       	ldi	r22, 0x00	; 0
     f02:	8d e0       	ldi	r24, 0x0D	; 13
     f04:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
        }else if(LED_13_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_13,HIGH);
        }
    break;
     f08:	5a c0       	rjmp	.+180    	; 0xfbe <LED_voidOff+0x178>
    case (LED_14):
        if(LED_14_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_14,LOW);
     f0a:	60 e0       	ldi	r22, 0x00	; 0
     f0c:	8e e0       	ldi	r24, 0x0E	; 14
     f0e:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
        }else if(LED_14_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_14,HIGH);
        }
    break;
     f12:	55 c0       	rjmp	.+170    	; 0xfbe <LED_voidOff+0x178>
    case (LED_15):
        if(LED_15_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_15,LOW);
     f14:	60 e0       	ldi	r22, 0x00	; 0
     f16:	8f e0       	ldi	r24, 0x0F	; 15
     f18:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
        }else if(LED_15_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_15,HIGH);
        }
    break;
     f1c:	50 c0       	rjmp	.+160    	; 0xfbe <LED_voidOff+0x178>
    case (LED_16):
        if(LED_16_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_16,LOW);
     f1e:	60 e0       	ldi	r22, 0x00	; 0
     f20:	80 e1       	ldi	r24, 0x10	; 16
     f22:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
        }else if(LED_16_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_16,HIGH);
        }
    break;
     f26:	4b c0       	rjmp	.+150    	; 0xfbe <LED_voidOff+0x178>
    case (LED_17):
        if(LED_17_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_17,LOW);
     f28:	60 e0       	ldi	r22, 0x00	; 0
     f2a:	81 e1       	ldi	r24, 0x11	; 17
     f2c:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
        }else if(LED_17_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_17,HIGH);
        }
    break;
     f30:	46 c0       	rjmp	.+140    	; 0xfbe <LED_voidOff+0x178>
    case (LED_18):
        if(LED_18_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_18,LOW);
     f32:	60 e0       	ldi	r22, 0x00	; 0
     f34:	82 e1       	ldi	r24, 0x12	; 18
     f36:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
        }else if(LED_18_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_18,HIGH);
        }
    break;
     f3a:	41 c0       	rjmp	.+130    	; 0xfbe <LED_voidOff+0x178>
    case (LED_19):
        if(LED_19_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_19,LOW);
     f3c:	60 e0       	ldi	r22, 0x00	; 0
     f3e:	83 e1       	ldi	r24, 0x13	; 19
     f40:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
        }else if(LED_19_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_19,HIGH);
        }
    break;
     f44:	3c c0       	rjmp	.+120    	; 0xfbe <LED_voidOff+0x178>
    case (LED_20):
        if(LED_20_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_20,LOW);
     f46:	60 e0       	ldi	r22, 0x00	; 0
     f48:	84 e1       	ldi	r24, 0x14	; 20
     f4a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
        }else if(LED_20_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_20,HIGH);
        }
    break;
     f4e:	37 c0       	rjmp	.+110    	; 0xfbe <LED_voidOff+0x178>
    case (LED_21):
        if(LED_21_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_21,LOW);
     f50:	60 e0       	ldi	r22, 0x00	; 0
     f52:	85 e1       	ldi	r24, 0x15	; 21
     f54:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
        }else if(LED_21_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_21,HIGH);
        }
    break;
     f58:	32 c0       	rjmp	.+100    	; 0xfbe <LED_voidOff+0x178>
    case (LED_22):
        if(LED_22_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_22,LOW);
     f5a:	60 e0       	ldi	r22, 0x00	; 0
     f5c:	86 e1       	ldi	r24, 0x16	; 22
     f5e:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
        }else if(LED_22_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_22,HIGH);
        }
    break;
     f62:	2d c0       	rjmp	.+90     	; 0xfbe <LED_voidOff+0x178>
    case (LED_23):
        if(LED_23_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_23,LOW);
     f64:	60 e0       	ldi	r22, 0x00	; 0
     f66:	87 e1       	ldi	r24, 0x17	; 23
     f68:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
        }else if(LED_23_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_23,HIGH);
        }
    break;
     f6c:	28 c0       	rjmp	.+80     	; 0xfbe <LED_voidOff+0x178>
    case (LED_24):
        if(LED_24_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_24,LOW);
     f6e:	60 e0       	ldi	r22, 0x00	; 0
     f70:	88 e1       	ldi	r24, 0x18	; 24
     f72:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
        }else if(LED_24_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_24,HIGH);
        }
    break;
     f76:	23 c0       	rjmp	.+70     	; 0xfbe <LED_voidOff+0x178>
    case (LED_25):
        if(LED_25_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_25,LOW);
     f78:	60 e0       	ldi	r22, 0x00	; 0
     f7a:	89 e1       	ldi	r24, 0x19	; 25
     f7c:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
        }else if(LED_25_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_25,HIGH);
        }
    break;
     f80:	1e c0       	rjmp	.+60     	; 0xfbe <LED_voidOff+0x178>
    case (LED_26):
        if(LED_26_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_26,LOW);
     f82:	60 e0       	ldi	r22, 0x00	; 0
     f84:	8a e1       	ldi	r24, 0x1A	; 26
     f86:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
        }else if(LED_26_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_26,HIGH);
        }
    break;
     f8a:	19 c0       	rjmp	.+50     	; 0xfbe <LED_voidOff+0x178>
    case (LED_27):
        if(LED_27_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_27,LOW);
     f8c:	60 e0       	ldi	r22, 0x00	; 0
     f8e:	8b e1       	ldi	r24, 0x1B	; 27
     f90:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
        }else if(LED_27_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_27,HIGH);
        }
    break;
     f94:	14 c0       	rjmp	.+40     	; 0xfbe <LED_voidOff+0x178>
    case (LED_28):
        if(LED_28_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_28,LOW);
     f96:	60 e0       	ldi	r22, 0x00	; 0
     f98:	8c e1       	ldi	r24, 0x1C	; 28
     f9a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
        }else if(LED_28_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_28,HIGH);
        }
    break;
     f9e:	0f c0       	rjmp	.+30     	; 0xfbe <LED_voidOff+0x178>
    case (LED_29):
        if(LED_29_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_29,LOW);
     fa0:	60 e0       	ldi	r22, 0x00	; 0
     fa2:	8d e1       	ldi	r24, 0x1D	; 29
     fa4:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
        }else if(LED_29_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_29,HIGH);
        }
    break;
     fa8:	0a c0       	rjmp	.+20     	; 0xfbe <LED_voidOff+0x178>
    case (LED_30):
        if(LED_30_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_30,LOW);
     faa:	60 e0       	ldi	r22, 0x00	; 0
     fac:	8e e1       	ldi	r24, 0x1E	; 30
     fae:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
        }else if(LED_30_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_30,HIGH);
        }
    break;
     fb2:	05 c0       	rjmp	.+10     	; 0xfbe <LED_voidOff+0x178>
    case (LED_31):
        if(LED_31_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_31,LOW);
     fb4:	60 e0       	ldi	r22, 0x00	; 0
     fb6:	8f e1       	ldi	r24, 0x1F	; 31
     fb8:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
        }else if(LED_31_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_31,HIGH);
        }
    break;
     fbc:	00 00       	nop

	}


}
     fbe:	00 00       	nop
     fc0:	0f 90       	pop	r0
     fc2:	df 91       	pop	r29
     fc4:	cf 91       	pop	r28
     fc6:	08 95       	ret

00000fc8 <LED_voidToggle>:

void LED_voidToggle(u8 LedNum){
     fc8:	cf 93       	push	r28
     fca:	df 93       	push	r29
     fcc:	1f 92       	push	r1
     fce:	cd b7       	in	r28, 0x3d	; 61
     fd0:	de b7       	in	r29, 0x3e	; 62
     fd2:	89 83       	std	Y+1, r24	; 0x01

	switch(LedNum){
     fd4:	89 81       	ldd	r24, Y+1	; 0x01
     fd6:	88 2f       	mov	r24, r24
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	09 2e       	mov	r0, r25
     fdc:	00 0c       	add	r0, r0
     fde:	aa 0b       	sbc	r26, r26
     fe0:	bb 0b       	sbc	r27, r27
     fe2:	40 e0       	ldi	r20, 0x00	; 0
     fe4:	50 e0       	ldi	r21, 0x00	; 0
     fe6:	2f e1       	ldi	r18, 0x1F	; 31
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	84 1b       	sub	r24, r20
     fec:	95 0b       	sbc	r25, r21
     fee:	28 17       	cp	r18, r24
     ff0:	39 07       	cpc	r19, r25
     ff2:	08 f4       	brcc	.+2      	; 0xff6 <LED_voidToggle+0x2e>
     ff4:	85 c0       	rjmp	.+266    	; 0x1100 <LED_voidToggle+0x138>
     ff6:	86 59       	subi	r24, 0x96	; 150
     ff8:	9f 4f       	sbci	r25, 0xFF	; 255
     ffa:	fc 01       	movw	r30, r24
     ffc:	0c 94 3c 10 	jmp	0x2078	; 0x2078 <__tablejump2__>

        	case (LED_0):
        		DIO_voidTogglePin(LEDPIN_0);
    1000:	80 e0       	ldi	r24, 0x00	; 0
    1002:	0e 94 4f 02 	call	0x49e	; 0x49e <DIO_voidTogglePin>
        	break;
    1006:	7c c0       	rjmp	.+248    	; 0x1100 <LED_voidToggle+0x138>
        	case (LED_1):
        		DIO_voidTogglePin(LEDPIN_1);
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	0e 94 4f 02 	call	0x49e	; 0x49e <DIO_voidTogglePin>
        	break;
    100e:	78 c0       	rjmp	.+240    	; 0x1100 <LED_voidToggle+0x138>
        	case (LED_2):
        		DIO_voidTogglePin(LEDPIN_2);
    1010:	82 e0       	ldi	r24, 0x02	; 2
    1012:	0e 94 4f 02 	call	0x49e	; 0x49e <DIO_voidTogglePin>
        	break;
    1016:	74 c0       	rjmp	.+232    	; 0x1100 <LED_voidToggle+0x138>
        	case (LED_3):
        		DIO_voidTogglePin(LEDPIN_3);
    1018:	83 e0       	ldi	r24, 0x03	; 3
    101a:	0e 94 4f 02 	call	0x49e	; 0x49e <DIO_voidTogglePin>
        	break;
    101e:	70 c0       	rjmp	.+224    	; 0x1100 <LED_voidToggle+0x138>
        	case (LED_4):
        		DIO_voidTogglePin(LEDPIN_4);
    1020:	84 e0       	ldi	r24, 0x04	; 4
    1022:	0e 94 4f 02 	call	0x49e	; 0x49e <DIO_voidTogglePin>
        	break;
    1026:	6c c0       	rjmp	.+216    	; 0x1100 <LED_voidToggle+0x138>
        	case (LED_5):
        		DIO_voidTogglePin(LEDPIN_5);
    1028:	85 e0       	ldi	r24, 0x05	; 5
    102a:	0e 94 4f 02 	call	0x49e	; 0x49e <DIO_voidTogglePin>
        	break;
    102e:	68 c0       	rjmp	.+208    	; 0x1100 <LED_voidToggle+0x138>
        	case (LED_6):
        		DIO_voidTogglePin(LEDPIN_6);
    1030:	86 e0       	ldi	r24, 0x06	; 6
    1032:	0e 94 4f 02 	call	0x49e	; 0x49e <DIO_voidTogglePin>
        	break;
    1036:	64 c0       	rjmp	.+200    	; 0x1100 <LED_voidToggle+0x138>
        	case (LED_7):
        		DIO_voidTogglePin(LEDPIN_7);
    1038:	87 e0       	ldi	r24, 0x07	; 7
    103a:	0e 94 4f 02 	call	0x49e	; 0x49e <DIO_voidTogglePin>
        	break;
    103e:	60 c0       	rjmp	.+192    	; 0x1100 <LED_voidToggle+0x138>
        	case (LED_8):
        		DIO_voidTogglePin(LEDPIN_8);
    1040:	88 e0       	ldi	r24, 0x08	; 8
    1042:	0e 94 4f 02 	call	0x49e	; 0x49e <DIO_voidTogglePin>
        	break;
    1046:	5c c0       	rjmp	.+184    	; 0x1100 <LED_voidToggle+0x138>
        	case (LED_9):
        		DIO_voidTogglePin(LEDPIN_9);
    1048:	89 e0       	ldi	r24, 0x09	; 9
    104a:	0e 94 4f 02 	call	0x49e	; 0x49e <DIO_voidTogglePin>
        	break;
    104e:	58 c0       	rjmp	.+176    	; 0x1100 <LED_voidToggle+0x138>
        	case (LED_10):
        		DIO_voidTogglePin(LEDPIN_10);
    1050:	8a e0       	ldi	r24, 0x0A	; 10
    1052:	0e 94 4f 02 	call	0x49e	; 0x49e <DIO_voidTogglePin>
        	break;
    1056:	54 c0       	rjmp	.+168    	; 0x1100 <LED_voidToggle+0x138>
        	case (LED_11):
        		DIO_voidTogglePin(LEDPIN_11);
    1058:	8b e0       	ldi	r24, 0x0B	; 11
    105a:	0e 94 4f 02 	call	0x49e	; 0x49e <DIO_voidTogglePin>
        	break;
    105e:	50 c0       	rjmp	.+160    	; 0x1100 <LED_voidToggle+0x138>
        	case (LED_12):
        		DIO_voidTogglePin(LEDPIN_12);
    1060:	8c e0       	ldi	r24, 0x0C	; 12
    1062:	0e 94 4f 02 	call	0x49e	; 0x49e <DIO_voidTogglePin>
        	break;
    1066:	4c c0       	rjmp	.+152    	; 0x1100 <LED_voidToggle+0x138>
        	case (LED_13):
        		DIO_voidTogglePin(LEDPIN_13);
    1068:	8d e0       	ldi	r24, 0x0D	; 13
    106a:	0e 94 4f 02 	call	0x49e	; 0x49e <DIO_voidTogglePin>
        	break;
    106e:	48 c0       	rjmp	.+144    	; 0x1100 <LED_voidToggle+0x138>
        	case (LED_14):
        		DIO_voidTogglePin(LEDPIN_14);
    1070:	8e e0       	ldi	r24, 0x0E	; 14
    1072:	0e 94 4f 02 	call	0x49e	; 0x49e <DIO_voidTogglePin>
        	break;
    1076:	44 c0       	rjmp	.+136    	; 0x1100 <LED_voidToggle+0x138>
        	case (LED_15):
        		DIO_voidTogglePin(LEDPIN_15);
    1078:	8f e0       	ldi	r24, 0x0F	; 15
    107a:	0e 94 4f 02 	call	0x49e	; 0x49e <DIO_voidTogglePin>
        	break;
    107e:	40 c0       	rjmp	.+128    	; 0x1100 <LED_voidToggle+0x138>
        	case (LED_16):
        		DIO_voidTogglePin(LEDPIN_16);
    1080:	80 e1       	ldi	r24, 0x10	; 16
    1082:	0e 94 4f 02 	call	0x49e	; 0x49e <DIO_voidTogglePin>
        	break;
    1086:	3c c0       	rjmp	.+120    	; 0x1100 <LED_voidToggle+0x138>
        	case (LED_17):
        		DIO_voidTogglePin(LEDPIN_17);
    1088:	81 e1       	ldi	r24, 0x11	; 17
    108a:	0e 94 4f 02 	call	0x49e	; 0x49e <DIO_voidTogglePin>
        	break;
    108e:	38 c0       	rjmp	.+112    	; 0x1100 <LED_voidToggle+0x138>
        	case (LED_18):
        		DIO_voidTogglePin(LEDPIN_18);
    1090:	82 e1       	ldi	r24, 0x12	; 18
    1092:	0e 94 4f 02 	call	0x49e	; 0x49e <DIO_voidTogglePin>
        	break;
    1096:	34 c0       	rjmp	.+104    	; 0x1100 <LED_voidToggle+0x138>
        	case (LED_19):
        		DIO_voidTogglePin(LEDPIN_19);
    1098:	83 e1       	ldi	r24, 0x13	; 19
    109a:	0e 94 4f 02 	call	0x49e	; 0x49e <DIO_voidTogglePin>
        	break;
    109e:	30 c0       	rjmp	.+96     	; 0x1100 <LED_voidToggle+0x138>
        	case (LED_20):
        		DIO_voidTogglePin(LEDPIN_20);
    10a0:	84 e1       	ldi	r24, 0x14	; 20
    10a2:	0e 94 4f 02 	call	0x49e	; 0x49e <DIO_voidTogglePin>
        	break;
    10a6:	2c c0       	rjmp	.+88     	; 0x1100 <LED_voidToggle+0x138>
        	case (LED_21):
        		DIO_voidTogglePin(LEDPIN_21);
    10a8:	85 e1       	ldi	r24, 0x15	; 21
    10aa:	0e 94 4f 02 	call	0x49e	; 0x49e <DIO_voidTogglePin>
        	break;
    10ae:	28 c0       	rjmp	.+80     	; 0x1100 <LED_voidToggle+0x138>
        	case (LED_22):
        		DIO_voidTogglePin(LEDPIN_22);
    10b0:	86 e1       	ldi	r24, 0x16	; 22
    10b2:	0e 94 4f 02 	call	0x49e	; 0x49e <DIO_voidTogglePin>
        	break;
    10b6:	24 c0       	rjmp	.+72     	; 0x1100 <LED_voidToggle+0x138>
        	case (LED_23):
        		DIO_voidTogglePin(LEDPIN_23);
    10b8:	87 e1       	ldi	r24, 0x17	; 23
    10ba:	0e 94 4f 02 	call	0x49e	; 0x49e <DIO_voidTogglePin>
        	break;
    10be:	20 c0       	rjmp	.+64     	; 0x1100 <LED_voidToggle+0x138>
        	case (LED_24):
        		DIO_voidTogglePin(LEDPIN_24);
    10c0:	88 e1       	ldi	r24, 0x18	; 24
    10c2:	0e 94 4f 02 	call	0x49e	; 0x49e <DIO_voidTogglePin>
        	break;
    10c6:	1c c0       	rjmp	.+56     	; 0x1100 <LED_voidToggle+0x138>
        	case (LED_25):
        		DIO_voidTogglePin(LEDPIN_25);
    10c8:	89 e1       	ldi	r24, 0x19	; 25
    10ca:	0e 94 4f 02 	call	0x49e	; 0x49e <DIO_voidTogglePin>
        	break;
    10ce:	18 c0       	rjmp	.+48     	; 0x1100 <LED_voidToggle+0x138>
        	case (LED_26):
        		DIO_voidTogglePin(LEDPIN_26);
    10d0:	8a e1       	ldi	r24, 0x1A	; 26
    10d2:	0e 94 4f 02 	call	0x49e	; 0x49e <DIO_voidTogglePin>
        	break;
    10d6:	14 c0       	rjmp	.+40     	; 0x1100 <LED_voidToggle+0x138>
        	case (LED_27):
        		DIO_voidTogglePin(LEDPIN_27);
    10d8:	8b e1       	ldi	r24, 0x1B	; 27
    10da:	0e 94 4f 02 	call	0x49e	; 0x49e <DIO_voidTogglePin>
        	break;
    10de:	10 c0       	rjmp	.+32     	; 0x1100 <LED_voidToggle+0x138>
        	case (LED_28):
        		DIO_voidTogglePin(LEDPIN_28);
    10e0:	8c e1       	ldi	r24, 0x1C	; 28
    10e2:	0e 94 4f 02 	call	0x49e	; 0x49e <DIO_voidTogglePin>
        	break;
    10e6:	0c c0       	rjmp	.+24     	; 0x1100 <LED_voidToggle+0x138>
        	case (LED_29):
        		DIO_voidTogglePin(LEDPIN_29);
    10e8:	8d e1       	ldi	r24, 0x1D	; 29
    10ea:	0e 94 4f 02 	call	0x49e	; 0x49e <DIO_voidTogglePin>
        	break;
    10ee:	08 c0       	rjmp	.+16     	; 0x1100 <LED_voidToggle+0x138>
        	case (LED_30):
        		DIO_voidTogglePin(LEDPIN_30);
    10f0:	8e e1       	ldi	r24, 0x1E	; 30
    10f2:	0e 94 4f 02 	call	0x49e	; 0x49e <DIO_voidTogglePin>
        	break;
    10f6:	04 c0       	rjmp	.+8      	; 0x1100 <LED_voidToggle+0x138>
        	case (LED_31):
        		DIO_voidTogglePin(LEDPIN_31);
    10f8:	8f e1       	ldi	r24, 0x1F	; 31
    10fa:	0e 94 4f 02 	call	0x49e	; 0x49e <DIO_voidTogglePin>
        	break;
    10fe:	00 00       	nop

	}


}
    1100:	00 00       	nop
    1102:	0f 90       	pop	r0
    1104:	df 91       	pop	r29
    1106:	cf 91       	pop	r28
    1108:	08 95       	ret

0000110a <SEVSEG_voidInitialize>:
#include "DIO_int.h"
#include "SEVSEG_priv.h"
#include "SEVSEG_config.h"
#include "SEVSEG_int.h"

void SEVSEG_voidInitialize(void){
    110a:	cf 93       	push	r28
    110c:	df 93       	push	r29
    110e:	cd b7       	in	r28, 0x3d	; 61
    1110:	de b7       	in	r29, 0x3e	; 62

}
    1112:	00 00       	nop
    1114:	df 91       	pop	r29
    1116:	cf 91       	pop	r28
    1118:	08 95       	ret

0000111a <SEVSEG_voidDisplay>:

void SEVSEG_voidDisplay(u8 SegNum ,u8 Num){
    111a:	cf 93       	push	r28
    111c:	df 93       	push	r29
    111e:	00 d0       	rcall	.+0      	; 0x1120 <SEVSEG_voidDisplay+0x6>
    1120:	cd b7       	in	r28, 0x3d	; 61
    1122:	de b7       	in	r29, 0x3e	; 62
    1124:	89 83       	std	Y+1, r24	; 0x01
    1126:	6a 83       	std	Y+2, r22	; 0x02


	#if(SEGMENT_TYPE==COMMON_ANODE)
	{

		switch(SegNum){
    1128:	89 81       	ldd	r24, Y+1	; 0x01
    112a:	88 2f       	mov	r24, r24
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	81 30       	cpi	r24, 0x01	; 1
    1130:	91 05       	cpc	r25, r1
    1132:	21 f0       	breq	.+8      	; 0x113c <SEVSEG_voidDisplay+0x22>
    1134:	02 97       	sbiw	r24, 0x02	; 2
    1136:	09 f4       	brne	.+2      	; 0x113a <SEVSEG_voidDisplay+0x20>
    1138:	3a c1       	rjmp	.+628    	; 0x13ae <SEVSEG_voidDisplay+0x294>

		}
}

#endif
}
    113a:	72 c2       	rjmp	.+1252   	; 0x1620 <SEVSEG_voidDisplay+0x506>
	{

		switch(SegNum){

		case SEG_1:
			switch(Num){
    113c:	8a 81       	ldd	r24, Y+2	; 0x02
    113e:	88 2f       	mov	r24, r24
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	09 2e       	mov	r0, r25
    1144:	00 0c       	add	r0, r0
    1146:	aa 0b       	sbc	r26, r26
    1148:	bb 0b       	sbc	r27, r27
    114a:	40 e0       	ldi	r20, 0x00	; 0
    114c:	50 e0       	ldi	r21, 0x00	; 0
    114e:	29 e0       	ldi	r18, 0x09	; 9
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	84 1b       	sub	r24, r20
    1154:	95 0b       	sbc	r25, r21
    1156:	28 17       	cp	r18, r24
    1158:	39 07       	cpc	r19, r25
    115a:	08 f4       	brcc	.+2      	; 0x115e <SEVSEG_voidDisplay+0x44>
    115c:	60 c2       	rjmp	.+1216   	; 0x161e <SEVSEG_voidDisplay+0x504>
    115e:	86 57       	subi	r24, 0x76	; 118
    1160:	9f 4f       	sbci	r25, 0xFF	; 255
    1162:	fc 01       	movw	r30, r24
    1164:	0c 94 3c 10 	jmp	0x2078	; 0x2078 <__tablejump2__>
			case 0:

				DIO_voidSetPin(SEG1_PINA,LOW);
    1168:	60 e0       	ldi	r22, 0x00	; 0
    116a:	80 e0       	ldi	r24, 0x00	; 0
    116c:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG1_PINB,LOW);
    1170:	60 e0       	ldi	r22, 0x00	; 0
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG1_PINC,LOW);
    1178:	60 e0       	ldi	r22, 0x00	; 0
    117a:	82 e0       	ldi	r24, 0x02	; 2
    117c:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG1_PIND,LOW);
    1180:	60 e0       	ldi	r22, 0x00	; 0
    1182:	83 e0       	ldi	r24, 0x03	; 3
    1184:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG1_PINE,LOW);
    1188:	60 e0       	ldi	r22, 0x00	; 0
    118a:	84 e0       	ldi	r24, 0x04	; 4
    118c:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG1_PINF,LOW);
    1190:	60 e0       	ldi	r22, 0x00	; 0
    1192:	85 e0       	ldi	r24, 0x05	; 5
    1194:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG1_PING,HIGH);
    1198:	61 e0       	ldi	r22, 0x01	; 1
    119a:	86 e0       	ldi	r24, 0x06	; 6
    119c:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>

			break;
    11a0:	05 c1       	rjmp	.+522    	; 0x13ac <SEVSEG_voidDisplay+0x292>
			case 1:

				DIO_voidSetPin(SEG1_PINA,HIGH);
    11a2:	61 e0       	ldi	r22, 0x01	; 1
    11a4:	80 e0       	ldi	r24, 0x00	; 0
    11a6:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG1_PINB,LOW);
    11aa:	60 e0       	ldi	r22, 0x00	; 0
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG1_PINC,LOW);
    11b2:	60 e0       	ldi	r22, 0x00	; 0
    11b4:	82 e0       	ldi	r24, 0x02	; 2
    11b6:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG1_PIND,HIGH);
    11ba:	61 e0       	ldi	r22, 0x01	; 1
    11bc:	83 e0       	ldi	r24, 0x03	; 3
    11be:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG1_PINE,HIGH);
    11c2:	61 e0       	ldi	r22, 0x01	; 1
    11c4:	84 e0       	ldi	r24, 0x04	; 4
    11c6:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG1_PINF,HIGH);
    11ca:	61 e0       	ldi	r22, 0x01	; 1
    11cc:	85 e0       	ldi	r24, 0x05	; 5
    11ce:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG1_PING,HIGH);
    11d2:	61 e0       	ldi	r22, 0x01	; 1
    11d4:	86 e0       	ldi	r24, 0x06	; 6
    11d6:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>

			break;
    11da:	e8 c0       	rjmp	.+464    	; 0x13ac <SEVSEG_voidDisplay+0x292>
			case 2:

				DIO_voidSetPin(SEG1_PINA,LOW);
    11dc:	60 e0       	ldi	r22, 0x00	; 0
    11de:	80 e0       	ldi	r24, 0x00	; 0
    11e0:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG1_PINB,LOW);
    11e4:	60 e0       	ldi	r22, 0x00	; 0
    11e6:	81 e0       	ldi	r24, 0x01	; 1
    11e8:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG1_PINC,HIGH);
    11ec:	61 e0       	ldi	r22, 0x01	; 1
    11ee:	82 e0       	ldi	r24, 0x02	; 2
    11f0:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG1_PIND,LOW);
    11f4:	60 e0       	ldi	r22, 0x00	; 0
    11f6:	83 e0       	ldi	r24, 0x03	; 3
    11f8:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG1_PINE,LOW);
    11fc:	60 e0       	ldi	r22, 0x00	; 0
    11fe:	84 e0       	ldi	r24, 0x04	; 4
    1200:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG1_PINF,HIGH);
    1204:	61 e0       	ldi	r22, 0x01	; 1
    1206:	85 e0       	ldi	r24, 0x05	; 5
    1208:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG1_PING,LOW);
    120c:	60 e0       	ldi	r22, 0x00	; 0
    120e:	86 e0       	ldi	r24, 0x06	; 6
    1210:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>

			break;
    1214:	cb c0       	rjmp	.+406    	; 0x13ac <SEVSEG_voidDisplay+0x292>
			case 3:

				DIO_voidSetPin(SEG1_PINA,LOW);
    1216:	60 e0       	ldi	r22, 0x00	; 0
    1218:	80 e0       	ldi	r24, 0x00	; 0
    121a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG1_PINB,LOW);
    121e:	60 e0       	ldi	r22, 0x00	; 0
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG1_PINC,LOW);
    1226:	60 e0       	ldi	r22, 0x00	; 0
    1228:	82 e0       	ldi	r24, 0x02	; 2
    122a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG1_PIND,LOW);
    122e:	60 e0       	ldi	r22, 0x00	; 0
    1230:	83 e0       	ldi	r24, 0x03	; 3
    1232:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG1_PINE,HIGH);
    1236:	61 e0       	ldi	r22, 0x01	; 1
    1238:	84 e0       	ldi	r24, 0x04	; 4
    123a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG1_PINF,HIGH);
    123e:	61 e0       	ldi	r22, 0x01	; 1
    1240:	85 e0       	ldi	r24, 0x05	; 5
    1242:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG1_PING,LOW);
    1246:	60 e0       	ldi	r22, 0x00	; 0
    1248:	86 e0       	ldi	r24, 0x06	; 6
    124a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>

			break;
    124e:	ae c0       	rjmp	.+348    	; 0x13ac <SEVSEG_voidDisplay+0x292>
			case 4:

				DIO_voidSetPin(SEG1_PINA,HIGH);
    1250:	61 e0       	ldi	r22, 0x01	; 1
    1252:	80 e0       	ldi	r24, 0x00	; 0
    1254:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG1_PINB,LOW);
    1258:	60 e0       	ldi	r22, 0x00	; 0
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG1_PINC,LOW);
    1260:	60 e0       	ldi	r22, 0x00	; 0
    1262:	82 e0       	ldi	r24, 0x02	; 2
    1264:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG1_PIND,HIGH);
    1268:	61 e0       	ldi	r22, 0x01	; 1
    126a:	83 e0       	ldi	r24, 0x03	; 3
    126c:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG1_PINE,HIGH);
    1270:	61 e0       	ldi	r22, 0x01	; 1
    1272:	84 e0       	ldi	r24, 0x04	; 4
    1274:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG1_PINF,LOW);
    1278:	60 e0       	ldi	r22, 0x00	; 0
    127a:	85 e0       	ldi	r24, 0x05	; 5
    127c:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG1_PING,LOW);
    1280:	60 e0       	ldi	r22, 0x00	; 0
    1282:	86 e0       	ldi	r24, 0x06	; 6
    1284:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>

			break;
    1288:	91 c0       	rjmp	.+290    	; 0x13ac <SEVSEG_voidDisplay+0x292>
			case 5:

				DIO_voidSetPin(SEG1_PINA,LOW);
    128a:	60 e0       	ldi	r22, 0x00	; 0
    128c:	80 e0       	ldi	r24, 0x00	; 0
    128e:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG1_PINB,HIGH);
    1292:	61 e0       	ldi	r22, 0x01	; 1
    1294:	81 e0       	ldi	r24, 0x01	; 1
    1296:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG1_PINC,LOW);
    129a:	60 e0       	ldi	r22, 0x00	; 0
    129c:	82 e0       	ldi	r24, 0x02	; 2
    129e:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG1_PIND,LOW);
    12a2:	60 e0       	ldi	r22, 0x00	; 0
    12a4:	83 e0       	ldi	r24, 0x03	; 3
    12a6:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG1_PINE,HIGH);
    12aa:	61 e0       	ldi	r22, 0x01	; 1
    12ac:	84 e0       	ldi	r24, 0x04	; 4
    12ae:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG1_PINF,LOW);
    12b2:	60 e0       	ldi	r22, 0x00	; 0
    12b4:	85 e0       	ldi	r24, 0x05	; 5
    12b6:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG1_PING,LOW);
    12ba:	60 e0       	ldi	r22, 0x00	; 0
    12bc:	86 e0       	ldi	r24, 0x06	; 6
    12be:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>

			break;
    12c2:	74 c0       	rjmp	.+232    	; 0x13ac <SEVSEG_voidDisplay+0x292>
			case 6:

				DIO_voidSetPin(SEG1_PINA,LOW);
    12c4:	60 e0       	ldi	r22, 0x00	; 0
    12c6:	80 e0       	ldi	r24, 0x00	; 0
    12c8:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG1_PINB,HIGH);
    12cc:	61 e0       	ldi	r22, 0x01	; 1
    12ce:	81 e0       	ldi	r24, 0x01	; 1
    12d0:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG1_PINC,LOW);
    12d4:	60 e0       	ldi	r22, 0x00	; 0
    12d6:	82 e0       	ldi	r24, 0x02	; 2
    12d8:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG1_PIND,LOW);
    12dc:	60 e0       	ldi	r22, 0x00	; 0
    12de:	83 e0       	ldi	r24, 0x03	; 3
    12e0:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG1_PINE,LOW);
    12e4:	60 e0       	ldi	r22, 0x00	; 0
    12e6:	84 e0       	ldi	r24, 0x04	; 4
    12e8:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG1_PINF,LOW);
    12ec:	60 e0       	ldi	r22, 0x00	; 0
    12ee:	85 e0       	ldi	r24, 0x05	; 5
    12f0:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG1_PING,LOW);
    12f4:	60 e0       	ldi	r22, 0x00	; 0
    12f6:	86 e0       	ldi	r24, 0x06	; 6
    12f8:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>

			break;
    12fc:	57 c0       	rjmp	.+174    	; 0x13ac <SEVSEG_voidDisplay+0x292>
			case 7:

				DIO_voidSetPin(SEG1_PINA,LOW);
    12fe:	60 e0       	ldi	r22, 0x00	; 0
    1300:	80 e0       	ldi	r24, 0x00	; 0
    1302:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG1_PINB,LOW);
    1306:	60 e0       	ldi	r22, 0x00	; 0
    1308:	81 e0       	ldi	r24, 0x01	; 1
    130a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG1_PINC,LOW);
    130e:	60 e0       	ldi	r22, 0x00	; 0
    1310:	82 e0       	ldi	r24, 0x02	; 2
    1312:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG1_PIND,HIGH);
    1316:	61 e0       	ldi	r22, 0x01	; 1
    1318:	83 e0       	ldi	r24, 0x03	; 3
    131a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG1_PINE,HIGH);
    131e:	61 e0       	ldi	r22, 0x01	; 1
    1320:	84 e0       	ldi	r24, 0x04	; 4
    1322:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG1_PINF,HIGH);
    1326:	61 e0       	ldi	r22, 0x01	; 1
    1328:	85 e0       	ldi	r24, 0x05	; 5
    132a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG1_PING,HIGH);
    132e:	61 e0       	ldi	r22, 0x01	; 1
    1330:	86 e0       	ldi	r24, 0x06	; 6
    1332:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>

			break;
    1336:	3a c0       	rjmp	.+116    	; 0x13ac <SEVSEG_voidDisplay+0x292>
			case 8:

				DIO_voidSetPin(SEG1_PINA,LOW);
    1338:	60 e0       	ldi	r22, 0x00	; 0
    133a:	80 e0       	ldi	r24, 0x00	; 0
    133c:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG1_PINB,LOW);
    1340:	60 e0       	ldi	r22, 0x00	; 0
    1342:	81 e0       	ldi	r24, 0x01	; 1
    1344:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG1_PINC,LOW);
    1348:	60 e0       	ldi	r22, 0x00	; 0
    134a:	82 e0       	ldi	r24, 0x02	; 2
    134c:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG1_PIND,LOW);
    1350:	60 e0       	ldi	r22, 0x00	; 0
    1352:	83 e0       	ldi	r24, 0x03	; 3
    1354:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG1_PINE,LOW);
    1358:	60 e0       	ldi	r22, 0x00	; 0
    135a:	84 e0       	ldi	r24, 0x04	; 4
    135c:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG1_PINF,LOW);
    1360:	60 e0       	ldi	r22, 0x00	; 0
    1362:	85 e0       	ldi	r24, 0x05	; 5
    1364:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG1_PING,LOW);
    1368:	60 e0       	ldi	r22, 0x00	; 0
    136a:	86 e0       	ldi	r24, 0x06	; 6
    136c:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>

			break;
    1370:	1d c0       	rjmp	.+58     	; 0x13ac <SEVSEG_voidDisplay+0x292>
			case 9:

				DIO_voidSetPin(SEG1_PINA,LOW);
    1372:	60 e0       	ldi	r22, 0x00	; 0
    1374:	80 e0       	ldi	r24, 0x00	; 0
    1376:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG1_PINB,LOW);
    137a:	60 e0       	ldi	r22, 0x00	; 0
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG1_PINC,LOW);
    1382:	60 e0       	ldi	r22, 0x00	; 0
    1384:	82 e0       	ldi	r24, 0x02	; 2
    1386:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG1_PIND,LOW);
    138a:	60 e0       	ldi	r22, 0x00	; 0
    138c:	83 e0       	ldi	r24, 0x03	; 3
    138e:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG1_PINE,HIGH);
    1392:	61 e0       	ldi	r22, 0x01	; 1
    1394:	84 e0       	ldi	r24, 0x04	; 4
    1396:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG1_PINF,LOW);
    139a:	60 e0       	ldi	r22, 0x00	; 0
    139c:	85 e0       	ldi	r24, 0x05	; 5
    139e:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG1_PING,LOW);
    13a2:	60 e0       	ldi	r22, 0x00	; 0
    13a4:	86 e0       	ldi	r24, 0x06	; 6
    13a6:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>

			break;
    13aa:	00 00       	nop


			}
		break;
    13ac:	38 c1       	rjmp	.+624    	; 0x161e <SEVSEG_voidDisplay+0x504>
		case SEG_2:
			switch(Num){
    13ae:	8a 81       	ldd	r24, Y+2	; 0x02
    13b0:	88 2f       	mov	r24, r24
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	09 2e       	mov	r0, r25
    13b6:	00 0c       	add	r0, r0
    13b8:	aa 0b       	sbc	r26, r26
    13ba:	bb 0b       	sbc	r27, r27
    13bc:	40 e0       	ldi	r20, 0x00	; 0
    13be:	50 e0       	ldi	r21, 0x00	; 0
    13c0:	29 e0       	ldi	r18, 0x09	; 9
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	84 1b       	sub	r24, r20
    13c6:	95 0b       	sbc	r25, r21
    13c8:	28 17       	cp	r18, r24
    13ca:	39 07       	cpc	r19, r25
    13cc:	08 f4       	brcc	.+2      	; 0x13d0 <SEVSEG_voidDisplay+0x2b6>
    13ce:	28 c1       	rjmp	.+592    	; 0x1620 <SEVSEG_voidDisplay+0x506>
    13d0:	8c 56       	subi	r24, 0x6C	; 108
    13d2:	9f 4f       	sbci	r25, 0xFF	; 255
    13d4:	fc 01       	movw	r30, r24
    13d6:	0c 94 3c 10 	jmp	0x2078	; 0x2078 <__tablejump2__>
			case 0:

				DIO_voidSetPin(SEG2_PINA,LOW);
    13da:	60 e0       	ldi	r22, 0x00	; 0
    13dc:	88 e0       	ldi	r24, 0x08	; 8
    13de:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG2_PINB,LOW);
    13e2:	60 e0       	ldi	r22, 0x00	; 0
    13e4:	89 e0       	ldi	r24, 0x09	; 9
    13e6:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG2_PINC,LOW);
    13ea:	60 e0       	ldi	r22, 0x00	; 0
    13ec:	8a e0       	ldi	r24, 0x0A	; 10
    13ee:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG2_PIND,LOW);
    13f2:	60 e0       	ldi	r22, 0x00	; 0
    13f4:	8b e0       	ldi	r24, 0x0B	; 11
    13f6:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG2_PINE,LOW);
    13fa:	60 e0       	ldi	r22, 0x00	; 0
    13fc:	8c e0       	ldi	r24, 0x0C	; 12
    13fe:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG2_PINF,LOW);
    1402:	60 e0       	ldi	r22, 0x00	; 0
    1404:	8d e0       	ldi	r24, 0x0D	; 13
    1406:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG2_PING,HIGH);
    140a:	61 e0       	ldi	r22, 0x01	; 1
    140c:	8e e0       	ldi	r24, 0x0E	; 14
    140e:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>

			break;
    1412:	06 c1       	rjmp	.+524    	; 0x1620 <SEVSEG_voidDisplay+0x506>
			case 1:

				DIO_voidSetPin(SEG2_PINA,HIGH);
    1414:	61 e0       	ldi	r22, 0x01	; 1
    1416:	88 e0       	ldi	r24, 0x08	; 8
    1418:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG2_PINB,LOW);
    141c:	60 e0       	ldi	r22, 0x00	; 0
    141e:	89 e0       	ldi	r24, 0x09	; 9
    1420:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG2_PINC,LOW);
    1424:	60 e0       	ldi	r22, 0x00	; 0
    1426:	8a e0       	ldi	r24, 0x0A	; 10
    1428:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG2_PIND,HIGH);
    142c:	61 e0       	ldi	r22, 0x01	; 1
    142e:	8b e0       	ldi	r24, 0x0B	; 11
    1430:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG2_PINE,HIGH);
    1434:	61 e0       	ldi	r22, 0x01	; 1
    1436:	8c e0       	ldi	r24, 0x0C	; 12
    1438:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG2_PINF,HIGH);
    143c:	61 e0       	ldi	r22, 0x01	; 1
    143e:	8d e0       	ldi	r24, 0x0D	; 13
    1440:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG2_PING,HIGH);
    1444:	61 e0       	ldi	r22, 0x01	; 1
    1446:	8e e0       	ldi	r24, 0x0E	; 14
    1448:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>

			break;
    144c:	e9 c0       	rjmp	.+466    	; 0x1620 <SEVSEG_voidDisplay+0x506>
			case 2:

				DIO_voidSetPin(SEG2_PINA,LOW);
    144e:	60 e0       	ldi	r22, 0x00	; 0
    1450:	88 e0       	ldi	r24, 0x08	; 8
    1452:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG2_PINB,LOW);
    1456:	60 e0       	ldi	r22, 0x00	; 0
    1458:	89 e0       	ldi	r24, 0x09	; 9
    145a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG2_PINC,HIGH);
    145e:	61 e0       	ldi	r22, 0x01	; 1
    1460:	8a e0       	ldi	r24, 0x0A	; 10
    1462:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG2_PIND,LOW);
    1466:	60 e0       	ldi	r22, 0x00	; 0
    1468:	8b e0       	ldi	r24, 0x0B	; 11
    146a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG2_PINE,LOW);
    146e:	60 e0       	ldi	r22, 0x00	; 0
    1470:	8c e0       	ldi	r24, 0x0C	; 12
    1472:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG2_PINF,HIGH);
    1476:	61 e0       	ldi	r22, 0x01	; 1
    1478:	8d e0       	ldi	r24, 0x0D	; 13
    147a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG2_PING,LOW);
    147e:	60 e0       	ldi	r22, 0x00	; 0
    1480:	8e e0       	ldi	r24, 0x0E	; 14
    1482:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>

			break;
    1486:	cc c0       	rjmp	.+408    	; 0x1620 <SEVSEG_voidDisplay+0x506>
			case 3:

				DIO_voidSetPin(SEG2_PINA,LOW);
    1488:	60 e0       	ldi	r22, 0x00	; 0
    148a:	88 e0       	ldi	r24, 0x08	; 8
    148c:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG2_PINB,LOW);
    1490:	60 e0       	ldi	r22, 0x00	; 0
    1492:	89 e0       	ldi	r24, 0x09	; 9
    1494:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG2_PINC,LOW);
    1498:	60 e0       	ldi	r22, 0x00	; 0
    149a:	8a e0       	ldi	r24, 0x0A	; 10
    149c:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG2_PIND,LOW);
    14a0:	60 e0       	ldi	r22, 0x00	; 0
    14a2:	8b e0       	ldi	r24, 0x0B	; 11
    14a4:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG2_PINE,HIGH);
    14a8:	61 e0       	ldi	r22, 0x01	; 1
    14aa:	8c e0       	ldi	r24, 0x0C	; 12
    14ac:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG2_PINF,HIGH);
    14b0:	61 e0       	ldi	r22, 0x01	; 1
    14b2:	8d e0       	ldi	r24, 0x0D	; 13
    14b4:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG2_PING,LOW);
    14b8:	60 e0       	ldi	r22, 0x00	; 0
    14ba:	8e e0       	ldi	r24, 0x0E	; 14
    14bc:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>

			break;
    14c0:	af c0       	rjmp	.+350    	; 0x1620 <SEVSEG_voidDisplay+0x506>
			case 4:

				DIO_voidSetPin(SEG2_PINA,HIGH);
    14c2:	61 e0       	ldi	r22, 0x01	; 1
    14c4:	88 e0       	ldi	r24, 0x08	; 8
    14c6:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG2_PINB,LOW);
    14ca:	60 e0       	ldi	r22, 0x00	; 0
    14cc:	89 e0       	ldi	r24, 0x09	; 9
    14ce:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG2_PINC,LOW);
    14d2:	60 e0       	ldi	r22, 0x00	; 0
    14d4:	8a e0       	ldi	r24, 0x0A	; 10
    14d6:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG2_PIND,HIGH);
    14da:	61 e0       	ldi	r22, 0x01	; 1
    14dc:	8b e0       	ldi	r24, 0x0B	; 11
    14de:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG2_PINE,HIGH);
    14e2:	61 e0       	ldi	r22, 0x01	; 1
    14e4:	8c e0       	ldi	r24, 0x0C	; 12
    14e6:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG2_PINF,LOW);
    14ea:	60 e0       	ldi	r22, 0x00	; 0
    14ec:	8d e0       	ldi	r24, 0x0D	; 13
    14ee:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG2_PING,LOW);
    14f2:	60 e0       	ldi	r22, 0x00	; 0
    14f4:	8e e0       	ldi	r24, 0x0E	; 14
    14f6:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>

			break;
    14fa:	92 c0       	rjmp	.+292    	; 0x1620 <SEVSEG_voidDisplay+0x506>
			case 5:

				DIO_voidSetPin(SEG2_PINA,LOW);
    14fc:	60 e0       	ldi	r22, 0x00	; 0
    14fe:	88 e0       	ldi	r24, 0x08	; 8
    1500:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG2_PINB,HIGH);
    1504:	61 e0       	ldi	r22, 0x01	; 1
    1506:	89 e0       	ldi	r24, 0x09	; 9
    1508:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG2_PINC,LOW);
    150c:	60 e0       	ldi	r22, 0x00	; 0
    150e:	8a e0       	ldi	r24, 0x0A	; 10
    1510:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG2_PIND,LOW);
    1514:	60 e0       	ldi	r22, 0x00	; 0
    1516:	8b e0       	ldi	r24, 0x0B	; 11
    1518:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG2_PINE,HIGH);
    151c:	61 e0       	ldi	r22, 0x01	; 1
    151e:	8c e0       	ldi	r24, 0x0C	; 12
    1520:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG2_PINF,LOW);
    1524:	60 e0       	ldi	r22, 0x00	; 0
    1526:	8d e0       	ldi	r24, 0x0D	; 13
    1528:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG2_PING,LOW);
    152c:	60 e0       	ldi	r22, 0x00	; 0
    152e:	8e e0       	ldi	r24, 0x0E	; 14
    1530:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>

			break;
    1534:	75 c0       	rjmp	.+234    	; 0x1620 <SEVSEG_voidDisplay+0x506>
			case 6:

				DIO_voidSetPin(SEG2_PINA,LOW);
    1536:	60 e0       	ldi	r22, 0x00	; 0
    1538:	88 e0       	ldi	r24, 0x08	; 8
    153a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG2_PINB,HIGH);
    153e:	61 e0       	ldi	r22, 0x01	; 1
    1540:	89 e0       	ldi	r24, 0x09	; 9
    1542:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG2_PINC,LOW);
    1546:	60 e0       	ldi	r22, 0x00	; 0
    1548:	8a e0       	ldi	r24, 0x0A	; 10
    154a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG2_PIND,LOW);
    154e:	60 e0       	ldi	r22, 0x00	; 0
    1550:	8b e0       	ldi	r24, 0x0B	; 11
    1552:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG2_PINE,LOW);
    1556:	60 e0       	ldi	r22, 0x00	; 0
    1558:	8c e0       	ldi	r24, 0x0C	; 12
    155a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG2_PINF,LOW);
    155e:	60 e0       	ldi	r22, 0x00	; 0
    1560:	8d e0       	ldi	r24, 0x0D	; 13
    1562:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG2_PING,LOW);
    1566:	60 e0       	ldi	r22, 0x00	; 0
    1568:	8e e0       	ldi	r24, 0x0E	; 14
    156a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>

			break;
    156e:	58 c0       	rjmp	.+176    	; 0x1620 <SEVSEG_voidDisplay+0x506>
			case 7:

				DIO_voidSetPin(SEG2_PINA,LOW);
    1570:	60 e0       	ldi	r22, 0x00	; 0
    1572:	88 e0       	ldi	r24, 0x08	; 8
    1574:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG2_PINB,LOW);
    1578:	60 e0       	ldi	r22, 0x00	; 0
    157a:	89 e0       	ldi	r24, 0x09	; 9
    157c:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG2_PINC,LOW);
    1580:	60 e0       	ldi	r22, 0x00	; 0
    1582:	8a e0       	ldi	r24, 0x0A	; 10
    1584:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG2_PIND,HIGH);
    1588:	61 e0       	ldi	r22, 0x01	; 1
    158a:	8b e0       	ldi	r24, 0x0B	; 11
    158c:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG2_PINE,HIGH);
    1590:	61 e0       	ldi	r22, 0x01	; 1
    1592:	8c e0       	ldi	r24, 0x0C	; 12
    1594:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG2_PINF,HIGH);
    1598:	61 e0       	ldi	r22, 0x01	; 1
    159a:	8d e0       	ldi	r24, 0x0D	; 13
    159c:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG2_PING,HIGH);
    15a0:	61 e0       	ldi	r22, 0x01	; 1
    15a2:	8e e0       	ldi	r24, 0x0E	; 14
    15a4:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>

			break;
    15a8:	3b c0       	rjmp	.+118    	; 0x1620 <SEVSEG_voidDisplay+0x506>
			case 8:

				DIO_voidSetPin(SEG2_PINA,LOW);
    15aa:	60 e0       	ldi	r22, 0x00	; 0
    15ac:	88 e0       	ldi	r24, 0x08	; 8
    15ae:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG2_PINB,LOW);
    15b2:	60 e0       	ldi	r22, 0x00	; 0
    15b4:	89 e0       	ldi	r24, 0x09	; 9
    15b6:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG2_PINC,LOW);
    15ba:	60 e0       	ldi	r22, 0x00	; 0
    15bc:	8a e0       	ldi	r24, 0x0A	; 10
    15be:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG2_PIND,LOW);
    15c2:	60 e0       	ldi	r22, 0x00	; 0
    15c4:	8b e0       	ldi	r24, 0x0B	; 11
    15c6:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG2_PINE,LOW);
    15ca:	60 e0       	ldi	r22, 0x00	; 0
    15cc:	8c e0       	ldi	r24, 0x0C	; 12
    15ce:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG2_PINF,LOW);
    15d2:	60 e0       	ldi	r22, 0x00	; 0
    15d4:	8d e0       	ldi	r24, 0x0D	; 13
    15d6:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG2_PING,LOW);
    15da:	60 e0       	ldi	r22, 0x00	; 0
    15dc:	8e e0       	ldi	r24, 0x0E	; 14
    15de:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>

			break;
    15e2:	1e c0       	rjmp	.+60     	; 0x1620 <SEVSEG_voidDisplay+0x506>
			case 9:

				DIO_voidSetPin(SEG2_PINA,LOW);
    15e4:	60 e0       	ldi	r22, 0x00	; 0
    15e6:	88 e0       	ldi	r24, 0x08	; 8
    15e8:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG2_PINB,LOW);
    15ec:	60 e0       	ldi	r22, 0x00	; 0
    15ee:	89 e0       	ldi	r24, 0x09	; 9
    15f0:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG2_PINC,LOW);
    15f4:	60 e0       	ldi	r22, 0x00	; 0
    15f6:	8a e0       	ldi	r24, 0x0A	; 10
    15f8:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG2_PIND,LOW);
    15fc:	60 e0       	ldi	r22, 0x00	; 0
    15fe:	8b e0       	ldi	r24, 0x0B	; 11
    1600:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG2_PINE,LOW);
    1604:	60 e0       	ldi	r22, 0x00	; 0
    1606:	8c e0       	ldi	r24, 0x0C	; 12
    1608:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG2_PINF,HIGH);
    160c:	61 e0       	ldi	r22, 0x01	; 1
    160e:	8d e0       	ldi	r24, 0x0D	; 13
    1610:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
				DIO_voidSetPin(SEG2_PING,LOW);
    1614:	60 e0       	ldi	r22, 0x00	; 0
    1616:	8e e0       	ldi	r24, 0x0E	; 14
    1618:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
			break;
    161c:	01 c0       	rjmp	.+2      	; 0x1620 <SEVSEG_voidDisplay+0x506>

			break;


			}
		break;
    161e:	00 00       	nop

		}
}

#endif
}
    1620:	00 00       	nop
    1622:	0f 90       	pop	r0
    1624:	0f 90       	pop	r0
    1626:	df 91       	pop	r29
    1628:	cf 91       	pop	r28
    162a:	08 95       	ret

0000162c <SEVSEG_voidEnable>:


void SEVSEG_voidEnable(u8 SegNum){
    162c:	cf 93       	push	r28
    162e:	df 93       	push	r29
    1630:	1f 92       	push	r1
    1632:	cd b7       	in	r28, 0x3d	; 61
    1634:	de b7       	in	r29, 0x3e	; 62
    1636:	89 83       	std	Y+1, r24	; 0x01

	#if(SEGMENT_TYPE==COMMON_ANODE)
	{

		switch(SegNum){
    1638:	89 81       	ldd	r24, Y+1	; 0x01
    163a:	88 2f       	mov	r24, r24
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	81 30       	cpi	r24, 0x01	; 1
    1640:	91 05       	cpc	r25, r1
    1642:	19 f0       	breq	.+6      	; 0x164a <SEVSEG_voidEnable+0x1e>
    1644:	02 97       	sbiw	r24, 0x02	; 2
    1646:	31 f0       	breq	.+12     	; 0x1654 <SEVSEG_voidEnable+0x28>

	}
	#endif


}
    1648:	0a c0       	rjmp	.+20     	; 0x165e <SEVSEG_voidEnable+0x32>
	#if(SEGMENT_TYPE==COMMON_ANODE)
	{

		switch(SegNum){
		case SEG_1:
			DIO_voidSetPin(SEG1_PIN_ENABLE,HIGH);
    164a:	61 e0       	ldi	r22, 0x01	; 1
    164c:	87 e0       	ldi	r24, 0x07	; 7
    164e:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
		break;
    1652:	05 c0       	rjmp	.+10     	; 0x165e <SEVSEG_voidEnable+0x32>
		case SEG_2:
			DIO_voidSetPin(SEG1_PIN_ENABLE,HIGH);
    1654:	61 e0       	ldi	r22, 0x01	; 1
    1656:	87 e0       	ldi	r24, 0x07	; 7
    1658:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
		break;
    165c:	00 00       	nop

	}
	#endif


}
    165e:	00 00       	nop
    1660:	0f 90       	pop	r0
    1662:	df 91       	pop	r29
    1664:	cf 91       	pop	r28
    1666:	08 95       	ret

00001668 <SEVSEG_voidDisable>:

void SEVSEG_voidDisable(u8 SegNum)
{
    1668:	cf 93       	push	r28
    166a:	df 93       	push	r29
    166c:	1f 92       	push	r1
    166e:	cd b7       	in	r28, 0x3d	; 61
    1670:	de b7       	in	r29, 0x3e	; 62
    1672:	89 83       	std	Y+1, r24	; 0x01

	#if(SEGMENT_TYPE==COMMON_ANODE)
	{

			switch(SegNum){
    1674:	89 81       	ldd	r24, Y+1	; 0x01
    1676:	88 2f       	mov	r24, r24
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	81 30       	cpi	r24, 0x01	; 1
    167c:	91 05       	cpc	r25, r1
    167e:	19 f0       	breq	.+6      	; 0x1686 <SEVSEG_voidDisable+0x1e>
    1680:	02 97       	sbiw	r24, 0x02	; 2
    1682:	31 f0       	breq	.+12     	; 0x1690 <SEVSEG_voidDisable+0x28>

	}
	#endif


}
    1684:	0a c0       	rjmp	.+20     	; 0x169a <SEVSEG_voidDisable+0x32>
	#if(SEGMENT_TYPE==COMMON_ANODE)
	{

			switch(SegNum){
			case SEG_1:
				DIO_voidSetPin(SEG1_PIN_ENABLE,LOW);
    1686:	60 e0       	ldi	r22, 0x00	; 0
    1688:	87 e0       	ldi	r24, 0x07	; 7
    168a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
			break;
    168e:	05 c0       	rjmp	.+10     	; 0x169a <SEVSEG_voidDisable+0x32>
			case SEG_2:
				DIO_voidSetPin(SEG1_PIN_ENABLE,LOW);
    1690:	60 e0       	ldi	r22, 0x00	; 0
    1692:	87 e0       	ldi	r24, 0x07	; 7
    1694:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_voidSetPin>
			break;
    1698:	00 00       	nop

	}
	#endif


}
    169a:	00 00       	nop
    169c:	0f 90       	pop	r0
    169e:	df 91       	pop	r29
    16a0:	cf 91       	pop	r28
    16a2:	08 95       	ret

000016a4 <SWITCH_voidInitialize>:
#include "SWITCH_priv.h"
#include "SWITCH_config.h"
#include "SWITCH_int.h"


void SWITCH_voidInitialize(void){
    16a4:	cf 93       	push	r28
    16a6:	df 93       	push	r29
    16a8:	cd b7       	in	r28, 0x3d	; 61
    16aa:	de b7       	in	r29, 0x3e	; 62

}
    16ac:	00 00       	nop
    16ae:	df 91       	pop	r29
    16b0:	cf 91       	pop	r28
    16b2:	08 95       	ret

000016b4 <SWITCH_u8State>:

u8 SWITCH_u8State(u8 SwitchNum){
    16b4:	cf 93       	push	r28
    16b6:	df 93       	push	r29
    16b8:	00 d0       	rcall	.+0      	; 0x16ba <SWITCH_u8State+0x6>
    16ba:	cd b7       	in	r28, 0x3d	; 61
    16bc:	de b7       	in	r29, 0x3e	; 62
    16be:	8a 83       	std	Y+2, r24	; 0x02
	u8 ret;

	switch(SwitchNum){
    16c0:	8a 81       	ldd	r24, Y+2	; 0x02
    16c2:	88 2f       	mov	r24, r24
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	09 2e       	mov	r0, r25
    16c8:	00 0c       	add	r0, r0
    16ca:	aa 0b       	sbc	r26, r26
    16cc:	bb 0b       	sbc	r27, r27
    16ce:	40 e0       	ldi	r20, 0x00	; 0
    16d0:	50 e0       	ldi	r21, 0x00	; 0
    16d2:	2f e1       	ldi	r18, 0x1F	; 31
    16d4:	30 e0       	ldi	r19, 0x00	; 0
    16d6:	84 1b       	sub	r24, r20
    16d8:	95 0b       	sbc	r25, r21
    16da:	28 17       	cp	r18, r24
    16dc:	39 07       	cpc	r19, r25
    16de:	08 f4       	brcc	.+2      	; 0x16e2 <SWITCH_u8State+0x2e>
    16e0:	44 c2       	rjmp	.+1160   	; 0x1b6a <SWITCH_u8State+0x4b6>
    16e2:	82 56       	subi	r24, 0x62	; 98
    16e4:	9f 4f       	sbci	r25, 0xFF	; 255
    16e6:	fc 01       	movw	r30, r24
    16e8:	0c 94 3c 10 	jmp	0x2078	; 0x2078 <__tablejump2__>
				ret=ON;
			}else if(DIO_u8GetPin(SWITCHPIN_0)==LOW){
				ret=OFF;
			}
		}else if(SWITCH_0_mode==PULLUP){
			if(DIO_u8GetPin(SWITCHPIN_0)==HIGH){
    16ec:	80 e0       	ldi	r24, 0x00	; 0
    16ee:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_u8GetPin>
    16f2:	81 30       	cpi	r24, 0x01	; 1
    16f4:	11 f4       	brne	.+4      	; 0x16fa <SWITCH_u8State+0x46>
				ret=OFF;
    16f6:	19 82       	std	Y+1, r1	; 0x01
			}else if(DIO_u8GetPin(SWITCHPIN_0)==LOW){
				ret=ON;
			}
		}
	break;
    16f8:	f9 c1       	rjmp	.+1010   	; 0x1aec <SWITCH_u8State+0x438>
				ret=OFF;
			}
		}else if(SWITCH_0_mode==PULLUP){
			if(DIO_u8GetPin(SWITCHPIN_0)==HIGH){
				ret=OFF;
			}else if(DIO_u8GetPin(SWITCHPIN_0)==LOW){
    16fa:	80 e0       	ldi	r24, 0x00	; 0
    16fc:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_u8GetPin>
    1700:	88 23       	and	r24, r24
    1702:	09 f0       	breq	.+2      	; 0x1706 <SWITCH_u8State+0x52>
    1704:	f3 c1       	rjmp	.+998    	; 0x1aec <SWITCH_u8State+0x438>
				ret=ON;
    1706:	81 e0       	ldi	r24, 0x01	; 1
    1708:	89 83       	std	Y+1, r24	; 0x01
			}
		}
	break;
    170a:	f0 c1       	rjmp	.+992    	; 0x1aec <SWITCH_u8State+0x438>
				ret=ON;
			}else if(DIO_u8GetPin(SWITCHPIN_1)==LOW){
				ret=OFF;
			}
		}else if(SWITCH_1_mode==PULLUP){
			if(DIO_u8GetPin(SWITCHPIN_1)==HIGH){
    170c:	81 e0       	ldi	r24, 0x01	; 1
    170e:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_u8GetPin>
    1712:	81 30       	cpi	r24, 0x01	; 1
    1714:	11 f4       	brne	.+4      	; 0x171a <SWITCH_u8State+0x66>
				ret=OFF;
    1716:	19 82       	std	Y+1, r1	; 0x01
			}else if(DIO_u8GetPin(SWITCHPIN_1)==LOW){
				ret=ON;
			}
		}
	break;
    1718:	eb c1       	rjmp	.+982    	; 0x1af0 <SWITCH_u8State+0x43c>
				ret=OFF;
			}
		}else if(SWITCH_1_mode==PULLUP){
			if(DIO_u8GetPin(SWITCHPIN_1)==HIGH){
				ret=OFF;
			}else if(DIO_u8GetPin(SWITCHPIN_1)==LOW){
    171a:	81 e0       	ldi	r24, 0x01	; 1
    171c:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_u8GetPin>
    1720:	88 23       	and	r24, r24
    1722:	09 f0       	breq	.+2      	; 0x1726 <SWITCH_u8State+0x72>
    1724:	e5 c1       	rjmp	.+970    	; 0x1af0 <SWITCH_u8State+0x43c>
				ret=ON;
    1726:	81 e0       	ldi	r24, 0x01	; 1
    1728:	89 83       	std	Y+1, r24	; 0x01
			}
		}
	break;
    172a:	e2 c1       	rjmp	.+964    	; 0x1af0 <SWITCH_u8State+0x43c>
				ret=ON;
			}else if(DIO_u8GetPin(SWITCHPIN_2)==LOW){
				ret=OFF;
			}
		}else if(SWITCH_2_mode==PULLUP){
			if(DIO_u8GetPin(SWITCHPIN_2)==HIGH){
    172c:	82 e0       	ldi	r24, 0x02	; 2
    172e:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_u8GetPin>
    1732:	81 30       	cpi	r24, 0x01	; 1
    1734:	11 f4       	brne	.+4      	; 0x173a <SWITCH_u8State+0x86>
				ret=OFF;
    1736:	19 82       	std	Y+1, r1	; 0x01
			}else if(DIO_u8GetPin(SWITCHPIN_2)==LOW){
				ret=ON;
			}
		}
	break;
    1738:	dd c1       	rjmp	.+954    	; 0x1af4 <SWITCH_u8State+0x440>
				ret=OFF;
			}
		}else if(SWITCH_2_mode==PULLUP){
			if(DIO_u8GetPin(SWITCHPIN_2)==HIGH){
				ret=OFF;
			}else if(DIO_u8GetPin(SWITCHPIN_2)==LOW){
    173a:	82 e0       	ldi	r24, 0x02	; 2
    173c:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_u8GetPin>
    1740:	88 23       	and	r24, r24
    1742:	09 f0       	breq	.+2      	; 0x1746 <SWITCH_u8State+0x92>
    1744:	d7 c1       	rjmp	.+942    	; 0x1af4 <SWITCH_u8State+0x440>
				ret=ON;
    1746:	81 e0       	ldi	r24, 0x01	; 1
    1748:	89 83       	std	Y+1, r24	; 0x01
			}
		}
	break;
    174a:	d4 c1       	rjmp	.+936    	; 0x1af4 <SWITCH_u8State+0x440>
				ret=ON;
			}else if(DIO_u8GetPin(SWITCHPIN_3)==LOW){
				ret=OFF;
			}
		}else if(SWITCH_3_mode==PULLUP){
			if(DIO_u8GetPin(SWITCHPIN_3)==HIGH){
    174c:	83 e0       	ldi	r24, 0x03	; 3
    174e:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_u8GetPin>
    1752:	81 30       	cpi	r24, 0x01	; 1
    1754:	11 f4       	brne	.+4      	; 0x175a <SWITCH_u8State+0xa6>
				ret=OFF;
    1756:	19 82       	std	Y+1, r1	; 0x01
			}else if(DIO_u8GetPin(SWITCHPIN_3)==LOW){
				ret=ON;
			}
		}
	break;
    1758:	cf c1       	rjmp	.+926    	; 0x1af8 <SWITCH_u8State+0x444>
				ret=OFF;
			}
		}else if(SWITCH_3_mode==PULLUP){
			if(DIO_u8GetPin(SWITCHPIN_3)==HIGH){
				ret=OFF;
			}else if(DIO_u8GetPin(SWITCHPIN_3)==LOW){
    175a:	83 e0       	ldi	r24, 0x03	; 3
    175c:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_u8GetPin>
    1760:	88 23       	and	r24, r24
    1762:	09 f0       	breq	.+2      	; 0x1766 <SWITCH_u8State+0xb2>
    1764:	c9 c1       	rjmp	.+914    	; 0x1af8 <SWITCH_u8State+0x444>
				ret=ON;
    1766:	81 e0       	ldi	r24, 0x01	; 1
    1768:	89 83       	std	Y+1, r24	; 0x01
			}
		}
	break;
    176a:	c6 c1       	rjmp	.+908    	; 0x1af8 <SWITCH_u8State+0x444>
				ret=ON;
			}else if(DIO_u8GetPin(SWITCHPIN_4)==LOW){
				ret=OFF;
			}
		}else if(SWITCH_4_mode==PULLUP){
			if(DIO_u8GetPin(SWITCHPIN_4)==HIGH){
    176c:	84 e0       	ldi	r24, 0x04	; 4
    176e:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_u8GetPin>
    1772:	81 30       	cpi	r24, 0x01	; 1
    1774:	11 f4       	brne	.+4      	; 0x177a <SWITCH_u8State+0xc6>
				ret=OFF;
    1776:	19 82       	std	Y+1, r1	; 0x01
			}else if(DIO_u8GetPin(SWITCHPIN_4)==LOW){
				ret=ON;
			}
		}
	break;
    1778:	c1 c1       	rjmp	.+898    	; 0x1afc <SWITCH_u8State+0x448>
				ret=OFF;
			}
		}else if(SWITCH_4_mode==PULLUP){
			if(DIO_u8GetPin(SWITCHPIN_4)==HIGH){
				ret=OFF;
			}else if(DIO_u8GetPin(SWITCHPIN_4)==LOW){
    177a:	84 e0       	ldi	r24, 0x04	; 4
    177c:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_u8GetPin>
    1780:	88 23       	and	r24, r24
    1782:	09 f0       	breq	.+2      	; 0x1786 <SWITCH_u8State+0xd2>
    1784:	bb c1       	rjmp	.+886    	; 0x1afc <SWITCH_u8State+0x448>
				ret=ON;
    1786:	81 e0       	ldi	r24, 0x01	; 1
    1788:	89 83       	std	Y+1, r24	; 0x01
			}
		}
	break;
    178a:	b8 c1       	rjmp	.+880    	; 0x1afc <SWITCH_u8State+0x448>
				ret=ON;
			}else if(DIO_u8GetPin(SWITCHPIN_5)==LOW){
				ret=OFF;
			}
		}else if(SWITCH_5_mode==PULLUP){
			if(DIO_u8GetPin(SWITCHPIN_5)==HIGH){
    178c:	85 e0       	ldi	r24, 0x05	; 5
    178e:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_u8GetPin>
    1792:	81 30       	cpi	r24, 0x01	; 1
    1794:	11 f4       	brne	.+4      	; 0x179a <SWITCH_u8State+0xe6>
				ret=OFF;
    1796:	19 82       	std	Y+1, r1	; 0x01
			}else if(DIO_u8GetPin(SWITCHPIN_5)==LOW){
				ret=ON;
			}
		}
	break;
    1798:	b3 c1       	rjmp	.+870    	; 0x1b00 <SWITCH_u8State+0x44c>
				ret=OFF;
			}
		}else if(SWITCH_5_mode==PULLUP){
			if(DIO_u8GetPin(SWITCHPIN_5)==HIGH){
				ret=OFF;
			}else if(DIO_u8GetPin(SWITCHPIN_5)==LOW){
    179a:	85 e0       	ldi	r24, 0x05	; 5
    179c:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_u8GetPin>
    17a0:	88 23       	and	r24, r24
    17a2:	09 f0       	breq	.+2      	; 0x17a6 <SWITCH_u8State+0xf2>
    17a4:	ad c1       	rjmp	.+858    	; 0x1b00 <SWITCH_u8State+0x44c>
				ret=ON;
    17a6:	81 e0       	ldi	r24, 0x01	; 1
    17a8:	89 83       	std	Y+1, r24	; 0x01
			}
		}
	break;
    17aa:	aa c1       	rjmp	.+852    	; 0x1b00 <SWITCH_u8State+0x44c>
				ret=ON;
			}else if(DIO_u8GetPin(SWITCHPIN_6)==LOW){
				ret=OFF;
			}
		}else if(SWITCH_6_mode==PULLUP){
			if(DIO_u8GetPin(SWITCHPIN_6)==HIGH){
    17ac:	86 e0       	ldi	r24, 0x06	; 6
    17ae:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_u8GetPin>
    17b2:	81 30       	cpi	r24, 0x01	; 1
    17b4:	11 f4       	brne	.+4      	; 0x17ba <SWITCH_u8State+0x106>
				ret=OFF;
    17b6:	19 82       	std	Y+1, r1	; 0x01
			}else if(DIO_u8GetPin(SWITCHPIN_6)==LOW){
				ret=ON;
			}
		}
	break;
    17b8:	a5 c1       	rjmp	.+842    	; 0x1b04 <SWITCH_u8State+0x450>
				ret=OFF;
			}
		}else if(SWITCH_6_mode==PULLUP){
			if(DIO_u8GetPin(SWITCHPIN_6)==HIGH){
				ret=OFF;
			}else if(DIO_u8GetPin(SWITCHPIN_6)==LOW){
    17ba:	86 e0       	ldi	r24, 0x06	; 6
    17bc:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_u8GetPin>
    17c0:	88 23       	and	r24, r24
    17c2:	09 f0       	breq	.+2      	; 0x17c6 <SWITCH_u8State+0x112>
    17c4:	9f c1       	rjmp	.+830    	; 0x1b04 <SWITCH_u8State+0x450>
				ret=ON;
    17c6:	81 e0       	ldi	r24, 0x01	; 1
    17c8:	89 83       	std	Y+1, r24	; 0x01
			}
		}
	break;
    17ca:	9c c1       	rjmp	.+824    	; 0x1b04 <SWITCH_u8State+0x450>
				ret=ON;
			}else if(DIO_u8GetPin(SWITCHPIN_7)==LOW){
				ret=OFF;
			}
		}else if(SWITCH_7_mode==PULLUP){
			if(DIO_u8GetPin(SWITCHPIN_7)==HIGH){
    17cc:	87 e0       	ldi	r24, 0x07	; 7
    17ce:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_u8GetPin>
    17d2:	81 30       	cpi	r24, 0x01	; 1
    17d4:	11 f4       	brne	.+4      	; 0x17da <SWITCH_u8State+0x126>
				ret=OFF;
    17d6:	19 82       	std	Y+1, r1	; 0x01
			}else if(DIO_u8GetPin(SWITCHPIN_7)==LOW){
				ret=ON;
			}
		}
	break;
    17d8:	97 c1       	rjmp	.+814    	; 0x1b08 <SWITCH_u8State+0x454>
				ret=OFF;
			}
		}else if(SWITCH_7_mode==PULLUP){
			if(DIO_u8GetPin(SWITCHPIN_7)==HIGH){
				ret=OFF;
			}else if(DIO_u8GetPin(SWITCHPIN_7)==LOW){
    17da:	87 e0       	ldi	r24, 0x07	; 7
    17dc:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_u8GetPin>
    17e0:	88 23       	and	r24, r24
    17e2:	09 f0       	breq	.+2      	; 0x17e6 <SWITCH_u8State+0x132>
    17e4:	91 c1       	rjmp	.+802    	; 0x1b08 <SWITCH_u8State+0x454>
				ret=ON;
    17e6:	81 e0       	ldi	r24, 0x01	; 1
    17e8:	89 83       	std	Y+1, r24	; 0x01
			}
		}
	break;
    17ea:	8e c1       	rjmp	.+796    	; 0x1b08 <SWITCH_u8State+0x454>
				ret=ON;
			}else if(DIO_u8GetPin(SWITCHPIN_8)==LOW){
				ret=OFF;
			}
		}else if(SWITCH_8_mode==PULLUP){
			if(DIO_u8GetPin(SWITCHPIN_8)==HIGH){
    17ec:	88 e0       	ldi	r24, 0x08	; 8
    17ee:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_u8GetPin>
    17f2:	81 30       	cpi	r24, 0x01	; 1
    17f4:	11 f4       	brne	.+4      	; 0x17fa <SWITCH_u8State+0x146>
				ret=OFF;
    17f6:	19 82       	std	Y+1, r1	; 0x01
			}else if(DIO_u8GetPin(SWITCHPIN_8)==LOW){
				ret=ON;
			}
		}
	break;
    17f8:	89 c1       	rjmp	.+786    	; 0x1b0c <SWITCH_u8State+0x458>
				ret=OFF;
			}
		}else if(SWITCH_8_mode==PULLUP){
			if(DIO_u8GetPin(SWITCHPIN_8)==HIGH){
				ret=OFF;
			}else if(DIO_u8GetPin(SWITCHPIN_8)==LOW){
    17fa:	88 e0       	ldi	r24, 0x08	; 8
    17fc:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_u8GetPin>
    1800:	88 23       	and	r24, r24
    1802:	09 f0       	breq	.+2      	; 0x1806 <SWITCH_u8State+0x152>
    1804:	83 c1       	rjmp	.+774    	; 0x1b0c <SWITCH_u8State+0x458>
				ret=ON;
    1806:	81 e0       	ldi	r24, 0x01	; 1
    1808:	89 83       	std	Y+1, r24	; 0x01
			}
		}
	break;
    180a:	80 c1       	rjmp	.+768    	; 0x1b0c <SWITCH_u8State+0x458>
				ret=ON;
			}else if(DIO_u8GetPin(SWITCHPIN_9)==LOW){
				ret=OFF;
			}
		}else if(SWITCH_9_mode==PULLUP){
			if(DIO_u8GetPin(SWITCHPIN_9)==HIGH){
    180c:	89 e0       	ldi	r24, 0x09	; 9
    180e:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_u8GetPin>
    1812:	81 30       	cpi	r24, 0x01	; 1
    1814:	11 f4       	brne	.+4      	; 0x181a <SWITCH_u8State+0x166>
				ret=OFF;
    1816:	19 82       	std	Y+1, r1	; 0x01
			}else if(DIO_u8GetPin(SWITCHPIN_9)==LOW){
				ret=ON;
			}
		}
	break;
    1818:	7b c1       	rjmp	.+758    	; 0x1b10 <SWITCH_u8State+0x45c>
				ret=OFF;
			}
		}else if(SWITCH_9_mode==PULLUP){
			if(DIO_u8GetPin(SWITCHPIN_9)==HIGH){
				ret=OFF;
			}else if(DIO_u8GetPin(SWITCHPIN_9)==LOW){
    181a:	89 e0       	ldi	r24, 0x09	; 9
    181c:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_u8GetPin>
    1820:	88 23       	and	r24, r24
    1822:	09 f0       	breq	.+2      	; 0x1826 <SWITCH_u8State+0x172>
    1824:	75 c1       	rjmp	.+746    	; 0x1b10 <SWITCH_u8State+0x45c>
				ret=ON;
    1826:	81 e0       	ldi	r24, 0x01	; 1
    1828:	89 83       	std	Y+1, r24	; 0x01
			}
		}
	break;
    182a:	72 c1       	rjmp	.+740    	; 0x1b10 <SWITCH_u8State+0x45c>
				ret=ON;
			}else if(DIO_u8GetPin(SWITCHPIN_10)==LOW){
				ret=OFF;
			}
		}else if(SWITCH_10_mode==PULLUP){
			if(DIO_u8GetPin(SWITCHPIN_10)==HIGH){
    182c:	8a e0       	ldi	r24, 0x0A	; 10
    182e:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_u8GetPin>
    1832:	81 30       	cpi	r24, 0x01	; 1
    1834:	11 f4       	brne	.+4      	; 0x183a <SWITCH_u8State+0x186>
				ret=OFF;
    1836:	19 82       	std	Y+1, r1	; 0x01
			}else if(DIO_u8GetPin(SWITCHPIN_10)==LOW){
				ret=ON;
			}
		}
	break;
    1838:	6d c1       	rjmp	.+730    	; 0x1b14 <SWITCH_u8State+0x460>
				ret=OFF;
			}
		}else if(SWITCH_10_mode==PULLUP){
			if(DIO_u8GetPin(SWITCHPIN_10)==HIGH){
				ret=OFF;
			}else if(DIO_u8GetPin(SWITCHPIN_10)==LOW){
    183a:	8a e0       	ldi	r24, 0x0A	; 10
    183c:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_u8GetPin>
    1840:	88 23       	and	r24, r24
    1842:	09 f0       	breq	.+2      	; 0x1846 <SWITCH_u8State+0x192>
    1844:	67 c1       	rjmp	.+718    	; 0x1b14 <SWITCH_u8State+0x460>
				ret=ON;
    1846:	81 e0       	ldi	r24, 0x01	; 1
    1848:	89 83       	std	Y+1, r24	; 0x01
			}
		}
	break;
    184a:	64 c1       	rjmp	.+712    	; 0x1b14 <SWITCH_u8State+0x460>
				ret=ON;
			}else if(DIO_u8GetPin(SWITCHPIN_11)==LOW){
				ret=OFF;
			}
		}else if(SWITCH_11_mode==PULLUP){
			if(DIO_u8GetPin(SWITCHPIN_11)==HIGH){
    184c:	8b e0       	ldi	r24, 0x0B	; 11
    184e:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_u8GetPin>
    1852:	81 30       	cpi	r24, 0x01	; 1
    1854:	11 f4       	brne	.+4      	; 0x185a <SWITCH_u8State+0x1a6>
				ret=OFF;
    1856:	19 82       	std	Y+1, r1	; 0x01
			}else if(DIO_u8GetPin(SWITCHPIN_11)==LOW){
				ret=ON;
			}
		}
	break;
    1858:	5f c1       	rjmp	.+702    	; 0x1b18 <SWITCH_u8State+0x464>
				ret=OFF;
			}
		}else if(SWITCH_11_mode==PULLUP){
			if(DIO_u8GetPin(SWITCHPIN_11)==HIGH){
				ret=OFF;
			}else if(DIO_u8GetPin(SWITCHPIN_11)==LOW){
    185a:	8b e0       	ldi	r24, 0x0B	; 11
    185c:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_u8GetPin>
    1860:	88 23       	and	r24, r24
    1862:	09 f0       	breq	.+2      	; 0x1866 <SWITCH_u8State+0x1b2>
    1864:	59 c1       	rjmp	.+690    	; 0x1b18 <SWITCH_u8State+0x464>
				ret=ON;
    1866:	81 e0       	ldi	r24, 0x01	; 1
    1868:	89 83       	std	Y+1, r24	; 0x01
			}
		}
	break;
    186a:	56 c1       	rjmp	.+684    	; 0x1b18 <SWITCH_u8State+0x464>
				ret=ON;
			}else if(DIO_u8GetPin(SWITCHPIN_12)==LOW){
				ret=OFF;
			}
		}else if(SWITCH_12_mode==PULLUP){
			if(DIO_u8GetPin(SWITCHPIN_12)==HIGH){
    186c:	8c e0       	ldi	r24, 0x0C	; 12
    186e:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_u8GetPin>
    1872:	81 30       	cpi	r24, 0x01	; 1
    1874:	11 f4       	brne	.+4      	; 0x187a <SWITCH_u8State+0x1c6>
				ret=OFF;
    1876:	19 82       	std	Y+1, r1	; 0x01
			}else if(DIO_u8GetPin(SWITCHPIN_12)==LOW){
				ret=ON;
			}
		}
	break;
    1878:	51 c1       	rjmp	.+674    	; 0x1b1c <SWITCH_u8State+0x468>
				ret=OFF;
			}
		}else if(SWITCH_12_mode==PULLUP){
			if(DIO_u8GetPin(SWITCHPIN_12)==HIGH){
				ret=OFF;
			}else if(DIO_u8GetPin(SWITCHPIN_12)==LOW){
    187a:	8c e0       	ldi	r24, 0x0C	; 12
    187c:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_u8GetPin>
    1880:	88 23       	and	r24, r24
    1882:	09 f0       	breq	.+2      	; 0x1886 <SWITCH_u8State+0x1d2>
    1884:	4b c1       	rjmp	.+662    	; 0x1b1c <SWITCH_u8State+0x468>
				ret=ON;
    1886:	81 e0       	ldi	r24, 0x01	; 1
    1888:	89 83       	std	Y+1, r24	; 0x01
			}
		}
	break;
    188a:	48 c1       	rjmp	.+656    	; 0x1b1c <SWITCH_u8State+0x468>
				ret=ON;
			}else if(DIO_u8GetPin(SWITCHPIN_13)==LOW){
				ret=OFF;
			}
		}else if(SWITCH_13_mode==PULLUP){
			if(DIO_u8GetPin(SWITCHPIN_13)==HIGH){
    188c:	8d e0       	ldi	r24, 0x0D	; 13
    188e:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_u8GetPin>
    1892:	81 30       	cpi	r24, 0x01	; 1
    1894:	11 f4       	brne	.+4      	; 0x189a <SWITCH_u8State+0x1e6>
				ret=OFF;
    1896:	19 82       	std	Y+1, r1	; 0x01
			}else if(DIO_u8GetPin(SWITCHPIN_13)==LOW){
				ret=ON;
			}
		}
	break;
    1898:	43 c1       	rjmp	.+646    	; 0x1b20 <SWITCH_u8State+0x46c>
				ret=OFF;
			}
		}else if(SWITCH_13_mode==PULLUP){
			if(DIO_u8GetPin(SWITCHPIN_13)==HIGH){
				ret=OFF;
			}else if(DIO_u8GetPin(SWITCHPIN_13)==LOW){
    189a:	8d e0       	ldi	r24, 0x0D	; 13
    189c:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_u8GetPin>
    18a0:	88 23       	and	r24, r24
    18a2:	09 f0       	breq	.+2      	; 0x18a6 <SWITCH_u8State+0x1f2>
    18a4:	3d c1       	rjmp	.+634    	; 0x1b20 <SWITCH_u8State+0x46c>
				ret=ON;
    18a6:	81 e0       	ldi	r24, 0x01	; 1
    18a8:	89 83       	std	Y+1, r24	; 0x01
			}
		}
	break;
    18aa:	3a c1       	rjmp	.+628    	; 0x1b20 <SWITCH_u8State+0x46c>
				ret=ON;
			}else if(DIO_u8GetPin(SWITCHPIN_14)==LOW){
				ret=OFF;
			}
		}else if(SWITCH_14_mode==PULLUP){
			if(DIO_u8GetPin(SWITCHPIN_14)==HIGH){
    18ac:	8e e0       	ldi	r24, 0x0E	; 14
    18ae:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_u8GetPin>
    18b2:	81 30       	cpi	r24, 0x01	; 1
    18b4:	11 f4       	brne	.+4      	; 0x18ba <SWITCH_u8State+0x206>
				ret=OFF;
    18b6:	19 82       	std	Y+1, r1	; 0x01
			}else if(DIO_u8GetPin(SWITCHPIN_14)==LOW){
				ret=ON;
			}
		}
	break;
    18b8:	35 c1       	rjmp	.+618    	; 0x1b24 <SWITCH_u8State+0x470>
				ret=OFF;
			}
		}else if(SWITCH_14_mode==PULLUP){
			if(DIO_u8GetPin(SWITCHPIN_14)==HIGH){
				ret=OFF;
			}else if(DIO_u8GetPin(SWITCHPIN_14)==LOW){
    18ba:	8e e0       	ldi	r24, 0x0E	; 14
    18bc:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_u8GetPin>
    18c0:	88 23       	and	r24, r24
    18c2:	09 f0       	breq	.+2      	; 0x18c6 <SWITCH_u8State+0x212>
    18c4:	2f c1       	rjmp	.+606    	; 0x1b24 <SWITCH_u8State+0x470>
				ret=ON;
    18c6:	81 e0       	ldi	r24, 0x01	; 1
    18c8:	89 83       	std	Y+1, r24	; 0x01
			}
		}
	break;
    18ca:	2c c1       	rjmp	.+600    	; 0x1b24 <SWITCH_u8State+0x470>
				ret=ON;
			}else if(DIO_u8GetPin(SWITCHPIN_15)==LOW){
				ret=OFF;
			}
		}else if(SWITCH_15_mode==PULLUP){
			if(DIO_u8GetPin(SWITCHPIN_15)==HIGH){
    18cc:	8f e0       	ldi	r24, 0x0F	; 15
    18ce:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_u8GetPin>
    18d2:	81 30       	cpi	r24, 0x01	; 1
    18d4:	11 f4       	brne	.+4      	; 0x18da <SWITCH_u8State+0x226>
				ret=OFF;
    18d6:	19 82       	std	Y+1, r1	; 0x01
			}else if(DIO_u8GetPin(SWITCHPIN_15)==LOW){
				ret=ON;
			}
		}
	break;
    18d8:	27 c1       	rjmp	.+590    	; 0x1b28 <SWITCH_u8State+0x474>
				ret=OFF;
			}
		}else if(SWITCH_15_mode==PULLUP){
			if(DIO_u8GetPin(SWITCHPIN_15)==HIGH){
				ret=OFF;
			}else if(DIO_u8GetPin(SWITCHPIN_15)==LOW){
    18da:	8f e0       	ldi	r24, 0x0F	; 15
    18dc:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_u8GetPin>
    18e0:	88 23       	and	r24, r24
    18e2:	09 f0       	breq	.+2      	; 0x18e6 <SWITCH_u8State+0x232>
    18e4:	21 c1       	rjmp	.+578    	; 0x1b28 <SWITCH_u8State+0x474>
				ret=ON;
    18e6:	81 e0       	ldi	r24, 0x01	; 1
    18e8:	89 83       	std	Y+1, r24	; 0x01
			}
		}
	break;
    18ea:	1e c1       	rjmp	.+572    	; 0x1b28 <SWITCH_u8State+0x474>
				ret=ON;
			}else if(DIO_u8GetPin(SWITCHPIN_16)==LOW){
				ret=OFF;
			}
		}else if(SWITCH_16_mode==PULLUP){
			if(DIO_u8GetPin(SWITCHPIN_16)==HIGH){
    18ec:	80 e1       	ldi	r24, 0x10	; 16
    18ee:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_u8GetPin>
    18f2:	81 30       	cpi	r24, 0x01	; 1
    18f4:	11 f4       	brne	.+4      	; 0x18fa <SWITCH_u8State+0x246>
				ret=OFF;
    18f6:	19 82       	std	Y+1, r1	; 0x01
			}else if(DIO_u8GetPin(SWITCHPIN_16)==LOW){
				ret=ON;
			}
		}
	break;
    18f8:	19 c1       	rjmp	.+562    	; 0x1b2c <SWITCH_u8State+0x478>
				ret=OFF;
			}
		}else if(SWITCH_16_mode==PULLUP){
			if(DIO_u8GetPin(SWITCHPIN_16)==HIGH){
				ret=OFF;
			}else if(DIO_u8GetPin(SWITCHPIN_16)==LOW){
    18fa:	80 e1       	ldi	r24, 0x10	; 16
    18fc:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_u8GetPin>
    1900:	88 23       	and	r24, r24
    1902:	09 f0       	breq	.+2      	; 0x1906 <SWITCH_u8State+0x252>
    1904:	13 c1       	rjmp	.+550    	; 0x1b2c <SWITCH_u8State+0x478>
				ret=ON;
    1906:	81 e0       	ldi	r24, 0x01	; 1
    1908:	89 83       	std	Y+1, r24	; 0x01
			}
		}
	break;
    190a:	10 c1       	rjmp	.+544    	; 0x1b2c <SWITCH_u8State+0x478>
				ret=ON;
			}else if(DIO_u8GetPin(SWITCHPIN_17)==LOW){
				ret=OFF;
			}
		}else if(SWITCH_17_mode==PULLUP){
			if(DIO_u8GetPin(SWITCHPIN_17)==HIGH){
    190c:	81 e1       	ldi	r24, 0x11	; 17
    190e:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_u8GetPin>
    1912:	81 30       	cpi	r24, 0x01	; 1
    1914:	11 f4       	brne	.+4      	; 0x191a <SWITCH_u8State+0x266>
				ret=OFF;
    1916:	19 82       	std	Y+1, r1	; 0x01
			}else if(DIO_u8GetPin(SWITCHPIN_17)==LOW){
				ret=ON;
			}
		}
	break;
    1918:	0b c1       	rjmp	.+534    	; 0x1b30 <SWITCH_u8State+0x47c>
				ret=OFF;
			}
		}else if(SWITCH_17_mode==PULLUP){
			if(DIO_u8GetPin(SWITCHPIN_17)==HIGH){
				ret=OFF;
			}else if(DIO_u8GetPin(SWITCHPIN_17)==LOW){
    191a:	81 e1       	ldi	r24, 0x11	; 17
    191c:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_u8GetPin>
    1920:	88 23       	and	r24, r24
    1922:	09 f0       	breq	.+2      	; 0x1926 <SWITCH_u8State+0x272>
    1924:	05 c1       	rjmp	.+522    	; 0x1b30 <SWITCH_u8State+0x47c>
				ret=ON;
    1926:	81 e0       	ldi	r24, 0x01	; 1
    1928:	89 83       	std	Y+1, r24	; 0x01
			}
		}
	break;
    192a:	02 c1       	rjmp	.+516    	; 0x1b30 <SWITCH_u8State+0x47c>
				ret=ON;
			}else if(DIO_u8GetPin(SWITCHPIN_18)==LOW){
				ret=OFF;
			}
		}else if(SWITCH_18_mode==PULLUP){
			if(DIO_u8GetPin(SWITCHPIN_18)==HIGH){
    192c:	82 e1       	ldi	r24, 0x12	; 18
    192e:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_u8GetPin>
    1932:	81 30       	cpi	r24, 0x01	; 1
    1934:	11 f4       	brne	.+4      	; 0x193a <SWITCH_u8State+0x286>
				ret=OFF;
    1936:	19 82       	std	Y+1, r1	; 0x01
			}else if(DIO_u8GetPin(SWITCHPIN_18)==LOW){
				ret=ON;
			}
		}
	break;
    1938:	fd c0       	rjmp	.+506    	; 0x1b34 <SWITCH_u8State+0x480>
				ret=OFF;
			}
		}else if(SWITCH_18_mode==PULLUP){
			if(DIO_u8GetPin(SWITCHPIN_18)==HIGH){
				ret=OFF;
			}else if(DIO_u8GetPin(SWITCHPIN_18)==LOW){
    193a:	82 e1       	ldi	r24, 0x12	; 18
    193c:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_u8GetPin>
    1940:	88 23       	and	r24, r24
    1942:	09 f0       	breq	.+2      	; 0x1946 <SWITCH_u8State+0x292>
    1944:	f7 c0       	rjmp	.+494    	; 0x1b34 <SWITCH_u8State+0x480>
				ret=ON;
    1946:	81 e0       	ldi	r24, 0x01	; 1
    1948:	89 83       	std	Y+1, r24	; 0x01
			}
		}
	break;
    194a:	f4 c0       	rjmp	.+488    	; 0x1b34 <SWITCH_u8State+0x480>
				ret=ON;
			}else if(DIO_u8GetPin(SWITCHPIN_19)==LOW){
				ret=OFF;
			}
		}else if(SWITCH_19_mode==PULLUP){
			if(DIO_u8GetPin(SWITCHPIN_19)==HIGH){
    194c:	83 e1       	ldi	r24, 0x13	; 19
    194e:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_u8GetPin>
    1952:	81 30       	cpi	r24, 0x01	; 1
    1954:	11 f4       	brne	.+4      	; 0x195a <SWITCH_u8State+0x2a6>
				ret=OFF;
    1956:	19 82       	std	Y+1, r1	; 0x01
			}else if(DIO_u8GetPin(SWITCHPIN_19)==LOW){
				ret=ON;
			}
		}
	break;
    1958:	ef c0       	rjmp	.+478    	; 0x1b38 <SWITCH_u8State+0x484>
				ret=OFF;
			}
		}else if(SWITCH_19_mode==PULLUP){
			if(DIO_u8GetPin(SWITCHPIN_19)==HIGH){
				ret=OFF;
			}else if(DIO_u8GetPin(SWITCHPIN_19)==LOW){
    195a:	83 e1       	ldi	r24, 0x13	; 19
    195c:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_u8GetPin>
    1960:	88 23       	and	r24, r24
    1962:	09 f0       	breq	.+2      	; 0x1966 <SWITCH_u8State+0x2b2>
    1964:	e9 c0       	rjmp	.+466    	; 0x1b38 <SWITCH_u8State+0x484>
				ret=ON;
    1966:	81 e0       	ldi	r24, 0x01	; 1
    1968:	89 83       	std	Y+1, r24	; 0x01
			}
		}
	break;
    196a:	e6 c0       	rjmp	.+460    	; 0x1b38 <SWITCH_u8State+0x484>
				ret=ON;
			}else if(DIO_u8GetPin(SWITCHPIN_20)==LOW){
				ret=OFF;
			}
		}else if(SWITCH_20_mode==PULLUP){
			if(DIO_u8GetPin(SWITCHPIN_20)==HIGH){
    196c:	84 e1       	ldi	r24, 0x14	; 20
    196e:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_u8GetPin>
    1972:	81 30       	cpi	r24, 0x01	; 1
    1974:	11 f4       	brne	.+4      	; 0x197a <SWITCH_u8State+0x2c6>
				ret=OFF;
    1976:	19 82       	std	Y+1, r1	; 0x01
			}else if(DIO_u8GetPin(SWITCHPIN_20)==LOW){
				ret=ON;
			}
		}
	break;
    1978:	e1 c0       	rjmp	.+450    	; 0x1b3c <SWITCH_u8State+0x488>
				ret=OFF;
			}
		}else if(SWITCH_20_mode==PULLUP){
			if(DIO_u8GetPin(SWITCHPIN_20)==HIGH){
				ret=OFF;
			}else if(DIO_u8GetPin(SWITCHPIN_20)==LOW){
    197a:	84 e1       	ldi	r24, 0x14	; 20
    197c:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_u8GetPin>
    1980:	88 23       	and	r24, r24
    1982:	09 f0       	breq	.+2      	; 0x1986 <SWITCH_u8State+0x2d2>
    1984:	db c0       	rjmp	.+438    	; 0x1b3c <SWITCH_u8State+0x488>
				ret=ON;
    1986:	81 e0       	ldi	r24, 0x01	; 1
    1988:	89 83       	std	Y+1, r24	; 0x01
			}
		}
	break;
    198a:	d8 c0       	rjmp	.+432    	; 0x1b3c <SWITCH_u8State+0x488>
				ret=ON;
			}else if(DIO_u8GetPin(SWITCHPIN_21)==LOW){
				ret=OFF;
			}
		}else if(SWITCH_21_mode==PULLUP){
			if(DIO_u8GetPin(SWITCHPIN_21)==HIGH){
    198c:	85 e1       	ldi	r24, 0x15	; 21
    198e:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_u8GetPin>
    1992:	81 30       	cpi	r24, 0x01	; 1
    1994:	11 f4       	brne	.+4      	; 0x199a <SWITCH_u8State+0x2e6>
				ret=OFF;
    1996:	19 82       	std	Y+1, r1	; 0x01
			}else if(DIO_u8GetPin(SWITCHPIN_21)==LOW){
				ret=ON;
			}
		}
	break;
    1998:	d3 c0       	rjmp	.+422    	; 0x1b40 <SWITCH_u8State+0x48c>
				ret=OFF;
			}
		}else if(SWITCH_21_mode==PULLUP){
			if(DIO_u8GetPin(SWITCHPIN_21)==HIGH){
				ret=OFF;
			}else if(DIO_u8GetPin(SWITCHPIN_21)==LOW){
    199a:	85 e1       	ldi	r24, 0x15	; 21
    199c:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_u8GetPin>
    19a0:	88 23       	and	r24, r24
    19a2:	09 f0       	breq	.+2      	; 0x19a6 <SWITCH_u8State+0x2f2>
    19a4:	cd c0       	rjmp	.+410    	; 0x1b40 <SWITCH_u8State+0x48c>
				ret=ON;
    19a6:	81 e0       	ldi	r24, 0x01	; 1
    19a8:	89 83       	std	Y+1, r24	; 0x01
			}
		}
	break;
    19aa:	ca c0       	rjmp	.+404    	; 0x1b40 <SWITCH_u8State+0x48c>
				ret=ON;
			}else if(DIO_u8GetPin(SWITCHPIN_22)==LOW){
				ret=OFF;
			}
		}else if(SWITCH_22_mode==PULLUP){
			if(DIO_u8GetPin(SWITCHPIN_22)==HIGH){
    19ac:	86 e1       	ldi	r24, 0x16	; 22
    19ae:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_u8GetPin>
    19b2:	81 30       	cpi	r24, 0x01	; 1
    19b4:	11 f4       	brne	.+4      	; 0x19ba <SWITCH_u8State+0x306>
				ret=OFF;
    19b6:	19 82       	std	Y+1, r1	; 0x01
			}else if(DIO_u8GetPin(SWITCHPIN_22)==LOW){
				ret=ON;
			}
		}
	break;
    19b8:	c5 c0       	rjmp	.+394    	; 0x1b44 <SWITCH_u8State+0x490>
				ret=OFF;
			}
		}else if(SWITCH_22_mode==PULLUP){
			if(DIO_u8GetPin(SWITCHPIN_22)==HIGH){
				ret=OFF;
			}else if(DIO_u8GetPin(SWITCHPIN_22)==LOW){
    19ba:	86 e1       	ldi	r24, 0x16	; 22
    19bc:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_u8GetPin>
    19c0:	88 23       	and	r24, r24
    19c2:	09 f0       	breq	.+2      	; 0x19c6 <SWITCH_u8State+0x312>
    19c4:	bf c0       	rjmp	.+382    	; 0x1b44 <SWITCH_u8State+0x490>
				ret=ON;
    19c6:	81 e0       	ldi	r24, 0x01	; 1
    19c8:	89 83       	std	Y+1, r24	; 0x01
			}
		}
	break;
    19ca:	bc c0       	rjmp	.+376    	; 0x1b44 <SWITCH_u8State+0x490>
				ret=ON;
			}else if(DIO_u8GetPin(SWITCHPIN_23)==LOW){
				ret=OFF;
			}
		}else if(SWITCH_23_mode==PULLUP){
			if(DIO_u8GetPin(SWITCHPIN_23)==HIGH){
    19cc:	87 e1       	ldi	r24, 0x17	; 23
    19ce:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_u8GetPin>
    19d2:	81 30       	cpi	r24, 0x01	; 1
    19d4:	11 f4       	brne	.+4      	; 0x19da <SWITCH_u8State+0x326>
				ret=OFF;
    19d6:	19 82       	std	Y+1, r1	; 0x01
			}else if(DIO_u8GetPin(SWITCHPIN_23)==LOW){
				ret=ON;
			}
		}
	break;
    19d8:	b7 c0       	rjmp	.+366    	; 0x1b48 <SWITCH_u8State+0x494>
				ret=OFF;
			}
		}else if(SWITCH_23_mode==PULLUP){
			if(DIO_u8GetPin(SWITCHPIN_23)==HIGH){
				ret=OFF;
			}else if(DIO_u8GetPin(SWITCHPIN_23)==LOW){
    19da:	87 e1       	ldi	r24, 0x17	; 23
    19dc:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_u8GetPin>
    19e0:	88 23       	and	r24, r24
    19e2:	09 f0       	breq	.+2      	; 0x19e6 <SWITCH_u8State+0x332>
    19e4:	b1 c0       	rjmp	.+354    	; 0x1b48 <SWITCH_u8State+0x494>
				ret=ON;
    19e6:	81 e0       	ldi	r24, 0x01	; 1
    19e8:	89 83       	std	Y+1, r24	; 0x01
			}
		}
	break;
    19ea:	ae c0       	rjmp	.+348    	; 0x1b48 <SWITCH_u8State+0x494>
				ret=ON;
			}else if(DIO_u8GetPin(SWITCHPIN_24)==LOW){
				ret=OFF;
			}
		}else if(SWITCH_24_mode==PULLUP){
			if(DIO_u8GetPin(SWITCHPIN_24)==HIGH){
    19ec:	88 e1       	ldi	r24, 0x18	; 24
    19ee:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_u8GetPin>
    19f2:	81 30       	cpi	r24, 0x01	; 1
    19f4:	11 f4       	brne	.+4      	; 0x19fa <SWITCH_u8State+0x346>
				ret=OFF;
    19f6:	19 82       	std	Y+1, r1	; 0x01
			}else if(DIO_u8GetPin(SWITCHPIN_24)==LOW){
				ret=ON;
			}
		}
	break;
    19f8:	a9 c0       	rjmp	.+338    	; 0x1b4c <SWITCH_u8State+0x498>
				ret=OFF;
			}
		}else if(SWITCH_24_mode==PULLUP){
			if(DIO_u8GetPin(SWITCHPIN_24)==HIGH){
				ret=OFF;
			}else if(DIO_u8GetPin(SWITCHPIN_24)==LOW){
    19fa:	88 e1       	ldi	r24, 0x18	; 24
    19fc:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_u8GetPin>
    1a00:	88 23       	and	r24, r24
    1a02:	09 f0       	breq	.+2      	; 0x1a06 <SWITCH_u8State+0x352>
    1a04:	a3 c0       	rjmp	.+326    	; 0x1b4c <SWITCH_u8State+0x498>
				ret=ON;
    1a06:	81 e0       	ldi	r24, 0x01	; 1
    1a08:	89 83       	std	Y+1, r24	; 0x01
			}
		}
	break;
    1a0a:	a0 c0       	rjmp	.+320    	; 0x1b4c <SWITCH_u8State+0x498>
				ret=ON;
			}else if(DIO_u8GetPin(SWITCHPIN_25)==LOW){
				ret=OFF;
			}
		}else if(SWITCH_25_mode==PULLUP){
			if(DIO_u8GetPin(SWITCHPIN_25)==HIGH){
    1a0c:	89 e1       	ldi	r24, 0x19	; 25
    1a0e:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_u8GetPin>
    1a12:	81 30       	cpi	r24, 0x01	; 1
    1a14:	11 f4       	brne	.+4      	; 0x1a1a <SWITCH_u8State+0x366>
				ret=OFF;
    1a16:	19 82       	std	Y+1, r1	; 0x01
			}else if(DIO_u8GetPin(SWITCHPIN_25)==LOW){
				ret=ON;
			}
		}
	break;
    1a18:	9b c0       	rjmp	.+310    	; 0x1b50 <SWITCH_u8State+0x49c>
				ret=OFF;
			}
		}else if(SWITCH_25_mode==PULLUP){
			if(DIO_u8GetPin(SWITCHPIN_25)==HIGH){
				ret=OFF;
			}else if(DIO_u8GetPin(SWITCHPIN_25)==LOW){
    1a1a:	89 e1       	ldi	r24, 0x19	; 25
    1a1c:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_u8GetPin>
    1a20:	88 23       	and	r24, r24
    1a22:	09 f0       	breq	.+2      	; 0x1a26 <SWITCH_u8State+0x372>
    1a24:	95 c0       	rjmp	.+298    	; 0x1b50 <SWITCH_u8State+0x49c>
				ret=ON;
    1a26:	81 e0       	ldi	r24, 0x01	; 1
    1a28:	89 83       	std	Y+1, r24	; 0x01
			}
		}
	break;
    1a2a:	92 c0       	rjmp	.+292    	; 0x1b50 <SWITCH_u8State+0x49c>
				ret=ON;
			}else if(DIO_u8GetPin(SWITCHPIN_26)==LOW){
				ret=OFF;
			}
		}else if(SWITCH_26_mode==PULLUP){
			if(DIO_u8GetPin(SWITCHPIN_26)==HIGH){
    1a2c:	8a e1       	ldi	r24, 0x1A	; 26
    1a2e:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_u8GetPin>
    1a32:	81 30       	cpi	r24, 0x01	; 1
    1a34:	11 f4       	brne	.+4      	; 0x1a3a <SWITCH_u8State+0x386>
				ret=OFF;
    1a36:	19 82       	std	Y+1, r1	; 0x01
			}else if(DIO_u8GetPin(SWITCHPIN_26)==LOW){
				ret=ON;
			}
		}
	break;
    1a38:	8d c0       	rjmp	.+282    	; 0x1b54 <SWITCH_u8State+0x4a0>
				ret=OFF;
			}
		}else if(SWITCH_26_mode==PULLUP){
			if(DIO_u8GetPin(SWITCHPIN_26)==HIGH){
				ret=OFF;
			}else if(DIO_u8GetPin(SWITCHPIN_26)==LOW){
    1a3a:	8a e1       	ldi	r24, 0x1A	; 26
    1a3c:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_u8GetPin>
    1a40:	88 23       	and	r24, r24
    1a42:	09 f0       	breq	.+2      	; 0x1a46 <SWITCH_u8State+0x392>
    1a44:	87 c0       	rjmp	.+270    	; 0x1b54 <SWITCH_u8State+0x4a0>
				ret=ON;
    1a46:	81 e0       	ldi	r24, 0x01	; 1
    1a48:	89 83       	std	Y+1, r24	; 0x01
			}
		}
	break;
    1a4a:	84 c0       	rjmp	.+264    	; 0x1b54 <SWITCH_u8State+0x4a0>
				ret=ON;
			}else if(DIO_u8GetPin(SWITCHPIN_27)==LOW){
				ret=OFF;
			}
		}else if(SWITCH_27_mode==PULLUP){
			if(DIO_u8GetPin(SWITCHPIN_27)==HIGH){
    1a4c:	8b e1       	ldi	r24, 0x1B	; 27
    1a4e:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_u8GetPin>
    1a52:	81 30       	cpi	r24, 0x01	; 1
    1a54:	11 f4       	brne	.+4      	; 0x1a5a <SWITCH_u8State+0x3a6>
				ret=OFF;
    1a56:	19 82       	std	Y+1, r1	; 0x01
			}else if(DIO_u8GetPin(SWITCHPIN_27)==LOW){
				ret=ON;
			}
		}
	break;
    1a58:	7f c0       	rjmp	.+254    	; 0x1b58 <SWITCH_u8State+0x4a4>
				ret=OFF;
			}
		}else if(SWITCH_27_mode==PULLUP){
			if(DIO_u8GetPin(SWITCHPIN_27)==HIGH){
				ret=OFF;
			}else if(DIO_u8GetPin(SWITCHPIN_27)==LOW){
    1a5a:	8b e1       	ldi	r24, 0x1B	; 27
    1a5c:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_u8GetPin>
    1a60:	88 23       	and	r24, r24
    1a62:	09 f0       	breq	.+2      	; 0x1a66 <SWITCH_u8State+0x3b2>
    1a64:	79 c0       	rjmp	.+242    	; 0x1b58 <SWITCH_u8State+0x4a4>
				ret=ON;
    1a66:	81 e0       	ldi	r24, 0x01	; 1
    1a68:	89 83       	std	Y+1, r24	; 0x01
			}
		}
	break;
    1a6a:	76 c0       	rjmp	.+236    	; 0x1b58 <SWITCH_u8State+0x4a4>
				ret=ON;
			}else if(DIO_u8GetPin(SWITCHPIN_28)==LOW){
				ret=OFF;
			}
		}else if(SWITCH_28_mode==PULLUP){
			if(DIO_u8GetPin(SWITCHPIN_28)==HIGH){
    1a6c:	8c e1       	ldi	r24, 0x1C	; 28
    1a6e:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_u8GetPin>
    1a72:	81 30       	cpi	r24, 0x01	; 1
    1a74:	11 f4       	brne	.+4      	; 0x1a7a <SWITCH_u8State+0x3c6>
				ret=OFF;
    1a76:	19 82       	std	Y+1, r1	; 0x01
			}else if(DIO_u8GetPin(SWITCHPIN_28)==LOW){
				ret=ON;
			}
		}
	break;
    1a78:	71 c0       	rjmp	.+226    	; 0x1b5c <SWITCH_u8State+0x4a8>
				ret=OFF;
			}
		}else if(SWITCH_28_mode==PULLUP){
			if(DIO_u8GetPin(SWITCHPIN_28)==HIGH){
				ret=OFF;
			}else if(DIO_u8GetPin(SWITCHPIN_28)==LOW){
    1a7a:	8c e1       	ldi	r24, 0x1C	; 28
    1a7c:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_u8GetPin>
    1a80:	88 23       	and	r24, r24
    1a82:	09 f0       	breq	.+2      	; 0x1a86 <SWITCH_u8State+0x3d2>
    1a84:	6b c0       	rjmp	.+214    	; 0x1b5c <SWITCH_u8State+0x4a8>
				ret=ON;
    1a86:	81 e0       	ldi	r24, 0x01	; 1
    1a88:	89 83       	std	Y+1, r24	; 0x01
			}
		}
	break;
    1a8a:	68 c0       	rjmp	.+208    	; 0x1b5c <SWITCH_u8State+0x4a8>
				ret=ON;
			}else if(DIO_u8GetPin(SWITCHPIN_29)==LOW){
				ret=OFF;
			}
		}else if(SWITCH_29_mode==PULLUP){
			if(DIO_u8GetPin(SWITCHPIN_29)==HIGH){
    1a8c:	8d e1       	ldi	r24, 0x1D	; 29
    1a8e:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_u8GetPin>
    1a92:	81 30       	cpi	r24, 0x01	; 1
    1a94:	11 f4       	brne	.+4      	; 0x1a9a <SWITCH_u8State+0x3e6>
				ret=OFF;
    1a96:	19 82       	std	Y+1, r1	; 0x01
			}else if(DIO_u8GetPin(SWITCHPIN_29)==LOW){
				ret=ON;
			}
		}
	break;
    1a98:	63 c0       	rjmp	.+198    	; 0x1b60 <SWITCH_u8State+0x4ac>
				ret=OFF;
			}
		}else if(SWITCH_29_mode==PULLUP){
			if(DIO_u8GetPin(SWITCHPIN_29)==HIGH){
				ret=OFF;
			}else if(DIO_u8GetPin(SWITCHPIN_29)==LOW){
    1a9a:	8d e1       	ldi	r24, 0x1D	; 29
    1a9c:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_u8GetPin>
    1aa0:	88 23       	and	r24, r24
    1aa2:	09 f0       	breq	.+2      	; 0x1aa6 <SWITCH_u8State+0x3f2>
    1aa4:	5d c0       	rjmp	.+186    	; 0x1b60 <SWITCH_u8State+0x4ac>
				ret=ON;
    1aa6:	81 e0       	ldi	r24, 0x01	; 1
    1aa8:	89 83       	std	Y+1, r24	; 0x01
			}
		}
	break;
    1aaa:	5a c0       	rjmp	.+180    	; 0x1b60 <SWITCH_u8State+0x4ac>
				ret=ON;
			}else if(DIO_u8GetPin(SWITCHPIN_30)==LOW){
				ret=OFF;
			}
		}else if(SWITCH_30_mode==PULLUP){
			if(DIO_u8GetPin(SWITCHPIN_30)==HIGH){
    1aac:	8e e1       	ldi	r24, 0x1E	; 30
    1aae:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_u8GetPin>
    1ab2:	81 30       	cpi	r24, 0x01	; 1
    1ab4:	11 f4       	brne	.+4      	; 0x1aba <SWITCH_u8State+0x406>
				ret=OFF;
    1ab6:	19 82       	std	Y+1, r1	; 0x01
			}else if(DIO_u8GetPin(SWITCHPIN_30)==LOW){
				ret=ON;
			}
		}
	break;
    1ab8:	55 c0       	rjmp	.+170    	; 0x1b64 <SWITCH_u8State+0x4b0>
				ret=OFF;
			}
		}else if(SWITCH_30_mode==PULLUP){
			if(DIO_u8GetPin(SWITCHPIN_30)==HIGH){
				ret=OFF;
			}else if(DIO_u8GetPin(SWITCHPIN_30)==LOW){
    1aba:	8e e1       	ldi	r24, 0x1E	; 30
    1abc:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_u8GetPin>
    1ac0:	88 23       	and	r24, r24
    1ac2:	09 f0       	breq	.+2      	; 0x1ac6 <SWITCH_u8State+0x412>
    1ac4:	4f c0       	rjmp	.+158    	; 0x1b64 <SWITCH_u8State+0x4b0>
				ret=ON;
    1ac6:	81 e0       	ldi	r24, 0x01	; 1
    1ac8:	89 83       	std	Y+1, r24	; 0x01
			}
		}
	break;
    1aca:	4c c0       	rjmp	.+152    	; 0x1b64 <SWITCH_u8State+0x4b0>
				ret=ON;
			}else if(DIO_u8GetPin(SWITCHPIN_31)==LOW){
				ret=OFF;
			}
		}else if(SWITCH_31_mode==PULLUP){
			if(DIO_u8GetPin(SWITCHPIN_31)==HIGH){
    1acc:	8f e1       	ldi	r24, 0x1F	; 31
    1ace:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_u8GetPin>
    1ad2:	81 30       	cpi	r24, 0x01	; 1
    1ad4:	11 f4       	brne	.+4      	; 0x1ada <SWITCH_u8State+0x426>
				ret=OFF;
    1ad6:	19 82       	std	Y+1, r1	; 0x01
			}else if(DIO_u8GetPin(SWITCHPIN_31)==LOW){
				ret=ON;
			}
		}
	break;
    1ad8:	47 c0       	rjmp	.+142    	; 0x1b68 <SWITCH_u8State+0x4b4>
				ret=OFF;
			}
		}else if(SWITCH_31_mode==PULLUP){
			if(DIO_u8GetPin(SWITCHPIN_31)==HIGH){
				ret=OFF;
			}else if(DIO_u8GetPin(SWITCHPIN_31)==LOW){
    1ada:	8f e1       	ldi	r24, 0x1F	; 31
    1adc:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_u8GetPin>
    1ae0:	88 23       	and	r24, r24
    1ae2:	09 f0       	breq	.+2      	; 0x1ae6 <SWITCH_u8State+0x432>
    1ae4:	41 c0       	rjmp	.+130    	; 0x1b68 <SWITCH_u8State+0x4b4>
				ret=ON;
    1ae6:	81 e0       	ldi	r24, 0x01	; 1
    1ae8:	89 83       	std	Y+1, r24	; 0x01
			}
		}
	break;
    1aea:	3e c0       	rjmp	.+124    	; 0x1b68 <SWITCH_u8State+0x4b4>
				ret=OFF;
			}else if(DIO_u8GetPin(SWITCHPIN_0)==LOW){
				ret=ON;
			}
		}
	break;
    1aec:	00 00       	nop
    1aee:	3d c0       	rjmp	.+122    	; 0x1b6a <SWITCH_u8State+0x4b6>
				ret=OFF;
			}else if(DIO_u8GetPin(SWITCHPIN_1)==LOW){
				ret=ON;
			}
		}
	break;
    1af0:	00 00       	nop
    1af2:	3b c0       	rjmp	.+118    	; 0x1b6a <SWITCH_u8State+0x4b6>
				ret=OFF;
			}else if(DIO_u8GetPin(SWITCHPIN_2)==LOW){
				ret=ON;
			}
		}
	break;
    1af4:	00 00       	nop
    1af6:	39 c0       	rjmp	.+114    	; 0x1b6a <SWITCH_u8State+0x4b6>
				ret=OFF;
			}else if(DIO_u8GetPin(SWITCHPIN_3)==LOW){
				ret=ON;
			}
		}
	break;
    1af8:	00 00       	nop
    1afa:	37 c0       	rjmp	.+110    	; 0x1b6a <SWITCH_u8State+0x4b6>
				ret=OFF;
			}else if(DIO_u8GetPin(SWITCHPIN_4)==LOW){
				ret=ON;
			}
		}
	break;
    1afc:	00 00       	nop
    1afe:	35 c0       	rjmp	.+106    	; 0x1b6a <SWITCH_u8State+0x4b6>
				ret=OFF;
			}else if(DIO_u8GetPin(SWITCHPIN_5)==LOW){
				ret=ON;
			}
		}
	break;
    1b00:	00 00       	nop
    1b02:	33 c0       	rjmp	.+102    	; 0x1b6a <SWITCH_u8State+0x4b6>
				ret=OFF;
			}else if(DIO_u8GetPin(SWITCHPIN_6)==LOW){
				ret=ON;
			}
		}
	break;
    1b04:	00 00       	nop
    1b06:	31 c0       	rjmp	.+98     	; 0x1b6a <SWITCH_u8State+0x4b6>
				ret=OFF;
			}else if(DIO_u8GetPin(SWITCHPIN_7)==LOW){
				ret=ON;
			}
		}
	break;
    1b08:	00 00       	nop
    1b0a:	2f c0       	rjmp	.+94     	; 0x1b6a <SWITCH_u8State+0x4b6>
				ret=OFF;
			}else if(DIO_u8GetPin(SWITCHPIN_8)==LOW){
				ret=ON;
			}
		}
	break;
    1b0c:	00 00       	nop
    1b0e:	2d c0       	rjmp	.+90     	; 0x1b6a <SWITCH_u8State+0x4b6>
				ret=OFF;
			}else if(DIO_u8GetPin(SWITCHPIN_9)==LOW){
				ret=ON;
			}
		}
	break;
    1b10:	00 00       	nop
    1b12:	2b c0       	rjmp	.+86     	; 0x1b6a <SWITCH_u8State+0x4b6>
				ret=OFF;
			}else if(DIO_u8GetPin(SWITCHPIN_10)==LOW){
				ret=ON;
			}
		}
	break;
    1b14:	00 00       	nop
    1b16:	29 c0       	rjmp	.+82     	; 0x1b6a <SWITCH_u8State+0x4b6>
				ret=OFF;
			}else if(DIO_u8GetPin(SWITCHPIN_11)==LOW){
				ret=ON;
			}
		}
	break;
    1b18:	00 00       	nop
    1b1a:	27 c0       	rjmp	.+78     	; 0x1b6a <SWITCH_u8State+0x4b6>
				ret=OFF;
			}else if(DIO_u8GetPin(SWITCHPIN_12)==LOW){
				ret=ON;
			}
		}
	break;
    1b1c:	00 00       	nop
    1b1e:	25 c0       	rjmp	.+74     	; 0x1b6a <SWITCH_u8State+0x4b6>
				ret=OFF;
			}else if(DIO_u8GetPin(SWITCHPIN_13)==LOW){
				ret=ON;
			}
		}
	break;
    1b20:	00 00       	nop
    1b22:	23 c0       	rjmp	.+70     	; 0x1b6a <SWITCH_u8State+0x4b6>
				ret=OFF;
			}else if(DIO_u8GetPin(SWITCHPIN_14)==LOW){
				ret=ON;
			}
		}
	break;
    1b24:	00 00       	nop
    1b26:	21 c0       	rjmp	.+66     	; 0x1b6a <SWITCH_u8State+0x4b6>
				ret=OFF;
			}else if(DIO_u8GetPin(SWITCHPIN_15)==LOW){
				ret=ON;
			}
		}
	break;
    1b28:	00 00       	nop
    1b2a:	1f c0       	rjmp	.+62     	; 0x1b6a <SWITCH_u8State+0x4b6>
				ret=OFF;
			}else if(DIO_u8GetPin(SWITCHPIN_16)==LOW){
				ret=ON;
			}
		}
	break;
    1b2c:	00 00       	nop
    1b2e:	1d c0       	rjmp	.+58     	; 0x1b6a <SWITCH_u8State+0x4b6>
				ret=OFF;
			}else if(DIO_u8GetPin(SWITCHPIN_17)==LOW){
				ret=ON;
			}
		}
	break;
    1b30:	00 00       	nop
    1b32:	1b c0       	rjmp	.+54     	; 0x1b6a <SWITCH_u8State+0x4b6>
				ret=OFF;
			}else if(DIO_u8GetPin(SWITCHPIN_18)==LOW){
				ret=ON;
			}
		}
	break;
    1b34:	00 00       	nop
    1b36:	19 c0       	rjmp	.+50     	; 0x1b6a <SWITCH_u8State+0x4b6>
				ret=OFF;
			}else if(DIO_u8GetPin(SWITCHPIN_19)==LOW){
				ret=ON;
			}
		}
	break;
    1b38:	00 00       	nop
    1b3a:	17 c0       	rjmp	.+46     	; 0x1b6a <SWITCH_u8State+0x4b6>
				ret=OFF;
			}else if(DIO_u8GetPin(SWITCHPIN_20)==LOW){
				ret=ON;
			}
		}
	break;
    1b3c:	00 00       	nop
    1b3e:	15 c0       	rjmp	.+42     	; 0x1b6a <SWITCH_u8State+0x4b6>
				ret=OFF;
			}else if(DIO_u8GetPin(SWITCHPIN_21)==LOW){
				ret=ON;
			}
		}
	break;
    1b40:	00 00       	nop
    1b42:	13 c0       	rjmp	.+38     	; 0x1b6a <SWITCH_u8State+0x4b6>
				ret=OFF;
			}else if(DIO_u8GetPin(SWITCHPIN_22)==LOW){
				ret=ON;
			}
		}
	break;
    1b44:	00 00       	nop
    1b46:	11 c0       	rjmp	.+34     	; 0x1b6a <SWITCH_u8State+0x4b6>
				ret=OFF;
			}else if(DIO_u8GetPin(SWITCHPIN_23)==LOW){
				ret=ON;
			}
		}
	break;
    1b48:	00 00       	nop
    1b4a:	0f c0       	rjmp	.+30     	; 0x1b6a <SWITCH_u8State+0x4b6>
				ret=OFF;
			}else if(DIO_u8GetPin(SWITCHPIN_24)==LOW){
				ret=ON;
			}
		}
	break;
    1b4c:	00 00       	nop
    1b4e:	0d c0       	rjmp	.+26     	; 0x1b6a <SWITCH_u8State+0x4b6>
				ret=OFF;
			}else if(DIO_u8GetPin(SWITCHPIN_25)==LOW){
				ret=ON;
			}
		}
	break;
    1b50:	00 00       	nop
    1b52:	0b c0       	rjmp	.+22     	; 0x1b6a <SWITCH_u8State+0x4b6>
				ret=OFF;
			}else if(DIO_u8GetPin(SWITCHPIN_26)==LOW){
				ret=ON;
			}
		}
	break;
    1b54:	00 00       	nop
    1b56:	09 c0       	rjmp	.+18     	; 0x1b6a <SWITCH_u8State+0x4b6>
				ret=OFF;
			}else if(DIO_u8GetPin(SWITCHPIN_27)==LOW){
				ret=ON;
			}
		}
	break;
    1b58:	00 00       	nop
    1b5a:	07 c0       	rjmp	.+14     	; 0x1b6a <SWITCH_u8State+0x4b6>
				ret=OFF;
			}else if(DIO_u8GetPin(SWITCHPIN_28)==LOW){
				ret=ON;
			}
		}
	break;
    1b5c:	00 00       	nop
    1b5e:	05 c0       	rjmp	.+10     	; 0x1b6a <SWITCH_u8State+0x4b6>
				ret=OFF;
			}else if(DIO_u8GetPin(SWITCHPIN_29)==LOW){
				ret=ON;
			}
		}
	break;
    1b60:	00 00       	nop
    1b62:	03 c0       	rjmp	.+6      	; 0x1b6a <SWITCH_u8State+0x4b6>
				ret=OFF;
			}else if(DIO_u8GetPin(SWITCHPIN_30)==LOW){
				ret=ON;
			}
		}
	break;
    1b64:	00 00       	nop
    1b66:	01 c0       	rjmp	.+2      	; 0x1b6a <SWITCH_u8State+0x4b6>
				ret=OFF;
			}else if(DIO_u8GetPin(SWITCHPIN_31)==LOW){
				ret=ON;
			}
		}
	break;
    1b68:	00 00       	nop


	}

	return ret;
    1b6a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b6c:	0f 90       	pop	r0
    1b6e:	0f 90       	pop	r0
    1b70:	df 91       	pop	r29
    1b72:	cf 91       	pop	r28
    1b74:	08 95       	ret

00001b76 <check_amb>:
#include "LED_int.h"
#include "SWITCH_int.h"
#include "LCD_int.h"
#include "avr/delay.h"

void check_amb(u8 LED_NUM){
    1b76:	cf 93       	push	r28
    1b78:	df 93       	push	r29
    1b7a:	cd b7       	in	r28, 0x3d	; 61
    1b7c:	de b7       	in	r29, 0x3e	; 62
    1b7e:	60 97       	sbiw	r28, 0x10	; 16
    1b80:	0f b6       	in	r0, 0x3f	; 63
    1b82:	f8 94       	cli
    1b84:	de bf       	out	0x3e, r29	; 62
    1b86:	0f be       	out	0x3f, r0	; 63
    1b88:	cd bf       	out	0x3d, r28	; 61
    1b8a:	88 8b       	std	Y+16, r24	; 0x10

	if(SWITCH_u8State(SWITCH_11)==ON){
    1b8c:	8b e0       	ldi	r24, 0x0B	; 11
    1b8e:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <SWITCH_u8State>
    1b92:	81 30       	cpi	r24, 0x01	; 1
    1b94:	09 f0       	breq	.+2      	; 0x1b98 <check_amb+0x22>
    1b96:	a7 c0       	rjmp	.+334    	; 0x1ce6 <check_amb+0x170>
		LED_voidOff(LED_NUM);
    1b98:	88 89       	ldd	r24, Y+16	; 0x10
    1b9a:	0e 94 23 07 	call	0xe46	; 0xe46 <LED_voidOff>
		LED_voidON(LED_10);
    1b9e:	8a e0       	ldi	r24, 0x0A	; 10
    1ba0:	0e 94 62 06 	call	0xcc4	; 0xcc4 <LED_voidON>
		for(u8 i = 5 ; i > 0;i--){
    1ba4:	85 e0       	ldi	r24, 0x05	; 5
    1ba6:	89 83       	std	Y+1, r24	; 0x01
    1ba8:	94 c0       	rjmp	.+296    	; 0x1cd2 <check_amb+0x15c>
			SEVSEG_voidDisplay(SEG_1,i);
    1baa:	69 81       	ldd	r22, Y+1	; 0x01
    1bac:	81 e0       	ldi	r24, 0x01	; 1
    1bae:	0e 94 8d 08 	call	0x111a	; 0x111a <SEVSEG_voidDisplay>
			LCD_voidWriteData('a');
    1bb2:	81 e6       	ldi	r24, 0x61	; 97
    1bb4:	0e 94 b1 04 	call	0x962	; 0x962 <LCD_voidWriteData>
			LCD_voidWriteData('m');
    1bb8:	8d e6       	ldi	r24, 0x6D	; 109
    1bba:	0e 94 b1 04 	call	0x962	; 0x962 <LCD_voidWriteData>
			LCD_voidWriteData('b');
    1bbe:	82 e6       	ldi	r24, 0x62	; 98
    1bc0:	0e 94 b1 04 	call	0x962	; 0x962 <LCD_voidWriteData>
			LCD_voidWriteData('u');
    1bc4:	85 e7       	ldi	r24, 0x75	; 117
    1bc6:	0e 94 b1 04 	call	0x962	; 0x962 <LCD_voidWriteData>
			LCD_voidWriteData('l');
    1bca:	8c e6       	ldi	r24, 0x6C	; 108
    1bcc:	0e 94 b1 04 	call	0x962	; 0x962 <LCD_voidWriteData>
			LCD_voidWriteData('a');
    1bd0:	81 e6       	ldi	r24, 0x61	; 97
    1bd2:	0e 94 b1 04 	call	0x962	; 0x962 <LCD_voidWriteData>
			LCD_voidWriteData('n');
    1bd6:	8e e6       	ldi	r24, 0x6E	; 110
    1bd8:	0e 94 b1 04 	call	0x962	; 0x962 <LCD_voidWriteData>
			LCD_voidWriteData('c');
    1bdc:	83 e6       	ldi	r24, 0x63	; 99
    1bde:	0e 94 b1 04 	call	0x962	; 0x962 <LCD_voidWriteData>
			LCD_voidWriteData('e');
    1be2:	85 e6       	ldi	r24, 0x65	; 101
    1be4:	0e 94 b1 04 	call	0x962	; 0x962 <LCD_voidWriteData>
    1be8:	80 e0       	ldi	r24, 0x00	; 0
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	aa e7       	ldi	r26, 0x7A	; 122
    1bee:	b4 e4       	ldi	r27, 0x44	; 68
    1bf0:	8a 83       	std	Y+2, r24	; 0x02
    1bf2:	9b 83       	std	Y+3, r25	; 0x03
    1bf4:	ac 83       	std	Y+4, r26	; 0x04
    1bf6:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1bf8:	20 e0       	ldi	r18, 0x00	; 0
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	4a ef       	ldi	r20, 0xFA	; 250
    1bfe:	54 e4       	ldi	r21, 0x44	; 68
    1c00:	6a 81       	ldd	r22, Y+2	; 0x02
    1c02:	7b 81       	ldd	r23, Y+3	; 0x03
    1c04:	8c 81       	ldd	r24, Y+4	; 0x04
    1c06:	9d 81       	ldd	r25, Y+5	; 0x05
    1c08:	0e 94 c8 10 	call	0x2190	; 0x2190 <__mulsf3>
    1c0c:	dc 01       	movw	r26, r24
    1c0e:	cb 01       	movw	r24, r22
    1c10:	8e 83       	std	Y+6, r24	; 0x06
    1c12:	9f 83       	std	Y+7, r25	; 0x07
    1c14:	a8 87       	std	Y+8, r26	; 0x08
    1c16:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
    1c18:	20 e0       	ldi	r18, 0x00	; 0
    1c1a:	30 e0       	ldi	r19, 0x00	; 0
    1c1c:	40 e8       	ldi	r20, 0x80	; 128
    1c1e:	5f e3       	ldi	r21, 0x3F	; 63
    1c20:	6e 81       	ldd	r22, Y+6	; 0x06
    1c22:	7f 81       	ldd	r23, Y+7	; 0x07
    1c24:	88 85       	ldd	r24, Y+8	; 0x08
    1c26:	99 85       	ldd	r25, Y+9	; 0x09
    1c28:	0e 94 42 10 	call	0x2084	; 0x2084 <__cmpsf2>
    1c2c:	88 23       	and	r24, r24
    1c2e:	2c f4       	brge	.+10     	; 0x1c3a <check_amb+0xc4>
		__ticks = 1;
    1c30:	81 e0       	ldi	r24, 0x01	; 1
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	9b 87       	std	Y+11, r25	; 0x0b
    1c36:	8a 87       	std	Y+10, r24	; 0x0a
    1c38:	3f c0       	rjmp	.+126    	; 0x1cb8 <check_amb+0x142>
	else if (__tmp > 65535)
    1c3a:	20 e0       	ldi	r18, 0x00	; 0
    1c3c:	3f ef       	ldi	r19, 0xFF	; 255
    1c3e:	4f e7       	ldi	r20, 0x7F	; 127
    1c40:	57 e4       	ldi	r21, 0x47	; 71
    1c42:	6e 81       	ldd	r22, Y+6	; 0x06
    1c44:	7f 81       	ldd	r23, Y+7	; 0x07
    1c46:	88 85       	ldd	r24, Y+8	; 0x08
    1c48:	99 85       	ldd	r25, Y+9	; 0x09
    1c4a:	0e 94 c3 10 	call	0x2186	; 0x2186 <__gesf2>
    1c4e:	18 16       	cp	r1, r24
    1c50:	4c f5       	brge	.+82     	; 0x1ca4 <check_amb+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c52:	20 e0       	ldi	r18, 0x00	; 0
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	40 e2       	ldi	r20, 0x20	; 32
    1c58:	51 e4       	ldi	r21, 0x41	; 65
    1c5a:	6a 81       	ldd	r22, Y+2	; 0x02
    1c5c:	7b 81       	ldd	r23, Y+3	; 0x03
    1c5e:	8c 81       	ldd	r24, Y+4	; 0x04
    1c60:	9d 81       	ldd	r25, Y+5	; 0x05
    1c62:	0e 94 c8 10 	call	0x2190	; 0x2190 <__mulsf3>
    1c66:	dc 01       	movw	r26, r24
    1c68:	cb 01       	movw	r24, r22
    1c6a:	bc 01       	movw	r22, r24
    1c6c:	cd 01       	movw	r24, r26
    1c6e:	0e 94 47 10 	call	0x208e	; 0x208e <__fixunssfsi>
    1c72:	dc 01       	movw	r26, r24
    1c74:	cb 01       	movw	r24, r22
    1c76:	9b 87       	std	Y+11, r25	; 0x0b
    1c78:	8a 87       	std	Y+10, r24	; 0x0a
    1c7a:	0f c0       	rjmp	.+30     	; 0x1c9a <check_amb+0x124>
    1c7c:	88 ec       	ldi	r24, 0xC8	; 200
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	9d 87       	std	Y+13, r25	; 0x0d
    1c82:	8c 87       	std	Y+12, r24	; 0x0c
    1c84:	8c 85       	ldd	r24, Y+12	; 0x0c
    1c86:	9d 85       	ldd	r25, Y+13	; 0x0d
    1c88:	01 97       	sbiw	r24, 0x01	; 1
    1c8a:	f1 f7       	brne	.-4      	; 0x1c88 <check_amb+0x112>
    1c8c:	9d 87       	std	Y+13, r25	; 0x0d
    1c8e:	8c 87       	std	Y+12, r24	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c90:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c92:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c94:	01 97       	sbiw	r24, 0x01	; 1
    1c96:	9b 87       	std	Y+11, r25	; 0x0b
    1c98:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c9a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c9c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c9e:	89 2b       	or	r24, r25
    1ca0:	69 f7       	brne	.-38     	; 0x1c7c <check_amb+0x106>
    1ca2:	14 c0       	rjmp	.+40     	; 0x1ccc <check_amb+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ca4:	6e 81       	ldd	r22, Y+6	; 0x06
    1ca6:	7f 81       	ldd	r23, Y+7	; 0x07
    1ca8:	88 85       	ldd	r24, Y+8	; 0x08
    1caa:	99 85       	ldd	r25, Y+9	; 0x09
    1cac:	0e 94 47 10 	call	0x208e	; 0x208e <__fixunssfsi>
    1cb0:	dc 01       	movw	r26, r24
    1cb2:	cb 01       	movw	r24, r22
    1cb4:	9b 87       	std	Y+11, r25	; 0x0b
    1cb6:	8a 87       	std	Y+10, r24	; 0x0a
    1cb8:	8a 85       	ldd	r24, Y+10	; 0x0a
    1cba:	9b 85       	ldd	r25, Y+11	; 0x0b
    1cbc:	9f 87       	std	Y+15, r25	; 0x0f
    1cbe:	8e 87       	std	Y+14, r24	; 0x0e
    1cc0:	8e 85       	ldd	r24, Y+14	; 0x0e
    1cc2:	9f 85       	ldd	r25, Y+15	; 0x0f
    1cc4:	01 97       	sbiw	r24, 0x01	; 1
    1cc6:	f1 f7       	brne	.-4      	; 0x1cc4 <check_amb+0x14e>
    1cc8:	9f 87       	std	Y+15, r25	; 0x0f
    1cca:	8e 87       	std	Y+14, r24	; 0x0e
void check_amb(u8 LED_NUM){

	if(SWITCH_u8State(SWITCH_11)==ON){
		LED_voidOff(LED_NUM);
		LED_voidON(LED_10);
		for(u8 i = 5 ; i > 0;i--){
    1ccc:	89 81       	ldd	r24, Y+1	; 0x01
    1cce:	81 50       	subi	r24, 0x01	; 1
    1cd0:	89 83       	std	Y+1, r24	; 0x01
    1cd2:	89 81       	ldd	r24, Y+1	; 0x01
    1cd4:	88 23       	and	r24, r24
    1cd6:	09 f0       	breq	.+2      	; 0x1cda <check_amb+0x164>
    1cd8:	68 cf       	rjmp	.-304    	; 0x1baa <check_amb+0x34>
			LCD_voidWriteData('n');
			LCD_voidWriteData('c');
			LCD_voidWriteData('e');
			_delay_ms(1000);
		}
		LED_voidOff(LED_10);
    1cda:	8a e0       	ldi	r24, 0x0A	; 10
    1cdc:	0e 94 23 07 	call	0xe46	; 0xe46 <LED_voidOff>
		LED_voidON(LED_NUM);
    1ce0:	88 89       	ldd	r24, Y+16	; 0x10
    1ce2:	0e 94 62 06 	call	0xcc4	; 0xcc4 <LED_voidON>

	}

}
    1ce6:	00 00       	nop
    1ce8:	60 96       	adiw	r28, 0x10	; 16
    1cea:	0f b6       	in	r0, 0x3f	; 63
    1cec:	f8 94       	cli
    1cee:	de bf       	out	0x3e, r29	; 62
    1cf0:	0f be       	out	0x3f, r0	; 63
    1cf2:	cd bf       	out	0x3d, r28	; 61
    1cf4:	df 91       	pop	r29
    1cf6:	cf 91       	pop	r28
    1cf8:	08 95       	ret

00001cfa <main>:


int main(void){
    1cfa:	cf 93       	push	r28
    1cfc:	df 93       	push	r29
    1cfe:	cd b7       	in	r28, 0x3d	; 61
    1d00:	de b7       	in	r29, 0x3e	; 62
    1d02:	ad 97       	sbiw	r28, 0x2d	; 45
    1d04:	0f b6       	in	r0, 0x3f	; 63
    1d06:	f8 94       	cli
    1d08:	de bf       	out	0x3e, r29	; 62
    1d0a:	0f be       	out	0x3f, r0	; 63
    1d0c:	cd bf       	out	0x3d, r28	; 61
	DIO_voidInitialize();
    1d0e:	0e 94 ca 00 	call	0x194	; 0x194 <DIO_voidInitialize>
	SEVSEG_voidInitialize();
    1d12:	0e 94 85 08 	call	0x110a	; 0x110a <SEVSEG_voidInitialize>
	LED_voidInitialize();
    1d16:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <LED_voidInitialize>
	SWITCH_voidInitialize();
    1d1a:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <SWITCH_voidInitialize>
	SEVSEG_voidEnable(SEG_1);
    1d1e:	81 e0       	ldi	r24, 0x01	; 1
    1d20:	0e 94 16 0b 	call	0x162c	; 0x162c <SEVSEG_voidEnable>
	LCD_voidInitialize();
    1d24:	0e 94 cc 02 	call	0x598	; 0x598 <LCD_voidInitialize>

	while(1){
			LED_voidON(LED_8);
    1d28:	88 e0       	ldi	r24, 0x08	; 8
    1d2a:	0e 94 62 06 	call	0xcc4	; 0xcc4 <LED_voidON>
			for(u8 i = 9 ; i > 0;i--){
    1d2e:	89 e0       	ldi	r24, 0x09	; 9
    1d30:	89 83       	std	Y+1, r24	; 0x01
    1d32:	88 c0       	rjmp	.+272    	; 0x1e44 <main+0x14a>
				SEVSEG_voidDisplay(SEG_1,i);
    1d34:	69 81       	ldd	r22, Y+1	; 0x01
    1d36:	81 e0       	ldi	r24, 0x01	; 1
    1d38:	0e 94 8d 08 	call	0x111a	; 0x111a <SEVSEG_voidDisplay>
				LCD_voidWriteData('c');
    1d3c:	83 e6       	ldi	r24, 0x63	; 99
    1d3e:	0e 94 b1 04 	call	0x962	; 0x962 <LCD_voidWriteData>
				LCD_voidWriteData('o');
    1d42:	8f e6       	ldi	r24, 0x6F	; 111
    1d44:	0e 94 b1 04 	call	0x962	; 0x962 <LCD_voidWriteData>
				LCD_voidWriteData('c');
    1d48:	83 e6       	ldi	r24, 0x63	; 99
    1d4a:	0e 94 b1 04 	call	0x962	; 0x962 <LCD_voidWriteData>
				LCD_voidWriteData('a');
    1d4e:	81 e6       	ldi	r24, 0x61	; 97
    1d50:	0e 94 b1 04 	call	0x962	; 0x962 <LCD_voidWriteData>
				check_amb(LED_8);
    1d54:	88 e0       	ldi	r24, 0x08	; 8
    1d56:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <check_amb>
    1d5a:	80 e0       	ldi	r24, 0x00	; 0
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	aa e7       	ldi	r26, 0x7A	; 122
    1d60:	b4 e4       	ldi	r27, 0x44	; 68
    1d62:	8c 87       	std	Y+12, r24	; 0x0c
    1d64:	9d 87       	std	Y+13, r25	; 0x0d
    1d66:	ae 87       	std	Y+14, r26	; 0x0e
    1d68:	bf 87       	std	Y+15, r27	; 0x0f

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1d6a:	20 e0       	ldi	r18, 0x00	; 0
    1d6c:	30 e0       	ldi	r19, 0x00	; 0
    1d6e:	4a ef       	ldi	r20, 0xFA	; 250
    1d70:	54 e4       	ldi	r21, 0x44	; 68
    1d72:	6c 85       	ldd	r22, Y+12	; 0x0c
    1d74:	7d 85       	ldd	r23, Y+13	; 0x0d
    1d76:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d78:	9f 85       	ldd	r25, Y+15	; 0x0f
    1d7a:	0e 94 c8 10 	call	0x2190	; 0x2190 <__mulsf3>
    1d7e:	dc 01       	movw	r26, r24
    1d80:	cb 01       	movw	r24, r22
    1d82:	88 8b       	std	Y+16, r24	; 0x10
    1d84:	99 8b       	std	Y+17, r25	; 0x11
    1d86:	aa 8b       	std	Y+18, r26	; 0x12
    1d88:	bb 8b       	std	Y+19, r27	; 0x13
	if (__tmp < 1.0)
    1d8a:	20 e0       	ldi	r18, 0x00	; 0
    1d8c:	30 e0       	ldi	r19, 0x00	; 0
    1d8e:	40 e8       	ldi	r20, 0x80	; 128
    1d90:	5f e3       	ldi	r21, 0x3F	; 63
    1d92:	68 89       	ldd	r22, Y+16	; 0x10
    1d94:	79 89       	ldd	r23, Y+17	; 0x11
    1d96:	8a 89       	ldd	r24, Y+18	; 0x12
    1d98:	9b 89       	ldd	r25, Y+19	; 0x13
    1d9a:	0e 94 42 10 	call	0x2084	; 0x2084 <__cmpsf2>
    1d9e:	88 23       	and	r24, r24
    1da0:	2c f4       	brge	.+10     	; 0x1dac <main+0xb2>
		__ticks = 1;
    1da2:	81 e0       	ldi	r24, 0x01	; 1
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	9d 8b       	std	Y+21, r25	; 0x15
    1da8:	8c 8b       	std	Y+20, r24	; 0x14
    1daa:	3f c0       	rjmp	.+126    	; 0x1e2a <main+0x130>
	else if (__tmp > 65535)
    1dac:	20 e0       	ldi	r18, 0x00	; 0
    1dae:	3f ef       	ldi	r19, 0xFF	; 255
    1db0:	4f e7       	ldi	r20, 0x7F	; 127
    1db2:	57 e4       	ldi	r21, 0x47	; 71
    1db4:	68 89       	ldd	r22, Y+16	; 0x10
    1db6:	79 89       	ldd	r23, Y+17	; 0x11
    1db8:	8a 89       	ldd	r24, Y+18	; 0x12
    1dba:	9b 89       	ldd	r25, Y+19	; 0x13
    1dbc:	0e 94 c3 10 	call	0x2186	; 0x2186 <__gesf2>
    1dc0:	18 16       	cp	r1, r24
    1dc2:	4c f5       	brge	.+82     	; 0x1e16 <main+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dc4:	20 e0       	ldi	r18, 0x00	; 0
    1dc6:	30 e0       	ldi	r19, 0x00	; 0
    1dc8:	40 e2       	ldi	r20, 0x20	; 32
    1dca:	51 e4       	ldi	r21, 0x41	; 65
    1dcc:	6c 85       	ldd	r22, Y+12	; 0x0c
    1dce:	7d 85       	ldd	r23, Y+13	; 0x0d
    1dd0:	8e 85       	ldd	r24, Y+14	; 0x0e
    1dd2:	9f 85       	ldd	r25, Y+15	; 0x0f
    1dd4:	0e 94 c8 10 	call	0x2190	; 0x2190 <__mulsf3>
    1dd8:	dc 01       	movw	r26, r24
    1dda:	cb 01       	movw	r24, r22
    1ddc:	bc 01       	movw	r22, r24
    1dde:	cd 01       	movw	r24, r26
    1de0:	0e 94 47 10 	call	0x208e	; 0x208e <__fixunssfsi>
    1de4:	dc 01       	movw	r26, r24
    1de6:	cb 01       	movw	r24, r22
    1de8:	9d 8b       	std	Y+21, r25	; 0x15
    1dea:	8c 8b       	std	Y+20, r24	; 0x14
    1dec:	0f c0       	rjmp	.+30     	; 0x1e0c <main+0x112>
    1dee:	88 ec       	ldi	r24, 0xC8	; 200
    1df0:	90 e0       	ldi	r25, 0x00	; 0
    1df2:	9f 8b       	std	Y+23, r25	; 0x17
    1df4:	8e 8b       	std	Y+22, r24	; 0x16
    1df6:	8e 89       	ldd	r24, Y+22	; 0x16
    1df8:	9f 89       	ldd	r25, Y+23	; 0x17
    1dfa:	01 97       	sbiw	r24, 0x01	; 1
    1dfc:	f1 f7       	brne	.-4      	; 0x1dfa <main+0x100>
    1dfe:	9f 8b       	std	Y+23, r25	; 0x17
    1e00:	8e 8b       	std	Y+22, r24	; 0x16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e02:	8c 89       	ldd	r24, Y+20	; 0x14
    1e04:	9d 89       	ldd	r25, Y+21	; 0x15
    1e06:	01 97       	sbiw	r24, 0x01	; 1
    1e08:	9d 8b       	std	Y+21, r25	; 0x15
    1e0a:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e0c:	8c 89       	ldd	r24, Y+20	; 0x14
    1e0e:	9d 89       	ldd	r25, Y+21	; 0x15
    1e10:	89 2b       	or	r24, r25
    1e12:	69 f7       	brne	.-38     	; 0x1dee <main+0xf4>
    1e14:	14 c0       	rjmp	.+40     	; 0x1e3e <main+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e16:	68 89       	ldd	r22, Y+16	; 0x10
    1e18:	79 89       	ldd	r23, Y+17	; 0x11
    1e1a:	8a 89       	ldd	r24, Y+18	; 0x12
    1e1c:	9b 89       	ldd	r25, Y+19	; 0x13
    1e1e:	0e 94 47 10 	call	0x208e	; 0x208e <__fixunssfsi>
    1e22:	dc 01       	movw	r26, r24
    1e24:	cb 01       	movw	r24, r22
    1e26:	9d 8b       	std	Y+21, r25	; 0x15
    1e28:	8c 8b       	std	Y+20, r24	; 0x14
    1e2a:	8c 89       	ldd	r24, Y+20	; 0x14
    1e2c:	9d 89       	ldd	r25, Y+21	; 0x15
    1e2e:	99 8f       	std	Y+25, r25	; 0x19
    1e30:	88 8f       	std	Y+24, r24	; 0x18
    1e32:	88 8d       	ldd	r24, Y+24	; 0x18
    1e34:	99 8d       	ldd	r25, Y+25	; 0x19
    1e36:	01 97       	sbiw	r24, 0x01	; 1
    1e38:	f1 f7       	brne	.-4      	; 0x1e36 <main+0x13c>
    1e3a:	99 8f       	std	Y+25, r25	; 0x19
    1e3c:	88 8f       	std	Y+24, r24	; 0x18
	SEVSEG_voidEnable(SEG_1);
	LCD_voidInitialize();

	while(1){
			LED_voidON(LED_8);
			for(u8 i = 9 ; i > 0;i--){
    1e3e:	89 81       	ldd	r24, Y+1	; 0x01
    1e40:	81 50       	subi	r24, 0x01	; 1
    1e42:	89 83       	std	Y+1, r24	; 0x01
    1e44:	89 81       	ldd	r24, Y+1	; 0x01
    1e46:	88 23       	and	r24, r24
    1e48:	09 f0       	breq	.+2      	; 0x1e4c <main+0x152>
    1e4a:	74 cf       	rjmp	.-280    	; 0x1d34 <main+0x3a>
				LCD_voidWriteData('c');
				LCD_voidWriteData('a');
				check_amb(LED_8);
				_delay_ms(1000);
			}
			LED_voidOff(LED_8);
    1e4c:	88 e0       	ldi	r24, 0x08	; 8
    1e4e:	0e 94 23 07 	call	0xe46	; 0xe46 <LED_voidOff>
			LED_voidON(LED_9);
    1e52:	89 e0       	ldi	r24, 0x09	; 9
    1e54:	0e 94 62 06 	call	0xcc4	; 0xcc4 <LED_voidON>
			for(u8 i = 5 ; i > 0;i--){
    1e58:	85 e0       	ldi	r24, 0x05	; 5
    1e5a:	8a 83       	std	Y+2, r24	; 0x02
    1e5c:	7c c0       	rjmp	.+248    	; 0x1f56 <main+0x25c>
				SEVSEG_voidDisplay(SEG_1,i);
    1e5e:	6a 81       	ldd	r22, Y+2	; 0x02
    1e60:	81 e0       	ldi	r24, 0x01	; 1
    1e62:	0e 94 8d 08 	call	0x111a	; 0x111a <SEVSEG_voidDisplay>
				check_amb(LED_9);
    1e66:	89 e0       	ldi	r24, 0x09	; 9
    1e68:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <check_amb>
    1e6c:	80 e0       	ldi	r24, 0x00	; 0
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	aa e7       	ldi	r26, 0x7A	; 122
    1e72:	b4 e4       	ldi	r27, 0x44	; 68
    1e74:	88 87       	std	Y+8, r24	; 0x08
    1e76:	99 87       	std	Y+9, r25	; 0x09
    1e78:	aa 87       	std	Y+10, r26	; 0x0a
    1e7a:	bb 87       	std	Y+11, r27	; 0x0b

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1e7c:	20 e0       	ldi	r18, 0x00	; 0
    1e7e:	30 e0       	ldi	r19, 0x00	; 0
    1e80:	4a ef       	ldi	r20, 0xFA	; 250
    1e82:	54 e4       	ldi	r21, 0x44	; 68
    1e84:	68 85       	ldd	r22, Y+8	; 0x08
    1e86:	79 85       	ldd	r23, Y+9	; 0x09
    1e88:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e8a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e8c:	0e 94 c8 10 	call	0x2190	; 0x2190 <__mulsf3>
    1e90:	dc 01       	movw	r26, r24
    1e92:	cb 01       	movw	r24, r22
    1e94:	8a 8f       	std	Y+26, r24	; 0x1a
    1e96:	9b 8f       	std	Y+27, r25	; 0x1b
    1e98:	ac 8f       	std	Y+28, r26	; 0x1c
    1e9a:	bd 8f       	std	Y+29, r27	; 0x1d
	if (__tmp < 1.0)
    1e9c:	20 e0       	ldi	r18, 0x00	; 0
    1e9e:	30 e0       	ldi	r19, 0x00	; 0
    1ea0:	40 e8       	ldi	r20, 0x80	; 128
    1ea2:	5f e3       	ldi	r21, 0x3F	; 63
    1ea4:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1ea6:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1ea8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1eaa:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1eac:	0e 94 42 10 	call	0x2084	; 0x2084 <__cmpsf2>
    1eb0:	88 23       	and	r24, r24
    1eb2:	2c f4       	brge	.+10     	; 0x1ebe <main+0x1c4>
		__ticks = 1;
    1eb4:	81 e0       	ldi	r24, 0x01	; 1
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	9f 8f       	std	Y+31, r25	; 0x1f
    1eba:	8e 8f       	std	Y+30, r24	; 0x1e
    1ebc:	3f c0       	rjmp	.+126    	; 0x1f3c <main+0x242>
	else if (__tmp > 65535)
    1ebe:	20 e0       	ldi	r18, 0x00	; 0
    1ec0:	3f ef       	ldi	r19, 0xFF	; 255
    1ec2:	4f e7       	ldi	r20, 0x7F	; 127
    1ec4:	57 e4       	ldi	r21, 0x47	; 71
    1ec6:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1ec8:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1eca:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1ecc:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1ece:	0e 94 c3 10 	call	0x2186	; 0x2186 <__gesf2>
    1ed2:	18 16       	cp	r1, r24
    1ed4:	4c f5       	brge	.+82     	; 0x1f28 <main+0x22e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ed6:	20 e0       	ldi	r18, 0x00	; 0
    1ed8:	30 e0       	ldi	r19, 0x00	; 0
    1eda:	40 e2       	ldi	r20, 0x20	; 32
    1edc:	51 e4       	ldi	r21, 0x41	; 65
    1ede:	68 85       	ldd	r22, Y+8	; 0x08
    1ee0:	79 85       	ldd	r23, Y+9	; 0x09
    1ee2:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ee4:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ee6:	0e 94 c8 10 	call	0x2190	; 0x2190 <__mulsf3>
    1eea:	dc 01       	movw	r26, r24
    1eec:	cb 01       	movw	r24, r22
    1eee:	bc 01       	movw	r22, r24
    1ef0:	cd 01       	movw	r24, r26
    1ef2:	0e 94 47 10 	call	0x208e	; 0x208e <__fixunssfsi>
    1ef6:	dc 01       	movw	r26, r24
    1ef8:	cb 01       	movw	r24, r22
    1efa:	9f 8f       	std	Y+31, r25	; 0x1f
    1efc:	8e 8f       	std	Y+30, r24	; 0x1e
    1efe:	0f c0       	rjmp	.+30     	; 0x1f1e <main+0x224>
    1f00:	88 ec       	ldi	r24, 0xC8	; 200
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	99 a3       	std	Y+33, r25	; 0x21
    1f06:	88 a3       	std	Y+32, r24	; 0x20
    1f08:	88 a1       	ldd	r24, Y+32	; 0x20
    1f0a:	99 a1       	ldd	r25, Y+33	; 0x21
    1f0c:	01 97       	sbiw	r24, 0x01	; 1
    1f0e:	f1 f7       	brne	.-4      	; 0x1f0c <main+0x212>
    1f10:	99 a3       	std	Y+33, r25	; 0x21
    1f12:	88 a3       	std	Y+32, r24	; 0x20
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f14:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f16:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1f18:	01 97       	sbiw	r24, 0x01	; 1
    1f1a:	9f 8f       	std	Y+31, r25	; 0x1f
    1f1c:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f1e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f20:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1f22:	89 2b       	or	r24, r25
    1f24:	69 f7       	brne	.-38     	; 0x1f00 <main+0x206>
    1f26:	14 c0       	rjmp	.+40     	; 0x1f50 <main+0x256>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f28:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1f2a:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1f2c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1f2e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1f30:	0e 94 47 10 	call	0x208e	; 0x208e <__fixunssfsi>
    1f34:	dc 01       	movw	r26, r24
    1f36:	cb 01       	movw	r24, r22
    1f38:	9f 8f       	std	Y+31, r25	; 0x1f
    1f3a:	8e 8f       	std	Y+30, r24	; 0x1e
    1f3c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f3e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1f40:	9b a3       	std	Y+35, r25	; 0x23
    1f42:	8a a3       	std	Y+34, r24	; 0x22
    1f44:	8a a1       	ldd	r24, Y+34	; 0x22
    1f46:	9b a1       	ldd	r25, Y+35	; 0x23
    1f48:	01 97       	sbiw	r24, 0x01	; 1
    1f4a:	f1 f7       	brne	.-4      	; 0x1f48 <main+0x24e>
    1f4c:	9b a3       	std	Y+35, r25	; 0x23
    1f4e:	8a a3       	std	Y+34, r24	; 0x22
				check_amb(LED_8);
				_delay_ms(1000);
			}
			LED_voidOff(LED_8);
			LED_voidON(LED_9);
			for(u8 i = 5 ; i > 0;i--){
    1f50:	8a 81       	ldd	r24, Y+2	; 0x02
    1f52:	81 50       	subi	r24, 0x01	; 1
    1f54:	8a 83       	std	Y+2, r24	; 0x02
    1f56:	8a 81       	ldd	r24, Y+2	; 0x02
    1f58:	88 23       	and	r24, r24
    1f5a:	09 f0       	breq	.+2      	; 0x1f5e <main+0x264>
    1f5c:	80 cf       	rjmp	.-256    	; 0x1e5e <main+0x164>
				SEVSEG_voidDisplay(SEG_1,i);
				check_amb(LED_9);
				_delay_ms(1000);
			}
			LED_voidOff(LED_9);
    1f5e:	89 e0       	ldi	r24, 0x09	; 9
    1f60:	0e 94 23 07 	call	0xe46	; 0xe46 <LED_voidOff>
			LED_voidON(LED_10);
    1f64:	8a e0       	ldi	r24, 0x0A	; 10
    1f66:	0e 94 62 06 	call	0xcc4	; 0xcc4 <LED_voidON>
			for(u8 i = 9 ; i > 0;i--){
    1f6a:	89 e0       	ldi	r24, 0x09	; 9
    1f6c:	8b 83       	std	Y+3, r24	; 0x03
    1f6e:	7c c0       	rjmp	.+248    	; 0x2068 <main+0x36e>
				SEVSEG_voidDisplay(SEG_1,i);
    1f70:	6b 81       	ldd	r22, Y+3	; 0x03
    1f72:	81 e0       	ldi	r24, 0x01	; 1
    1f74:	0e 94 8d 08 	call	0x111a	; 0x111a <SEVSEG_voidDisplay>
				check_amb(LED_10);
    1f78:	8a e0       	ldi	r24, 0x0A	; 10
    1f7a:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <check_amb>
    1f7e:	80 e0       	ldi	r24, 0x00	; 0
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	aa e7       	ldi	r26, 0x7A	; 122
    1f84:	b4 e4       	ldi	r27, 0x44	; 68
    1f86:	8c 83       	std	Y+4, r24	; 0x04
    1f88:	9d 83       	std	Y+5, r25	; 0x05
    1f8a:	ae 83       	std	Y+6, r26	; 0x06
    1f8c:	bf 83       	std	Y+7, r27	; 0x07

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1f8e:	20 e0       	ldi	r18, 0x00	; 0
    1f90:	30 e0       	ldi	r19, 0x00	; 0
    1f92:	4a ef       	ldi	r20, 0xFA	; 250
    1f94:	54 e4       	ldi	r21, 0x44	; 68
    1f96:	6c 81       	ldd	r22, Y+4	; 0x04
    1f98:	7d 81       	ldd	r23, Y+5	; 0x05
    1f9a:	8e 81       	ldd	r24, Y+6	; 0x06
    1f9c:	9f 81       	ldd	r25, Y+7	; 0x07
    1f9e:	0e 94 c8 10 	call	0x2190	; 0x2190 <__mulsf3>
    1fa2:	dc 01       	movw	r26, r24
    1fa4:	cb 01       	movw	r24, r22
    1fa6:	8c a3       	std	Y+36, r24	; 0x24
    1fa8:	9d a3       	std	Y+37, r25	; 0x25
    1faa:	ae a3       	std	Y+38, r26	; 0x26
    1fac:	bf a3       	std	Y+39, r27	; 0x27
	if (__tmp < 1.0)
    1fae:	20 e0       	ldi	r18, 0x00	; 0
    1fb0:	30 e0       	ldi	r19, 0x00	; 0
    1fb2:	40 e8       	ldi	r20, 0x80	; 128
    1fb4:	5f e3       	ldi	r21, 0x3F	; 63
    1fb6:	6c a1       	ldd	r22, Y+36	; 0x24
    1fb8:	7d a1       	ldd	r23, Y+37	; 0x25
    1fba:	8e a1       	ldd	r24, Y+38	; 0x26
    1fbc:	9f a1       	ldd	r25, Y+39	; 0x27
    1fbe:	0e 94 42 10 	call	0x2084	; 0x2084 <__cmpsf2>
    1fc2:	88 23       	and	r24, r24
    1fc4:	2c f4       	brge	.+10     	; 0x1fd0 <main+0x2d6>
		__ticks = 1;
    1fc6:	81 e0       	ldi	r24, 0x01	; 1
    1fc8:	90 e0       	ldi	r25, 0x00	; 0
    1fca:	99 a7       	std	Y+41, r25	; 0x29
    1fcc:	88 a7       	std	Y+40, r24	; 0x28
    1fce:	3f c0       	rjmp	.+126    	; 0x204e <main+0x354>
	else if (__tmp > 65535)
    1fd0:	20 e0       	ldi	r18, 0x00	; 0
    1fd2:	3f ef       	ldi	r19, 0xFF	; 255
    1fd4:	4f e7       	ldi	r20, 0x7F	; 127
    1fd6:	57 e4       	ldi	r21, 0x47	; 71
    1fd8:	6c a1       	ldd	r22, Y+36	; 0x24
    1fda:	7d a1       	ldd	r23, Y+37	; 0x25
    1fdc:	8e a1       	ldd	r24, Y+38	; 0x26
    1fde:	9f a1       	ldd	r25, Y+39	; 0x27
    1fe0:	0e 94 c3 10 	call	0x2186	; 0x2186 <__gesf2>
    1fe4:	18 16       	cp	r1, r24
    1fe6:	4c f5       	brge	.+82     	; 0x203a <main+0x340>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fe8:	20 e0       	ldi	r18, 0x00	; 0
    1fea:	30 e0       	ldi	r19, 0x00	; 0
    1fec:	40 e2       	ldi	r20, 0x20	; 32
    1fee:	51 e4       	ldi	r21, 0x41	; 65
    1ff0:	6c 81       	ldd	r22, Y+4	; 0x04
    1ff2:	7d 81       	ldd	r23, Y+5	; 0x05
    1ff4:	8e 81       	ldd	r24, Y+6	; 0x06
    1ff6:	9f 81       	ldd	r25, Y+7	; 0x07
    1ff8:	0e 94 c8 10 	call	0x2190	; 0x2190 <__mulsf3>
    1ffc:	dc 01       	movw	r26, r24
    1ffe:	cb 01       	movw	r24, r22
    2000:	bc 01       	movw	r22, r24
    2002:	cd 01       	movw	r24, r26
    2004:	0e 94 47 10 	call	0x208e	; 0x208e <__fixunssfsi>
    2008:	dc 01       	movw	r26, r24
    200a:	cb 01       	movw	r24, r22
    200c:	99 a7       	std	Y+41, r25	; 0x29
    200e:	88 a7       	std	Y+40, r24	; 0x28
    2010:	0f c0       	rjmp	.+30     	; 0x2030 <main+0x336>
    2012:	88 ec       	ldi	r24, 0xC8	; 200
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	9b a7       	std	Y+43, r25	; 0x2b
    2018:	8a a7       	std	Y+42, r24	; 0x2a
    201a:	8a a5       	ldd	r24, Y+42	; 0x2a
    201c:	9b a5       	ldd	r25, Y+43	; 0x2b
    201e:	01 97       	sbiw	r24, 0x01	; 1
    2020:	f1 f7       	brne	.-4      	; 0x201e <main+0x324>
    2022:	9b a7       	std	Y+43, r25	; 0x2b
    2024:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2026:	88 a5       	ldd	r24, Y+40	; 0x28
    2028:	99 a5       	ldd	r25, Y+41	; 0x29
    202a:	01 97       	sbiw	r24, 0x01	; 1
    202c:	99 a7       	std	Y+41, r25	; 0x29
    202e:	88 a7       	std	Y+40, r24	; 0x28
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2030:	88 a5       	ldd	r24, Y+40	; 0x28
    2032:	99 a5       	ldd	r25, Y+41	; 0x29
    2034:	89 2b       	or	r24, r25
    2036:	69 f7       	brne	.-38     	; 0x2012 <main+0x318>
    2038:	14 c0       	rjmp	.+40     	; 0x2062 <main+0x368>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    203a:	6c a1       	ldd	r22, Y+36	; 0x24
    203c:	7d a1       	ldd	r23, Y+37	; 0x25
    203e:	8e a1       	ldd	r24, Y+38	; 0x26
    2040:	9f a1       	ldd	r25, Y+39	; 0x27
    2042:	0e 94 47 10 	call	0x208e	; 0x208e <__fixunssfsi>
    2046:	dc 01       	movw	r26, r24
    2048:	cb 01       	movw	r24, r22
    204a:	99 a7       	std	Y+41, r25	; 0x29
    204c:	88 a7       	std	Y+40, r24	; 0x28
    204e:	88 a5       	ldd	r24, Y+40	; 0x28
    2050:	99 a5       	ldd	r25, Y+41	; 0x29
    2052:	9d a7       	std	Y+45, r25	; 0x2d
    2054:	8c a7       	std	Y+44, r24	; 0x2c
    2056:	8c a5       	ldd	r24, Y+44	; 0x2c
    2058:	9d a5       	ldd	r25, Y+45	; 0x2d
    205a:	01 97       	sbiw	r24, 0x01	; 1
    205c:	f1 f7       	brne	.-4      	; 0x205a <main+0x360>
    205e:	9d a7       	std	Y+45, r25	; 0x2d
    2060:	8c a7       	std	Y+44, r24	; 0x2c
				check_amb(LED_9);
				_delay_ms(1000);
			}
			LED_voidOff(LED_9);
			LED_voidON(LED_10);
			for(u8 i = 9 ; i > 0;i--){
    2062:	8b 81       	ldd	r24, Y+3	; 0x03
    2064:	81 50       	subi	r24, 0x01	; 1
    2066:	8b 83       	std	Y+3, r24	; 0x03
    2068:	8b 81       	ldd	r24, Y+3	; 0x03
    206a:	88 23       	and	r24, r24
    206c:	09 f0       	breq	.+2      	; 0x2070 <main+0x376>
    206e:	80 cf       	rjmp	.-256    	; 0x1f70 <main+0x276>
				SEVSEG_voidDisplay(SEG_1,i);
				check_amb(LED_10);
				_delay_ms(1000);
			}
			LED_voidOff(LED_10);
    2070:	8a e0       	ldi	r24, 0x0A	; 10
    2072:	0e 94 23 07 	call	0xe46	; 0xe46 <LED_voidOff>





	}
    2076:	58 ce       	rjmp	.-848    	; 0x1d28 <main+0x2e>

00002078 <__tablejump2__>:
    2078:	ee 0f       	add	r30, r30
    207a:	ff 1f       	adc	r31, r31
    207c:	05 90       	lpm	r0, Z+
    207e:	f4 91       	lpm	r31, Z
    2080:	e0 2d       	mov	r30, r0
    2082:	09 94       	ijmp

00002084 <__cmpsf2>:
    2084:	0e 94 76 10 	call	0x20ec	; 0x20ec <__fp_cmp>
    2088:	08 f4       	brcc	.+2      	; 0x208c <__cmpsf2+0x8>
    208a:	81 e0       	ldi	r24, 0x01	; 1
    208c:	08 95       	ret

0000208e <__fixunssfsi>:
    208e:	0e 94 a2 10 	call	0x2144	; 0x2144 <__fp_splitA>
    2092:	88 f0       	brcs	.+34     	; 0x20b6 <__fixunssfsi+0x28>
    2094:	9f 57       	subi	r25, 0x7F	; 127
    2096:	98 f0       	brcs	.+38     	; 0x20be <__fixunssfsi+0x30>
    2098:	b9 2f       	mov	r27, r25
    209a:	99 27       	eor	r25, r25
    209c:	b7 51       	subi	r27, 0x17	; 23
    209e:	b0 f0       	brcs	.+44     	; 0x20cc <__fixunssfsi+0x3e>
    20a0:	e1 f0       	breq	.+56     	; 0x20da <__fixunssfsi+0x4c>
    20a2:	66 0f       	add	r22, r22
    20a4:	77 1f       	adc	r23, r23
    20a6:	88 1f       	adc	r24, r24
    20a8:	99 1f       	adc	r25, r25
    20aa:	1a f0       	brmi	.+6      	; 0x20b2 <__fixunssfsi+0x24>
    20ac:	ba 95       	dec	r27
    20ae:	c9 f7       	brne	.-14     	; 0x20a2 <__fixunssfsi+0x14>
    20b0:	14 c0       	rjmp	.+40     	; 0x20da <__fixunssfsi+0x4c>
    20b2:	b1 30       	cpi	r27, 0x01	; 1
    20b4:	91 f0       	breq	.+36     	; 0x20da <__fixunssfsi+0x4c>
    20b6:	0e 94 bc 10 	call	0x2178	; 0x2178 <__fp_zero>
    20ba:	b1 e0       	ldi	r27, 0x01	; 1
    20bc:	08 95       	ret
    20be:	0c 94 bc 10 	jmp	0x2178	; 0x2178 <__fp_zero>
    20c2:	67 2f       	mov	r22, r23
    20c4:	78 2f       	mov	r23, r24
    20c6:	88 27       	eor	r24, r24
    20c8:	b8 5f       	subi	r27, 0xF8	; 248
    20ca:	39 f0       	breq	.+14     	; 0x20da <__fixunssfsi+0x4c>
    20cc:	b9 3f       	cpi	r27, 0xF9	; 249
    20ce:	cc f3       	brlt	.-14     	; 0x20c2 <__fixunssfsi+0x34>
    20d0:	86 95       	lsr	r24
    20d2:	77 95       	ror	r23
    20d4:	67 95       	ror	r22
    20d6:	b3 95       	inc	r27
    20d8:	d9 f7       	brne	.-10     	; 0x20d0 <__fixunssfsi+0x42>
    20da:	3e f4       	brtc	.+14     	; 0x20ea <__fixunssfsi+0x5c>
    20dc:	90 95       	com	r25
    20de:	80 95       	com	r24
    20e0:	70 95       	com	r23
    20e2:	61 95       	neg	r22
    20e4:	7f 4f       	sbci	r23, 0xFF	; 255
    20e6:	8f 4f       	sbci	r24, 0xFF	; 255
    20e8:	9f 4f       	sbci	r25, 0xFF	; 255
    20ea:	08 95       	ret

000020ec <__fp_cmp>:
    20ec:	99 0f       	add	r25, r25
    20ee:	00 08       	sbc	r0, r0
    20f0:	55 0f       	add	r21, r21
    20f2:	aa 0b       	sbc	r26, r26
    20f4:	e0 e8       	ldi	r30, 0x80	; 128
    20f6:	fe ef       	ldi	r31, 0xFE	; 254
    20f8:	16 16       	cp	r1, r22
    20fa:	17 06       	cpc	r1, r23
    20fc:	e8 07       	cpc	r30, r24
    20fe:	f9 07       	cpc	r31, r25
    2100:	c0 f0       	brcs	.+48     	; 0x2132 <__fp_cmp+0x46>
    2102:	12 16       	cp	r1, r18
    2104:	13 06       	cpc	r1, r19
    2106:	e4 07       	cpc	r30, r20
    2108:	f5 07       	cpc	r31, r21
    210a:	98 f0       	brcs	.+38     	; 0x2132 <__fp_cmp+0x46>
    210c:	62 1b       	sub	r22, r18
    210e:	73 0b       	sbc	r23, r19
    2110:	84 0b       	sbc	r24, r20
    2112:	95 0b       	sbc	r25, r21
    2114:	39 f4       	brne	.+14     	; 0x2124 <__fp_cmp+0x38>
    2116:	0a 26       	eor	r0, r26
    2118:	61 f0       	breq	.+24     	; 0x2132 <__fp_cmp+0x46>
    211a:	23 2b       	or	r18, r19
    211c:	24 2b       	or	r18, r20
    211e:	25 2b       	or	r18, r21
    2120:	21 f4       	brne	.+8      	; 0x212a <__fp_cmp+0x3e>
    2122:	08 95       	ret
    2124:	0a 26       	eor	r0, r26
    2126:	09 f4       	brne	.+2      	; 0x212a <__fp_cmp+0x3e>
    2128:	a1 40       	sbci	r26, 0x01	; 1
    212a:	a6 95       	lsr	r26
    212c:	8f ef       	ldi	r24, 0xFF	; 255
    212e:	81 1d       	adc	r24, r1
    2130:	81 1d       	adc	r24, r1
    2132:	08 95       	ret

00002134 <__fp_split3>:
    2134:	57 fd       	sbrc	r21, 7
    2136:	90 58       	subi	r25, 0x80	; 128
    2138:	44 0f       	add	r20, r20
    213a:	55 1f       	adc	r21, r21
    213c:	59 f0       	breq	.+22     	; 0x2154 <__fp_splitA+0x10>
    213e:	5f 3f       	cpi	r21, 0xFF	; 255
    2140:	71 f0       	breq	.+28     	; 0x215e <__fp_splitA+0x1a>
    2142:	47 95       	ror	r20

00002144 <__fp_splitA>:
    2144:	88 0f       	add	r24, r24
    2146:	97 fb       	bst	r25, 7
    2148:	99 1f       	adc	r25, r25
    214a:	61 f0       	breq	.+24     	; 0x2164 <__fp_splitA+0x20>
    214c:	9f 3f       	cpi	r25, 0xFF	; 255
    214e:	79 f0       	breq	.+30     	; 0x216e <__fp_splitA+0x2a>
    2150:	87 95       	ror	r24
    2152:	08 95       	ret
    2154:	12 16       	cp	r1, r18
    2156:	13 06       	cpc	r1, r19
    2158:	14 06       	cpc	r1, r20
    215a:	55 1f       	adc	r21, r21
    215c:	f2 cf       	rjmp	.-28     	; 0x2142 <__fp_split3+0xe>
    215e:	46 95       	lsr	r20
    2160:	f1 df       	rcall	.-30     	; 0x2144 <__fp_splitA>
    2162:	08 c0       	rjmp	.+16     	; 0x2174 <__fp_splitA+0x30>
    2164:	16 16       	cp	r1, r22
    2166:	17 06       	cpc	r1, r23
    2168:	18 06       	cpc	r1, r24
    216a:	99 1f       	adc	r25, r25
    216c:	f1 cf       	rjmp	.-30     	; 0x2150 <__fp_splitA+0xc>
    216e:	86 95       	lsr	r24
    2170:	71 05       	cpc	r23, r1
    2172:	61 05       	cpc	r22, r1
    2174:	08 94       	sec
    2176:	08 95       	ret

00002178 <__fp_zero>:
    2178:	e8 94       	clt

0000217a <__fp_szero>:
    217a:	bb 27       	eor	r27, r27
    217c:	66 27       	eor	r22, r22
    217e:	77 27       	eor	r23, r23
    2180:	cb 01       	movw	r24, r22
    2182:	97 f9       	bld	r25, 7
    2184:	08 95       	ret

00002186 <__gesf2>:
    2186:	0e 94 76 10 	call	0x20ec	; 0x20ec <__fp_cmp>
    218a:	08 f4       	brcc	.+2      	; 0x218e <__gesf2+0x8>
    218c:	8f ef       	ldi	r24, 0xFF	; 255
    218e:	08 95       	ret

00002190 <__mulsf3>:
    2190:	0e 94 db 10 	call	0x21b6	; 0x21b6 <__mulsf3x>
    2194:	0c 94 4c 11 	jmp	0x2298	; 0x2298 <__fp_round>
    2198:	0e 94 3e 11 	call	0x227c	; 0x227c <__fp_pscA>
    219c:	38 f0       	brcs	.+14     	; 0x21ac <__mulsf3+0x1c>
    219e:	0e 94 45 11 	call	0x228a	; 0x228a <__fp_pscB>
    21a2:	20 f0       	brcs	.+8      	; 0x21ac <__mulsf3+0x1c>
    21a4:	95 23       	and	r25, r21
    21a6:	11 f0       	breq	.+4      	; 0x21ac <__mulsf3+0x1c>
    21a8:	0c 94 35 11 	jmp	0x226a	; 0x226a <__fp_inf>
    21ac:	0c 94 3b 11 	jmp	0x2276	; 0x2276 <__fp_nan>
    21b0:	11 24       	eor	r1, r1
    21b2:	0c 94 bd 10 	jmp	0x217a	; 0x217a <__fp_szero>

000021b6 <__mulsf3x>:
    21b6:	0e 94 9a 10 	call	0x2134	; 0x2134 <__fp_split3>
    21ba:	70 f3       	brcs	.-36     	; 0x2198 <__mulsf3+0x8>

000021bc <__mulsf3_pse>:
    21bc:	95 9f       	mul	r25, r21
    21be:	c1 f3       	breq	.-16     	; 0x21b0 <__mulsf3+0x20>
    21c0:	95 0f       	add	r25, r21
    21c2:	50 e0       	ldi	r21, 0x00	; 0
    21c4:	55 1f       	adc	r21, r21
    21c6:	62 9f       	mul	r22, r18
    21c8:	f0 01       	movw	r30, r0
    21ca:	72 9f       	mul	r23, r18
    21cc:	bb 27       	eor	r27, r27
    21ce:	f0 0d       	add	r31, r0
    21d0:	b1 1d       	adc	r27, r1
    21d2:	63 9f       	mul	r22, r19
    21d4:	aa 27       	eor	r26, r26
    21d6:	f0 0d       	add	r31, r0
    21d8:	b1 1d       	adc	r27, r1
    21da:	aa 1f       	adc	r26, r26
    21dc:	64 9f       	mul	r22, r20
    21de:	66 27       	eor	r22, r22
    21e0:	b0 0d       	add	r27, r0
    21e2:	a1 1d       	adc	r26, r1
    21e4:	66 1f       	adc	r22, r22
    21e6:	82 9f       	mul	r24, r18
    21e8:	22 27       	eor	r18, r18
    21ea:	b0 0d       	add	r27, r0
    21ec:	a1 1d       	adc	r26, r1
    21ee:	62 1f       	adc	r22, r18
    21f0:	73 9f       	mul	r23, r19
    21f2:	b0 0d       	add	r27, r0
    21f4:	a1 1d       	adc	r26, r1
    21f6:	62 1f       	adc	r22, r18
    21f8:	83 9f       	mul	r24, r19
    21fa:	a0 0d       	add	r26, r0
    21fc:	61 1d       	adc	r22, r1
    21fe:	22 1f       	adc	r18, r18
    2200:	74 9f       	mul	r23, r20
    2202:	33 27       	eor	r19, r19
    2204:	a0 0d       	add	r26, r0
    2206:	61 1d       	adc	r22, r1
    2208:	23 1f       	adc	r18, r19
    220a:	84 9f       	mul	r24, r20
    220c:	60 0d       	add	r22, r0
    220e:	21 1d       	adc	r18, r1
    2210:	82 2f       	mov	r24, r18
    2212:	76 2f       	mov	r23, r22
    2214:	6a 2f       	mov	r22, r26
    2216:	11 24       	eor	r1, r1
    2218:	9f 57       	subi	r25, 0x7F	; 127
    221a:	50 40       	sbci	r21, 0x00	; 0
    221c:	9a f0       	brmi	.+38     	; 0x2244 <__mulsf3_pse+0x88>
    221e:	f1 f0       	breq	.+60     	; 0x225c <__mulsf3_pse+0xa0>
    2220:	88 23       	and	r24, r24
    2222:	4a f0       	brmi	.+18     	; 0x2236 <__mulsf3_pse+0x7a>
    2224:	ee 0f       	add	r30, r30
    2226:	ff 1f       	adc	r31, r31
    2228:	bb 1f       	adc	r27, r27
    222a:	66 1f       	adc	r22, r22
    222c:	77 1f       	adc	r23, r23
    222e:	88 1f       	adc	r24, r24
    2230:	91 50       	subi	r25, 0x01	; 1
    2232:	50 40       	sbci	r21, 0x00	; 0
    2234:	a9 f7       	brne	.-22     	; 0x2220 <__mulsf3_pse+0x64>
    2236:	9e 3f       	cpi	r25, 0xFE	; 254
    2238:	51 05       	cpc	r21, r1
    223a:	80 f0       	brcs	.+32     	; 0x225c <__mulsf3_pse+0xa0>
    223c:	0c 94 35 11 	jmp	0x226a	; 0x226a <__fp_inf>
    2240:	0c 94 bd 10 	jmp	0x217a	; 0x217a <__fp_szero>
    2244:	5f 3f       	cpi	r21, 0xFF	; 255
    2246:	e4 f3       	brlt	.-8      	; 0x2240 <__mulsf3_pse+0x84>
    2248:	98 3e       	cpi	r25, 0xE8	; 232
    224a:	d4 f3       	brlt	.-12     	; 0x2240 <__mulsf3_pse+0x84>
    224c:	86 95       	lsr	r24
    224e:	77 95       	ror	r23
    2250:	67 95       	ror	r22
    2252:	b7 95       	ror	r27
    2254:	f7 95       	ror	r31
    2256:	e7 95       	ror	r30
    2258:	9f 5f       	subi	r25, 0xFF	; 255
    225a:	c1 f7       	brne	.-16     	; 0x224c <__mulsf3_pse+0x90>
    225c:	fe 2b       	or	r31, r30
    225e:	88 0f       	add	r24, r24
    2260:	91 1d       	adc	r25, r1
    2262:	96 95       	lsr	r25
    2264:	87 95       	ror	r24
    2266:	97 f9       	bld	r25, 7
    2268:	08 95       	ret

0000226a <__fp_inf>:
    226a:	97 f9       	bld	r25, 7
    226c:	9f 67       	ori	r25, 0x7F	; 127
    226e:	80 e8       	ldi	r24, 0x80	; 128
    2270:	70 e0       	ldi	r23, 0x00	; 0
    2272:	60 e0       	ldi	r22, 0x00	; 0
    2274:	08 95       	ret

00002276 <__fp_nan>:
    2276:	9f ef       	ldi	r25, 0xFF	; 255
    2278:	80 ec       	ldi	r24, 0xC0	; 192
    227a:	08 95       	ret

0000227c <__fp_pscA>:
    227c:	00 24       	eor	r0, r0
    227e:	0a 94       	dec	r0
    2280:	16 16       	cp	r1, r22
    2282:	17 06       	cpc	r1, r23
    2284:	18 06       	cpc	r1, r24
    2286:	09 06       	cpc	r0, r25
    2288:	08 95       	ret

0000228a <__fp_pscB>:
    228a:	00 24       	eor	r0, r0
    228c:	0a 94       	dec	r0
    228e:	12 16       	cp	r1, r18
    2290:	13 06       	cpc	r1, r19
    2292:	14 06       	cpc	r1, r20
    2294:	05 06       	cpc	r0, r21
    2296:	08 95       	ret

00002298 <__fp_round>:
    2298:	09 2e       	mov	r0, r25
    229a:	03 94       	inc	r0
    229c:	00 0c       	add	r0, r0
    229e:	11 f4       	brne	.+4      	; 0x22a4 <__fp_round+0xc>
    22a0:	88 23       	and	r24, r24
    22a2:	52 f0       	brmi	.+20     	; 0x22b8 <__fp_round+0x20>
    22a4:	bb 0f       	add	r27, r27
    22a6:	40 f4       	brcc	.+16     	; 0x22b8 <__fp_round+0x20>
    22a8:	bf 2b       	or	r27, r31
    22aa:	11 f4       	brne	.+4      	; 0x22b0 <__fp_round+0x18>
    22ac:	60 ff       	sbrs	r22, 0
    22ae:	04 c0       	rjmp	.+8      	; 0x22b8 <__fp_round+0x20>
    22b0:	6f 5f       	subi	r22, 0xFF	; 255
    22b2:	7f 4f       	sbci	r23, 0xFF	; 255
    22b4:	8f 4f       	sbci	r24, 0xFF	; 255
    22b6:	9f 4f       	sbci	r25, 0xFF	; 255
    22b8:	08 95       	ret

000022ba <_exit>:
    22ba:	f8 94       	cli

000022bc <__stop_program>:
    22bc:	ff cf       	rjmp	.-2      	; 0x22bc <__stop_program>
