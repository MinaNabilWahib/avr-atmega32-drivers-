
RTOS_TRY1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000cfe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00000cfe  00000d92  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  0080006c  0080006c  00000d9e  2**0
                  ALLOC
  3 .stab         000023c4  00000000  00000000  00000da0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000fe7  00000000  00000000  00003164  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000414b  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000415c  2**2
                  CONTENTS, READONLY
  7 .debug_info   000004e6  00000000  00000000  00004198  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004a3  00000000  00000000  0000467e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  00004b21  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000196  00000000  00000000  00004b3b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 8a 00 	jmp	0x114	; 0x114 <__ctors_end>
   4:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
   8:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
   c:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  10:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  14:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  18:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  1c:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  20:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  24:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  28:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  2c:	0c 94 08 06 	jmp	0xc10	; 0xc10 <__vector_11>
  30:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  34:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  38:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  3c:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  40:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  44:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  48:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  4c:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  50:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  54:	ee 02       	muls	r30, r30
  56:	f3 02       	muls	r31, r19
  58:	f8 02       	muls	r31, r24
  5a:	fd 02       	muls	r31, r29
  5c:	02 03       	mulsu	r16, r18
  5e:	07 03       	mulsu	r16, r23
  60:	0c 03       	fmul	r16, r20
  62:	11 03       	mulsu	r17, r17
  64:	16 03       	mulsu	r17, r22
  66:	1b 03       	fmul	r17, r19
  68:	20 03       	mulsu	r18, r16
  6a:	25 03       	mulsu	r18, r21
  6c:	2a 03       	fmul	r18, r18
  6e:	2f 03       	fmul	r18, r23
  70:	34 03       	mulsu	r19, r20
  72:	39 03       	fmul	r19, r17
  74:	3e 03       	fmul	r19, r22
  76:	43 03       	mulsu	r20, r19
  78:	48 03       	fmul	r20, r16
  7a:	4d 03       	fmul	r20, r21
  7c:	52 03       	mulsu	r21, r18
  7e:	57 03       	mulsu	r21, r23
  80:	5c 03       	fmul	r21, r20
  82:	61 03       	mulsu	r22, r17
  84:	66 03       	mulsu	r22, r22
  86:	6b 03       	fmul	r22, r19
  88:	70 03       	mulsu	r23, r16
  8a:	75 03       	mulsu	r23, r21
  8c:	7a 03       	fmul	r23, r18
  8e:	7f 03       	fmul	r23, r23
  90:	84 03       	fmuls	r16, r20
  92:	89 03       	fmulsu	r16, r17
  94:	af 03       	fmulsu	r18, r23
  96:	b4 03       	fmuls	r19, r20
  98:	b9 03       	fmulsu	r19, r17
  9a:	be 03       	fmulsu	r19, r22
  9c:	c3 03       	fmuls	r20, r19
  9e:	c8 03       	fmulsu	r20, r16
  a0:	cd 03       	fmulsu	r20, r21
  a2:	d2 03       	fmuls	r21, r18
  a4:	d7 03       	fmuls	r21, r23
  a6:	dc 03       	fmulsu	r21, r20
  a8:	e1 03       	fmuls	r22, r17
  aa:	e6 03       	fmuls	r22, r22
  ac:	eb 03       	fmulsu	r22, r19
  ae:	f0 03       	fmuls	r23, r16
  b0:	f5 03       	fmuls	r23, r21
  b2:	fa 03       	fmulsu	r23, r18
  b4:	ff 03       	fmulsu	r23, r23
  b6:	04 04       	cpc	r0, r4
  b8:	09 04       	cpc	r0, r9
  ba:	0e 04       	cpc	r0, r14
  bc:	13 04       	cpc	r1, r3
  be:	18 04       	cpc	r1, r8
  c0:	1d 04       	cpc	r1, r13
  c2:	22 04       	cpc	r2, r2
  c4:	27 04       	cpc	r2, r7
  c6:	2c 04       	cpc	r2, r12
  c8:	31 04       	cpc	r3, r1
  ca:	36 04       	cpc	r3, r6
  cc:	3b 04       	cpc	r3, r11
  ce:	40 04       	cpc	r4, r0
  d0:	45 04       	cpc	r4, r5
  d2:	4a 04       	cpc	r4, r10
  d4:	70 04       	cpc	r7, r0
  d6:	74 04       	cpc	r7, r4
  d8:	78 04       	cpc	r7, r8
  da:	7c 04       	cpc	r7, r12
  dc:	80 04       	cpc	r8, r0
  de:	84 04       	cpc	r8, r4
  e0:	88 04       	cpc	r8, r8
  e2:	8c 04       	cpc	r8, r12
  e4:	90 04       	cpc	r9, r0
  e6:	94 04       	cpc	r9, r4
  e8:	98 04       	cpc	r9, r8
  ea:	9c 04       	cpc	r9, r12
  ec:	a0 04       	cpc	r10, r0
  ee:	a4 04       	cpc	r10, r4
  f0:	a8 04       	cpc	r10, r8
  f2:	ac 04       	cpc	r10, r12
  f4:	b0 04       	cpc	r11, r0
  f6:	b4 04       	cpc	r11, r4
  f8:	b8 04       	cpc	r11, r8
  fa:	bc 04       	cpc	r11, r12
  fc:	c0 04       	cpc	r12, r0
  fe:	c4 04       	cpc	r12, r4
 100:	c8 04       	cpc	r12, r8
 102:	cc 04       	cpc	r12, r12
 104:	d0 04       	cpc	r13, r0
 106:	d4 04       	cpc	r13, r4
 108:	d8 04       	cpc	r13, r8
 10a:	dc 04       	cpc	r13, r12
 10c:	e0 04       	cpc	r14, r0
 10e:	e4 04       	cpc	r14, r4
 110:	e8 04       	cpc	r14, r8
 112:	ec 04       	cpc	r14, r12

00000114 <__ctors_end>:
 114:	11 24       	eor	r1, r1
 116:	1f be       	out	0x3f, r1	; 63
 118:	cf e5       	ldi	r28, 0x5F	; 95
 11a:	d8 e0       	ldi	r29, 0x08	; 8
 11c:	de bf       	out	0x3e, r29	; 62
 11e:	cd bf       	out	0x3d, r28	; 61

00000120 <__do_copy_data>:
 120:	10 e0       	ldi	r17, 0x00	; 0
 122:	a0 e6       	ldi	r26, 0x60	; 96
 124:	b0 e0       	ldi	r27, 0x00	; 0
 126:	ee ef       	ldi	r30, 0xFE	; 254
 128:	fc e0       	ldi	r31, 0x0C	; 12
 12a:	02 c0       	rjmp	.+4      	; 0x130 <__do_copy_data+0x10>
 12c:	05 90       	lpm	r0, Z+
 12e:	0d 92       	st	X+, r0
 130:	ac 36       	cpi	r26, 0x6C	; 108
 132:	b1 07       	cpc	r27, r17
 134:	d9 f7       	brne	.-10     	; 0x12c <__do_copy_data+0xc>

00000136 <__do_clear_bss>:
 136:	20 e0       	ldi	r18, 0x00	; 0
 138:	ac e6       	ldi	r26, 0x6C	; 108
 13a:	b0 e0       	ldi	r27, 0x00	; 0
 13c:	01 c0       	rjmp	.+2      	; 0x140 <.do_clear_bss_start>

0000013e <.do_clear_bss_loop>:
 13e:	1d 92       	st	X+, r1

00000140 <.do_clear_bss_start>:
 140:	a4 37       	cpi	r26, 0x74	; 116
 142:	b2 07       	cpc	r27, r18
 144:	e1 f7       	brne	.-8      	; 0x13e <.do_clear_bss_loop>
 146:	0e 94 39 06 	call	0xc72	; 0xc72 <main>
 14a:	0c 94 7d 06 	jmp	0xcfa	; 0xcfa <_exit>

0000014e <__bad_interrupt>:
 14e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000152 <DIO_voidInitialize>:
#include "BIT_MATH.h"
#include "DIO_priv.h"
#include "DIO_config.h"
#include "DIO_int.h"

void DIO_voidInitialize(void){
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	cd b7       	in	r28, 0x3d	; 61
 158:	de b7       	in	r29, 0x3e	; 62

	DDRA = CONCBIT(PIN_7DIR,PIN_6DIR,PIN_5DIR,PIN_4DIR,PIN_3DIR,PIN_2DIR,PIN_1DIR,PIN_0DIR);
 15a:	8a e3       	ldi	r24, 0x3A	; 58
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	2f e1       	ldi	r18, 0x1F	; 31
 160:	fc 01       	movw	r30, r24
 162:	20 83       	st	Z, r18
	DDRB = CONCBIT(PIN_15DIR,PIN_14DIR,PIN_13DIR,PIN_12DIR,PIN_11DIR,PIN_10DIR,PIN_9DIR,PIN_8DIR);
 164:	87 e3       	ldi	r24, 0x37	; 55
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	fc 01       	movw	r30, r24
 16a:	10 82       	st	Z, r1
	DDRC = CONCBIT(PIN_23DIR,PIN_22DIR,PIN_21DIR,PIN_20DIR,PIN_19DIR,PIN_18DIR,PIN_17DIR,PIN_16DIR);
 16c:	84 e3       	ldi	r24, 0x34	; 52
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	fc 01       	movw	r30, r24
 172:	10 82       	st	Z, r1
	DDRD = CONCBIT(PIN_31DIR,PIN_30DIR,PIN_29DIR,PIN_28DIR,PIN_27DIR,PIN_26DIR,PIN_25DIR,PIN_24DIR);
 174:	81 e3       	ldi	r24, 0x31	; 49
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	fc 01       	movw	r30, r24
 17a:	10 82       	st	Z, r1

}
 17c:	00 00       	nop
 17e:	df 91       	pop	r29
 180:	cf 91       	pop	r28
 182:	08 95       	ret

00000184 <DIO_voidSetPin>:

void DIO_voidSetPin(u8 PinNum,u8 Value){
 184:	cf 93       	push	r28
 186:	df 93       	push	r29
 188:	00 d0       	rcall	.+0      	; 0x18a <DIO_voidSetPin+0x6>
 18a:	cd b7       	in	r28, 0x3d	; 61
 18c:	de b7       	in	r29, 0x3e	; 62
 18e:	89 83       	std	Y+1, r24	; 0x01
 190:	6a 83       	std	Y+2, r22	; 0x02
    if (Value==HIGH){
 192:	8a 81       	ldd	r24, Y+2	; 0x02
 194:	81 30       	cpi	r24, 0x01	; 1
 196:	09 f0       	breq	.+2      	; 0x19a <DIO_voidSetPin+0x16>
 198:	74 c0       	rjmp	.+232    	; 0x282 <DIO_voidSetPin+0xfe>

        if((PinNum>=0 && PinNum<8)){
 19a:	89 81       	ldd	r24, Y+1	; 0x01
 19c:	88 30       	cpi	r24, 0x08	; 8
 19e:	a8 f4       	brcc	.+42     	; 0x1ca <DIO_voidSetPin+0x46>
            SETBIT(PORTA,PinNum);
 1a0:	8b e3       	ldi	r24, 0x3B	; 59
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	2b e3       	ldi	r18, 0x3B	; 59
 1a6:	30 e0       	ldi	r19, 0x00	; 0
 1a8:	f9 01       	movw	r30, r18
 1aa:	20 81       	ld	r18, Z
 1ac:	62 2f       	mov	r22, r18
 1ae:	29 81       	ldd	r18, Y+1	; 0x01
 1b0:	42 2f       	mov	r20, r18
 1b2:	50 e0       	ldi	r21, 0x00	; 0
 1b4:	21 e0       	ldi	r18, 0x01	; 1
 1b6:	30 e0       	ldi	r19, 0x00	; 0
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <DIO_voidSetPin+0x3a>
 1ba:	22 0f       	add	r18, r18
 1bc:	33 1f       	adc	r19, r19
 1be:	4a 95       	dec	r20
 1c0:	e2 f7       	brpl	.-8      	; 0x1ba <DIO_voidSetPin+0x36>
 1c2:	26 2b       	or	r18, r22
 1c4:	fc 01       	movw	r30, r24
 1c6:	20 83       	st	Z, r18
    	    CLRBIT(PORTD,PinNum-16);
    	}

    }

}
 1c8:	d6 c0       	rjmp	.+428    	; 0x376 <DIO_voidSetPin+0x1f2>
void DIO_voidSetPin(u8 PinNum,u8 Value){
    if (Value==HIGH){

        if((PinNum>=0 && PinNum<8)){
            SETBIT(PORTA,PinNum);
        }else if((PinNum>=8) && (PinNum<16)){
 1ca:	89 81       	ldd	r24, Y+1	; 0x01
 1cc:	88 30       	cpi	r24, 0x08	; 8
 1ce:	d8 f0       	brcs	.+54     	; 0x206 <DIO_voidSetPin+0x82>
 1d0:	89 81       	ldd	r24, Y+1	; 0x01
 1d2:	80 31       	cpi	r24, 0x10	; 16
 1d4:	c0 f4       	brcc	.+48     	; 0x206 <DIO_voidSetPin+0x82>
        	SETBIT(PORTB,PinNum-8);
 1d6:	88 e3       	ldi	r24, 0x38	; 56
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	28 e3       	ldi	r18, 0x38	; 56
 1dc:	30 e0       	ldi	r19, 0x00	; 0
 1de:	f9 01       	movw	r30, r18
 1e0:	20 81       	ld	r18, Z
 1e2:	62 2f       	mov	r22, r18
 1e4:	29 81       	ldd	r18, Y+1	; 0x01
 1e6:	22 2f       	mov	r18, r18
 1e8:	30 e0       	ldi	r19, 0x00	; 0
 1ea:	a9 01       	movw	r20, r18
 1ec:	48 50       	subi	r20, 0x08	; 8
 1ee:	51 09       	sbc	r21, r1
 1f0:	21 e0       	ldi	r18, 0x01	; 1
 1f2:	30 e0       	ldi	r19, 0x00	; 0
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <DIO_voidSetPin+0x76>
 1f6:	22 0f       	add	r18, r18
 1f8:	33 1f       	adc	r19, r19
 1fa:	4a 95       	dec	r20
 1fc:	e2 f7       	brpl	.-8      	; 0x1f6 <DIO_voidSetPin+0x72>
 1fe:	26 2b       	or	r18, r22
 200:	fc 01       	movw	r30, r24
 202:	20 83       	st	Z, r18
 204:	b8 c0       	rjmp	.+368    	; 0x376 <DIO_voidSetPin+0x1f2>
        }else if((PinNum>=16) && (PinNum<24)){
 206:	89 81       	ldd	r24, Y+1	; 0x01
 208:	80 31       	cpi	r24, 0x10	; 16
 20a:	d8 f0       	brcs	.+54     	; 0x242 <DIO_voidSetPin+0xbe>
 20c:	89 81       	ldd	r24, Y+1	; 0x01
 20e:	88 31       	cpi	r24, 0x18	; 24
 210:	c0 f4       	brcc	.+48     	; 0x242 <DIO_voidSetPin+0xbe>
        	SETBIT(PORTC,PinNum-16);
 212:	85 e3       	ldi	r24, 0x35	; 53
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	25 e3       	ldi	r18, 0x35	; 53
 218:	30 e0       	ldi	r19, 0x00	; 0
 21a:	f9 01       	movw	r30, r18
 21c:	20 81       	ld	r18, Z
 21e:	62 2f       	mov	r22, r18
 220:	29 81       	ldd	r18, Y+1	; 0x01
 222:	22 2f       	mov	r18, r18
 224:	30 e0       	ldi	r19, 0x00	; 0
 226:	a9 01       	movw	r20, r18
 228:	40 51       	subi	r20, 0x10	; 16
 22a:	51 09       	sbc	r21, r1
 22c:	21 e0       	ldi	r18, 0x01	; 1
 22e:	30 e0       	ldi	r19, 0x00	; 0
 230:	02 c0       	rjmp	.+4      	; 0x236 <DIO_voidSetPin+0xb2>
 232:	22 0f       	add	r18, r18
 234:	33 1f       	adc	r19, r19
 236:	4a 95       	dec	r20
 238:	e2 f7       	brpl	.-8      	; 0x232 <DIO_voidSetPin+0xae>
 23a:	26 2b       	or	r18, r22
 23c:	fc 01       	movw	r30, r24
 23e:	20 83       	st	Z, r18
 240:	9a c0       	rjmp	.+308    	; 0x376 <DIO_voidSetPin+0x1f2>
        }else if((PinNum>=24) && (PinNum<32)){
 242:	89 81       	ldd	r24, Y+1	; 0x01
 244:	88 31       	cpi	r24, 0x18	; 24
 246:	08 f4       	brcc	.+2      	; 0x24a <DIO_voidSetPin+0xc6>
 248:	96 c0       	rjmp	.+300    	; 0x376 <DIO_voidSetPin+0x1f2>
 24a:	89 81       	ldd	r24, Y+1	; 0x01
 24c:	80 32       	cpi	r24, 0x20	; 32
 24e:	08 f0       	brcs	.+2      	; 0x252 <DIO_voidSetPin+0xce>
 250:	92 c0       	rjmp	.+292    	; 0x376 <DIO_voidSetPin+0x1f2>
        	SETBIT(PORTD,PinNum-16);
 252:	82 e3       	ldi	r24, 0x32	; 50
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	22 e3       	ldi	r18, 0x32	; 50
 258:	30 e0       	ldi	r19, 0x00	; 0
 25a:	f9 01       	movw	r30, r18
 25c:	20 81       	ld	r18, Z
 25e:	62 2f       	mov	r22, r18
 260:	29 81       	ldd	r18, Y+1	; 0x01
 262:	22 2f       	mov	r18, r18
 264:	30 e0       	ldi	r19, 0x00	; 0
 266:	a9 01       	movw	r20, r18
 268:	40 51       	subi	r20, 0x10	; 16
 26a:	51 09       	sbc	r21, r1
 26c:	21 e0       	ldi	r18, 0x01	; 1
 26e:	30 e0       	ldi	r19, 0x00	; 0
 270:	02 c0       	rjmp	.+4      	; 0x276 <DIO_voidSetPin+0xf2>
 272:	22 0f       	add	r18, r18
 274:	33 1f       	adc	r19, r19
 276:	4a 95       	dec	r20
 278:	e2 f7       	brpl	.-8      	; 0x272 <DIO_voidSetPin+0xee>
 27a:	26 2b       	or	r18, r22
 27c:	fc 01       	movw	r30, r24
 27e:	20 83       	st	Z, r18
    	    CLRBIT(PORTD,PinNum-16);
    	}

    }

}
 280:	7a c0       	rjmp	.+244    	; 0x376 <DIO_voidSetPin+0x1f2>
        	SETBIT(PORTC,PinNum-16);
        }else if((PinNum>=24) && (PinNum<32)){
        	SETBIT(PORTD,PinNum-16);
        }

    }else if (Value==LOW){
 282:	8a 81       	ldd	r24, Y+2	; 0x02
 284:	88 23       	and	r24, r24
 286:	09 f0       	breq	.+2      	; 0x28a <DIO_voidSetPin+0x106>
 288:	76 c0       	rjmp	.+236    	; 0x376 <DIO_voidSetPin+0x1f2>

    	if((PinNum>=0 && PinNum<8)){
 28a:	89 81       	ldd	r24, Y+1	; 0x01
 28c:	88 30       	cpi	r24, 0x08	; 8
 28e:	b0 f4       	brcc	.+44     	; 0x2bc <DIO_voidSetPin+0x138>
    	    CLRBIT(PORTA,PinNum);
 290:	8b e3       	ldi	r24, 0x3B	; 59
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	2b e3       	ldi	r18, 0x3B	; 59
 296:	30 e0       	ldi	r19, 0x00	; 0
 298:	f9 01       	movw	r30, r18
 29a:	20 81       	ld	r18, Z
 29c:	62 2f       	mov	r22, r18
 29e:	29 81       	ldd	r18, Y+1	; 0x01
 2a0:	42 2f       	mov	r20, r18
 2a2:	50 e0       	ldi	r21, 0x00	; 0
 2a4:	21 e0       	ldi	r18, 0x01	; 1
 2a6:	30 e0       	ldi	r19, 0x00	; 0
 2a8:	02 c0       	rjmp	.+4      	; 0x2ae <DIO_voidSetPin+0x12a>
 2aa:	22 0f       	add	r18, r18
 2ac:	33 1f       	adc	r19, r19
 2ae:	4a 95       	dec	r20
 2b0:	e2 f7       	brpl	.-8      	; 0x2aa <DIO_voidSetPin+0x126>
 2b2:	20 95       	com	r18
 2b4:	26 23       	and	r18, r22
 2b6:	fc 01       	movw	r30, r24
 2b8:	20 83       	st	Z, r18
    	    CLRBIT(PORTD,PinNum-16);
    	}

    }

}
 2ba:	5d c0       	rjmp	.+186    	; 0x376 <DIO_voidSetPin+0x1f2>

    }else if (Value==LOW){

    	if((PinNum>=0 && PinNum<8)){
    	    CLRBIT(PORTA,PinNum);
    	}else if((PinNum>=8) && (PinNum<16)){
 2bc:	89 81       	ldd	r24, Y+1	; 0x01
 2be:	88 30       	cpi	r24, 0x08	; 8
 2c0:	e0 f0       	brcs	.+56     	; 0x2fa <DIO_voidSetPin+0x176>
 2c2:	89 81       	ldd	r24, Y+1	; 0x01
 2c4:	80 31       	cpi	r24, 0x10	; 16
 2c6:	c8 f4       	brcc	.+50     	; 0x2fa <DIO_voidSetPin+0x176>
    	    CLRBIT(PORTB,PinNum-8);
 2c8:	88 e3       	ldi	r24, 0x38	; 56
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	28 e3       	ldi	r18, 0x38	; 56
 2ce:	30 e0       	ldi	r19, 0x00	; 0
 2d0:	f9 01       	movw	r30, r18
 2d2:	20 81       	ld	r18, Z
 2d4:	62 2f       	mov	r22, r18
 2d6:	29 81       	ldd	r18, Y+1	; 0x01
 2d8:	22 2f       	mov	r18, r18
 2da:	30 e0       	ldi	r19, 0x00	; 0
 2dc:	a9 01       	movw	r20, r18
 2de:	48 50       	subi	r20, 0x08	; 8
 2e0:	51 09       	sbc	r21, r1
 2e2:	21 e0       	ldi	r18, 0x01	; 1
 2e4:	30 e0       	ldi	r19, 0x00	; 0
 2e6:	02 c0       	rjmp	.+4      	; 0x2ec <DIO_voidSetPin+0x168>
 2e8:	22 0f       	add	r18, r18
 2ea:	33 1f       	adc	r19, r19
 2ec:	4a 95       	dec	r20
 2ee:	e2 f7       	brpl	.-8      	; 0x2e8 <DIO_voidSetPin+0x164>
 2f0:	20 95       	com	r18
 2f2:	26 23       	and	r18, r22
 2f4:	fc 01       	movw	r30, r24
 2f6:	20 83       	st	Z, r18
 2f8:	3e c0       	rjmp	.+124    	; 0x376 <DIO_voidSetPin+0x1f2>
    	}else if((PinNum>=16) && (PinNum<24)){
 2fa:	89 81       	ldd	r24, Y+1	; 0x01
 2fc:	80 31       	cpi	r24, 0x10	; 16
 2fe:	e0 f0       	brcs	.+56     	; 0x338 <DIO_voidSetPin+0x1b4>
 300:	89 81       	ldd	r24, Y+1	; 0x01
 302:	88 31       	cpi	r24, 0x18	; 24
 304:	c8 f4       	brcc	.+50     	; 0x338 <DIO_voidSetPin+0x1b4>
    	    CLRBIT(PORTC,PinNum-16);
 306:	85 e3       	ldi	r24, 0x35	; 53
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	25 e3       	ldi	r18, 0x35	; 53
 30c:	30 e0       	ldi	r19, 0x00	; 0
 30e:	f9 01       	movw	r30, r18
 310:	20 81       	ld	r18, Z
 312:	62 2f       	mov	r22, r18
 314:	29 81       	ldd	r18, Y+1	; 0x01
 316:	22 2f       	mov	r18, r18
 318:	30 e0       	ldi	r19, 0x00	; 0
 31a:	a9 01       	movw	r20, r18
 31c:	40 51       	subi	r20, 0x10	; 16
 31e:	51 09       	sbc	r21, r1
 320:	21 e0       	ldi	r18, 0x01	; 1
 322:	30 e0       	ldi	r19, 0x00	; 0
 324:	02 c0       	rjmp	.+4      	; 0x32a <DIO_voidSetPin+0x1a6>
 326:	22 0f       	add	r18, r18
 328:	33 1f       	adc	r19, r19
 32a:	4a 95       	dec	r20
 32c:	e2 f7       	brpl	.-8      	; 0x326 <DIO_voidSetPin+0x1a2>
 32e:	20 95       	com	r18
 330:	26 23       	and	r18, r22
 332:	fc 01       	movw	r30, r24
 334:	20 83       	st	Z, r18
 336:	1f c0       	rjmp	.+62     	; 0x376 <DIO_voidSetPin+0x1f2>
    	}else if((PinNum>=24) && (PinNum<32)){
 338:	89 81       	ldd	r24, Y+1	; 0x01
 33a:	88 31       	cpi	r24, 0x18	; 24
 33c:	e0 f0       	brcs	.+56     	; 0x376 <DIO_voidSetPin+0x1f2>
 33e:	89 81       	ldd	r24, Y+1	; 0x01
 340:	80 32       	cpi	r24, 0x20	; 32
 342:	c8 f4       	brcc	.+50     	; 0x376 <DIO_voidSetPin+0x1f2>
    	    CLRBIT(PORTD,PinNum-16);
 344:	82 e3       	ldi	r24, 0x32	; 50
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	22 e3       	ldi	r18, 0x32	; 50
 34a:	30 e0       	ldi	r19, 0x00	; 0
 34c:	f9 01       	movw	r30, r18
 34e:	20 81       	ld	r18, Z
 350:	62 2f       	mov	r22, r18
 352:	29 81       	ldd	r18, Y+1	; 0x01
 354:	22 2f       	mov	r18, r18
 356:	30 e0       	ldi	r19, 0x00	; 0
 358:	a9 01       	movw	r20, r18
 35a:	40 51       	subi	r20, 0x10	; 16
 35c:	51 09       	sbc	r21, r1
 35e:	21 e0       	ldi	r18, 0x01	; 1
 360:	30 e0       	ldi	r19, 0x00	; 0
 362:	02 c0       	rjmp	.+4      	; 0x368 <DIO_voidSetPin+0x1e4>
 364:	22 0f       	add	r18, r18
 366:	33 1f       	adc	r19, r19
 368:	4a 95       	dec	r20
 36a:	e2 f7       	brpl	.-8      	; 0x364 <DIO_voidSetPin+0x1e0>
 36c:	20 95       	com	r18
 36e:	26 23       	and	r18, r22
 370:	fc 01       	movw	r30, r24
 372:	20 83       	st	Z, r18
    	}

    }

}
 374:	00 c0       	rjmp	.+0      	; 0x376 <DIO_voidSetPin+0x1f2>
 376:	00 00       	nop
 378:	0f 90       	pop	r0
 37a:	0f 90       	pop	r0
 37c:	df 91       	pop	r29
 37e:	cf 91       	pop	r28
 380:	08 95       	ret

00000382 <DIO_u8GetPin>:

u8 DIO_u8GetPin(u8 PinNum){
 382:	cf 93       	push	r28
 384:	df 93       	push	r29
 386:	00 d0       	rcall	.+0      	; 0x388 <DIO_u8GetPin+0x6>
 388:	cd b7       	in	r28, 0x3d	; 61
 38a:	de b7       	in	r29, 0x3e	; 62
 38c:	8a 83       	std	Y+2, r24	; 0x02

	u8 ret;

	if((PinNum>=0 && PinNum<8)){
 38e:	8a 81       	ldd	r24, Y+2	; 0x02
 390:	88 30       	cpi	r24, 0x08	; 8
 392:	88 f4       	brcc	.+34     	; 0x3b6 <DIO_u8GetPin+0x34>
	     ret= GETBIT(PINA,PinNum);
 394:	89 e3       	ldi	r24, 0x39	; 57
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	fc 01       	movw	r30, r24
 39a:	80 81       	ld	r24, Z
 39c:	88 2f       	mov	r24, r24
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	2a 81       	ldd	r18, Y+2	; 0x02
 3a2:	22 2f       	mov	r18, r18
 3a4:	30 e0       	ldi	r19, 0x00	; 0
 3a6:	02 c0       	rjmp	.+4      	; 0x3ac <DIO_u8GetPin+0x2a>
 3a8:	95 95       	asr	r25
 3aa:	87 95       	ror	r24
 3ac:	2a 95       	dec	r18
 3ae:	e2 f7       	brpl	.-8      	; 0x3a8 <DIO_u8GetPin+0x26>
 3b0:	81 70       	andi	r24, 0x01	; 1
 3b2:	89 83       	std	Y+1, r24	; 0x01
 3b4:	4a c0       	rjmp	.+148    	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
	}else if((PinNum>=8) && (PinNum<16)){
 3b6:	8a 81       	ldd	r24, Y+2	; 0x02
 3b8:	88 30       	cpi	r24, 0x08	; 8
 3ba:	b0 f0       	brcs	.+44     	; 0x3e8 <DIO_u8GetPin+0x66>
 3bc:	8a 81       	ldd	r24, Y+2	; 0x02
 3be:	80 31       	cpi	r24, 0x10	; 16
 3c0:	98 f4       	brcc	.+38     	; 0x3e8 <DIO_u8GetPin+0x66>
	     ret= GETBIT(PINB,PinNum-8);
 3c2:	86 e3       	ldi	r24, 0x36	; 54
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	fc 01       	movw	r30, r24
 3c8:	80 81       	ld	r24, Z
 3ca:	88 2f       	mov	r24, r24
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	2a 81       	ldd	r18, Y+2	; 0x02
 3d0:	22 2f       	mov	r18, r18
 3d2:	30 e0       	ldi	r19, 0x00	; 0
 3d4:	28 50       	subi	r18, 0x08	; 8
 3d6:	31 09       	sbc	r19, r1
 3d8:	02 c0       	rjmp	.+4      	; 0x3de <DIO_u8GetPin+0x5c>
 3da:	95 95       	asr	r25
 3dc:	87 95       	ror	r24
 3de:	2a 95       	dec	r18
 3e0:	e2 f7       	brpl	.-8      	; 0x3da <DIO_u8GetPin+0x58>
 3e2:	81 70       	andi	r24, 0x01	; 1
 3e4:	89 83       	std	Y+1, r24	; 0x01
 3e6:	31 c0       	rjmp	.+98     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
	}else if((PinNum>=16) && (PinNum<24)){
 3e8:	8a 81       	ldd	r24, Y+2	; 0x02
 3ea:	80 31       	cpi	r24, 0x10	; 16
 3ec:	b0 f0       	brcs	.+44     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 3ee:	8a 81       	ldd	r24, Y+2	; 0x02
 3f0:	88 31       	cpi	r24, 0x18	; 24
 3f2:	98 f4       	brcc	.+38     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
	     ret= GETBIT(PINC,PinNum-16);
 3f4:	83 e3       	ldi	r24, 0x33	; 51
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	fc 01       	movw	r30, r24
 3fa:	80 81       	ld	r24, Z
 3fc:	88 2f       	mov	r24, r24
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	2a 81       	ldd	r18, Y+2	; 0x02
 402:	22 2f       	mov	r18, r18
 404:	30 e0       	ldi	r19, 0x00	; 0
 406:	20 51       	subi	r18, 0x10	; 16
 408:	31 09       	sbc	r19, r1
 40a:	02 c0       	rjmp	.+4      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 40c:	95 95       	asr	r25
 40e:	87 95       	ror	r24
 410:	2a 95       	dec	r18
 412:	e2 f7       	brpl	.-8      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 414:	81 70       	andi	r24, 0x01	; 1
 416:	89 83       	std	Y+1, r24	; 0x01
 418:	18 c0       	rjmp	.+48     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
	}else if((PinNum>=24) && (PinNum<32)){
 41a:	8a 81       	ldd	r24, Y+2	; 0x02
 41c:	88 31       	cpi	r24, 0x18	; 24
 41e:	a8 f0       	brcs	.+42     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 420:	8a 81       	ldd	r24, Y+2	; 0x02
 422:	80 32       	cpi	r24, 0x20	; 32
 424:	90 f4       	brcc	.+36     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
	     ret= GETBIT(PIND,PinNum-16);
 426:	80 e3       	ldi	r24, 0x30	; 48
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	fc 01       	movw	r30, r24
 42c:	80 81       	ld	r24, Z
 42e:	88 2f       	mov	r24, r24
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	2a 81       	ldd	r18, Y+2	; 0x02
 434:	22 2f       	mov	r18, r18
 436:	30 e0       	ldi	r19, 0x00	; 0
 438:	20 51       	subi	r18, 0x10	; 16
 43a:	31 09       	sbc	r19, r1
 43c:	02 c0       	rjmp	.+4      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 43e:	95 95       	asr	r25
 440:	87 95       	ror	r24
 442:	2a 95       	dec	r18
 444:	e2 f7       	brpl	.-8      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 446:	81 70       	andi	r24, 0x01	; 1
 448:	89 83       	std	Y+1, r24	; 0x01
	}

	return ret;
 44a:	89 81       	ldd	r24, Y+1	; 0x01

}
 44c:	0f 90       	pop	r0
 44e:	0f 90       	pop	r0
 450:	df 91       	pop	r29
 452:	cf 91       	pop	r28
 454:	08 95       	ret

00000456 <DIO_voidTogglePin>:

void DIO_voidTogglePin(u8 PinNum){
 456:	cf 93       	push	r28
 458:	df 93       	push	r29
 45a:	1f 92       	push	r1
 45c:	cd b7       	in	r28, 0x3d	; 61
 45e:	de b7       	in	r29, 0x3e	; 62
 460:	89 83       	std	Y+1, r24	; 0x01

	if((PinNum>=0 && PinNum<8)){
 462:	89 81       	ldd	r24, Y+1	; 0x01
 464:	88 30       	cpi	r24, 0x08	; 8
 466:	a8 f4       	brcc	.+42     	; 0x492 <DIO_voidTogglePin+0x3c>
		    TOGGLEBIT(PORTA,PinNum);
 468:	8b e3       	ldi	r24, 0x3B	; 59
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	2b e3       	ldi	r18, 0x3B	; 59
 46e:	30 e0       	ldi	r19, 0x00	; 0
 470:	f9 01       	movw	r30, r18
 472:	20 81       	ld	r18, Z
 474:	62 2f       	mov	r22, r18
 476:	29 81       	ldd	r18, Y+1	; 0x01
 478:	42 2f       	mov	r20, r18
 47a:	50 e0       	ldi	r21, 0x00	; 0
 47c:	21 e0       	ldi	r18, 0x01	; 1
 47e:	30 e0       	ldi	r19, 0x00	; 0
 480:	02 c0       	rjmp	.+4      	; 0x486 <DIO_voidTogglePin+0x30>
 482:	22 0f       	add	r18, r18
 484:	33 1f       	adc	r19, r19
 486:	4a 95       	dec	r20
 488:	e2 f7       	brpl	.-8      	; 0x482 <DIO_voidTogglePin+0x2c>
 48a:	26 27       	eor	r18, r22
 48c:	fc 01       	movw	r30, r24
 48e:	20 83       	st	Z, r18
		}else if((PinNum>=24) && (PinNum<32)){
		    TOGGLEBIT(PORTD,PinNum-16);
		}


}
 490:	5a c0       	rjmp	.+180    	; 0x546 <DIO_voidTogglePin+0xf0>

void DIO_voidTogglePin(u8 PinNum){

	if((PinNum>=0 && PinNum<8)){
		    TOGGLEBIT(PORTA,PinNum);
		}else if((PinNum>=8) && (PinNum<16)){
 492:	89 81       	ldd	r24, Y+1	; 0x01
 494:	88 30       	cpi	r24, 0x08	; 8
 496:	d8 f0       	brcs	.+54     	; 0x4ce <DIO_voidTogglePin+0x78>
 498:	89 81       	ldd	r24, Y+1	; 0x01
 49a:	80 31       	cpi	r24, 0x10	; 16
 49c:	c0 f4       	brcc	.+48     	; 0x4ce <DIO_voidTogglePin+0x78>
		    TOGGLEBIT(PORTB,PinNum-8);
 49e:	88 e3       	ldi	r24, 0x38	; 56
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	28 e3       	ldi	r18, 0x38	; 56
 4a4:	30 e0       	ldi	r19, 0x00	; 0
 4a6:	f9 01       	movw	r30, r18
 4a8:	20 81       	ld	r18, Z
 4aa:	62 2f       	mov	r22, r18
 4ac:	29 81       	ldd	r18, Y+1	; 0x01
 4ae:	22 2f       	mov	r18, r18
 4b0:	30 e0       	ldi	r19, 0x00	; 0
 4b2:	a9 01       	movw	r20, r18
 4b4:	48 50       	subi	r20, 0x08	; 8
 4b6:	51 09       	sbc	r21, r1
 4b8:	21 e0       	ldi	r18, 0x01	; 1
 4ba:	30 e0       	ldi	r19, 0x00	; 0
 4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <DIO_voidTogglePin+0x6c>
 4be:	22 0f       	add	r18, r18
 4c0:	33 1f       	adc	r19, r19
 4c2:	4a 95       	dec	r20
 4c4:	e2 f7       	brpl	.-8      	; 0x4be <DIO_voidTogglePin+0x68>
 4c6:	26 27       	eor	r18, r22
 4c8:	fc 01       	movw	r30, r24
 4ca:	20 83       	st	Z, r18
 4cc:	3c c0       	rjmp	.+120    	; 0x546 <DIO_voidTogglePin+0xf0>
		}else if((PinNum>=16) && (PinNum<24)){
 4ce:	89 81       	ldd	r24, Y+1	; 0x01
 4d0:	80 31       	cpi	r24, 0x10	; 16
 4d2:	d8 f0       	brcs	.+54     	; 0x50a <DIO_voidTogglePin+0xb4>
 4d4:	89 81       	ldd	r24, Y+1	; 0x01
 4d6:	88 31       	cpi	r24, 0x18	; 24
 4d8:	c0 f4       	brcc	.+48     	; 0x50a <DIO_voidTogglePin+0xb4>
		    TOGGLEBIT(PORTC,PinNum-16);
 4da:	85 e3       	ldi	r24, 0x35	; 53
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	25 e3       	ldi	r18, 0x35	; 53
 4e0:	30 e0       	ldi	r19, 0x00	; 0
 4e2:	f9 01       	movw	r30, r18
 4e4:	20 81       	ld	r18, Z
 4e6:	62 2f       	mov	r22, r18
 4e8:	29 81       	ldd	r18, Y+1	; 0x01
 4ea:	22 2f       	mov	r18, r18
 4ec:	30 e0       	ldi	r19, 0x00	; 0
 4ee:	a9 01       	movw	r20, r18
 4f0:	40 51       	subi	r20, 0x10	; 16
 4f2:	51 09       	sbc	r21, r1
 4f4:	21 e0       	ldi	r18, 0x01	; 1
 4f6:	30 e0       	ldi	r19, 0x00	; 0
 4f8:	02 c0       	rjmp	.+4      	; 0x4fe <DIO_voidTogglePin+0xa8>
 4fa:	22 0f       	add	r18, r18
 4fc:	33 1f       	adc	r19, r19
 4fe:	4a 95       	dec	r20
 500:	e2 f7       	brpl	.-8      	; 0x4fa <DIO_voidTogglePin+0xa4>
 502:	26 27       	eor	r18, r22
 504:	fc 01       	movw	r30, r24
 506:	20 83       	st	Z, r18
 508:	1e c0       	rjmp	.+60     	; 0x546 <DIO_voidTogglePin+0xf0>
		}else if((PinNum>=24) && (PinNum<32)){
 50a:	89 81       	ldd	r24, Y+1	; 0x01
 50c:	88 31       	cpi	r24, 0x18	; 24
 50e:	d8 f0       	brcs	.+54     	; 0x546 <DIO_voidTogglePin+0xf0>
 510:	89 81       	ldd	r24, Y+1	; 0x01
 512:	80 32       	cpi	r24, 0x20	; 32
 514:	c0 f4       	brcc	.+48     	; 0x546 <DIO_voidTogglePin+0xf0>
		    TOGGLEBIT(PORTD,PinNum-16);
 516:	82 e3       	ldi	r24, 0x32	; 50
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	22 e3       	ldi	r18, 0x32	; 50
 51c:	30 e0       	ldi	r19, 0x00	; 0
 51e:	f9 01       	movw	r30, r18
 520:	20 81       	ld	r18, Z
 522:	62 2f       	mov	r22, r18
 524:	29 81       	ldd	r18, Y+1	; 0x01
 526:	22 2f       	mov	r18, r18
 528:	30 e0       	ldi	r19, 0x00	; 0
 52a:	a9 01       	movw	r20, r18
 52c:	40 51       	subi	r20, 0x10	; 16
 52e:	51 09       	sbc	r21, r1
 530:	21 e0       	ldi	r18, 0x01	; 1
 532:	30 e0       	ldi	r19, 0x00	; 0
 534:	02 c0       	rjmp	.+4      	; 0x53a <DIO_voidTogglePin+0xe4>
 536:	22 0f       	add	r18, r18
 538:	33 1f       	adc	r19, r19
 53a:	4a 95       	dec	r20
 53c:	e2 f7       	brpl	.-8      	; 0x536 <DIO_voidTogglePin+0xe0>
 53e:	26 27       	eor	r18, r22
 540:	fc 01       	movw	r30, r24
 542:	20 83       	st	Z, r18
		}


}
 544:	00 c0       	rjmp	.+0      	; 0x546 <DIO_voidTogglePin+0xf0>
 546:	00 00       	nop
 548:	0f 90       	pop	r0
 54a:	df 91       	pop	r29
 54c:	cf 91       	pop	r28
 54e:	08 95       	ret

00000550 <GIE_voidEnable>:
#include "GIE_int.h"
/*********************************************/
/* Description : Enable global interrupt   	*/
/********************************************/
void GIE_voidEnable(void)
{
 550:	cf 93       	push	r28
 552:	df 93       	push	r29
 554:	cd b7       	in	r28, 0x3d	; 61
 556:	de b7       	in	r29, 0x3e	; 62
	SETBIT(SREG,GIE_u8_BIT_INDEX);
 558:	8f e5       	ldi	r24, 0x5F	; 95
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	2f e5       	ldi	r18, 0x5F	; 95
 55e:	30 e0       	ldi	r19, 0x00	; 0
 560:	f9 01       	movw	r30, r18
 562:	20 81       	ld	r18, Z
 564:	20 68       	ori	r18, 0x80	; 128
 566:	fc 01       	movw	r30, r24
 568:	20 83       	st	Z, r18
}
 56a:	00 00       	nop
 56c:	df 91       	pop	r29
 56e:	cf 91       	pop	r28
 570:	08 95       	ret

00000572 <GIE_voidDisable>:

/********************************************/
/* Description : Disable global interrupt   */
/********************************************/
void GIE_voidDisable(void)
{
 572:	cf 93       	push	r28
 574:	df 93       	push	r29
 576:	cd b7       	in	r28, 0x3d	; 61
 578:	de b7       	in	r29, 0x3e	; 62
	CLRBIT(SREG,GIE_u8_BIT_INDEX);	
 57a:	8f e5       	ldi	r24, 0x5F	; 95
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	2f e5       	ldi	r18, 0x5F	; 95
 580:	30 e0       	ldi	r19, 0x00	; 0
 582:	f9 01       	movw	r30, r18
 584:	20 81       	ld	r18, Z
 586:	2f 77       	andi	r18, 0x7F	; 127
 588:	fc 01       	movw	r30, r24
 58a:	20 83       	st	Z, r18
 58c:	00 00       	nop
 58e:	df 91       	pop	r29
 590:	cf 91       	pop	r28
 592:	08 95       	ret

00000594 <LED_voidInitialize>:
#include "DIO_int.h"
#include "LED_priv.h"
#include "LED_config.h"
#include "LED_int.h"

void LED_voidInitialize(void){}
 594:	cf 93       	push	r28
 596:	df 93       	push	r29
 598:	cd b7       	in	r28, 0x3d	; 61
 59a:	de b7       	in	r29, 0x3e	; 62
 59c:	00 00       	nop
 59e:	df 91       	pop	r29
 5a0:	cf 91       	pop	r28
 5a2:	08 95       	ret

000005a4 <LED_voidON>:

void LED_voidON(u8 LedNum){
 5a4:	cf 93       	push	r28
 5a6:	df 93       	push	r29
 5a8:	1f 92       	push	r1
 5aa:	cd b7       	in	r28, 0x3d	; 61
 5ac:	de b7       	in	r29, 0x3e	; 62
 5ae:	89 83       	std	Y+1, r24	; 0x01

	switch(LedNum){
 5b0:	89 81       	ldd	r24, Y+1	; 0x01
 5b2:	88 2f       	mov	r24, r24
 5b4:	90 e0       	ldi	r25, 0x00	; 0
 5b6:	09 2e       	mov	r0, r25
 5b8:	00 0c       	add	r0, r0
 5ba:	aa 0b       	sbc	r26, r26
 5bc:	bb 0b       	sbc	r27, r27
 5be:	40 e0       	ldi	r20, 0x00	; 0
 5c0:	50 e0       	ldi	r21, 0x00	; 0
 5c2:	2f e1       	ldi	r18, 0x1F	; 31
 5c4:	30 e0       	ldi	r19, 0x00	; 0
 5c6:	84 1b       	sub	r24, r20
 5c8:	95 0b       	sbc	r25, r21
 5ca:	28 17       	cp	r18, r24
 5cc:	39 07       	cpc	r19, r25
 5ce:	08 f4       	brcc	.+2      	; 0x5d2 <LED_voidON+0x2e>
 5d0:	a5 c0       	rjmp	.+330    	; 0x71c <LED_voidON+0x178>
 5d2:	86 5d       	subi	r24, 0xD6	; 214
 5d4:	9f 4f       	sbci	r25, 0xFF	; 255
 5d6:	fc 01       	movw	r30, r24
 5d8:	0c 94 77 06 	jmp	0xcee	; 0xcee <__tablejump2__>
	case (LED_0):
	    if(LED_0_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_0,HIGH);
 5dc:	61 e0       	ldi	r22, 0x01	; 1
 5de:	80 e0       	ldi	r24, 0x00	; 0
 5e0:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_voidSetPin>
	    }else if(LED_0_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_0,LOW);
	    }
	break;
 5e4:	9b c0       	rjmp	.+310    	; 0x71c <LED_voidON+0x178>
	case (LED_1):
	    if(LED_1_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_1,HIGH);
 5e6:	61 e0       	ldi	r22, 0x01	; 1
 5e8:	81 e0       	ldi	r24, 0x01	; 1
 5ea:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_voidSetPin>
	    }else if(LED_1_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_1,LOW);
	    }
	break;
 5ee:	96 c0       	rjmp	.+300    	; 0x71c <LED_voidON+0x178>
	case (LED_2):
	    if(LED_2_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_2,HIGH);
 5f0:	61 e0       	ldi	r22, 0x01	; 1
 5f2:	82 e0       	ldi	r24, 0x02	; 2
 5f4:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_voidSetPin>
	    }else if(LED_2_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_2,LOW);
	    }
	break;
 5f8:	91 c0       	rjmp	.+290    	; 0x71c <LED_voidON+0x178>
	case (LED_3):
	    if(LED_3_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_3,HIGH);
 5fa:	61 e0       	ldi	r22, 0x01	; 1
 5fc:	83 e0       	ldi	r24, 0x03	; 3
 5fe:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_voidSetPin>
	    }else if(LED_3_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_3,LOW);
	    }
	break;
 602:	8c c0       	rjmp	.+280    	; 0x71c <LED_voidON+0x178>
	case (LED_4):
	    if(LED_4_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_4,HIGH);
 604:	61 e0       	ldi	r22, 0x01	; 1
 606:	84 e0       	ldi	r24, 0x04	; 4
 608:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_voidSetPin>
	    }else if(LED_4_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_4,LOW);
	    }
	break;
 60c:	87 c0       	rjmp	.+270    	; 0x71c <LED_voidON+0x178>
	case (LED_5):
	    if(LED_5_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_5,HIGH);
 60e:	61 e0       	ldi	r22, 0x01	; 1
 610:	85 e0       	ldi	r24, 0x05	; 5
 612:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_voidSetPin>
	    }else if(LED_5_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_5,LOW);
	    }
	break;
 616:	82 c0       	rjmp	.+260    	; 0x71c <LED_voidON+0x178>
	case (LED_6):
	    if(LED_6_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_6,HIGH);
 618:	61 e0       	ldi	r22, 0x01	; 1
 61a:	86 e0       	ldi	r24, 0x06	; 6
 61c:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_voidSetPin>
	    }else if(LED_6_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_6,LOW);
	    }
	break;
 620:	7d c0       	rjmp	.+250    	; 0x71c <LED_voidON+0x178>
	case (LED_7):
	    if(LED_7_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_7,HIGH);
 622:	61 e0       	ldi	r22, 0x01	; 1
 624:	87 e0       	ldi	r24, 0x07	; 7
 626:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_voidSetPin>
	    }else if(LED_7_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_7,LOW);
	    }
	break;
 62a:	78 c0       	rjmp	.+240    	; 0x71c <LED_voidON+0x178>
	case (LED_8):
	    if(LED_8_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_8,HIGH);
 62c:	61 e0       	ldi	r22, 0x01	; 1
 62e:	88 e0       	ldi	r24, 0x08	; 8
 630:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_voidSetPin>
	    }else if(LED_8_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_8,LOW);
	    }
	break;
 634:	73 c0       	rjmp	.+230    	; 0x71c <LED_voidON+0x178>
	case (LED_9):
	    if(LED_9_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_9,HIGH);
 636:	61 e0       	ldi	r22, 0x01	; 1
 638:	89 e0       	ldi	r24, 0x09	; 9
 63a:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_voidSetPin>
	    }else if(LED_9_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_9,LOW);
	    }
	break;
 63e:	6e c0       	rjmp	.+220    	; 0x71c <LED_voidON+0x178>
	case (LED_10):
	    if(LED_10_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_10,HIGH);
 640:	61 e0       	ldi	r22, 0x01	; 1
 642:	8a e0       	ldi	r24, 0x0A	; 10
 644:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_voidSetPin>
	    }else if(LED_10_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_10,LOW);
	    }
	break;
 648:	69 c0       	rjmp	.+210    	; 0x71c <LED_voidON+0x178>
	case (LED_11):
	    if(LED_11_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_11,HIGH);
 64a:	61 e0       	ldi	r22, 0x01	; 1
 64c:	8b e0       	ldi	r24, 0x0B	; 11
 64e:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_voidSetPin>
	    }else if(LED_11_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_11,LOW);
	    }
	break;
 652:	64 c0       	rjmp	.+200    	; 0x71c <LED_voidON+0x178>
	case (LED_12):
	    if(LED_12_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_12,HIGH);
 654:	61 e0       	ldi	r22, 0x01	; 1
 656:	8c e0       	ldi	r24, 0x0C	; 12
 658:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_voidSetPin>
	    }else if(LED_12_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_12,LOW);
	    }
	break;
 65c:	5f c0       	rjmp	.+190    	; 0x71c <LED_voidON+0x178>
	case (LED_13):
	    if(LED_13_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_13,HIGH);
 65e:	61 e0       	ldi	r22, 0x01	; 1
 660:	8d e0       	ldi	r24, 0x0D	; 13
 662:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_voidSetPin>
	    }else if(LED_13_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_13,LOW);
	    }
	break;
 666:	5a c0       	rjmp	.+180    	; 0x71c <LED_voidON+0x178>
	case (LED_14):
	    if(LED_14_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_14,HIGH);
 668:	61 e0       	ldi	r22, 0x01	; 1
 66a:	8e e0       	ldi	r24, 0x0E	; 14
 66c:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_voidSetPin>
	    }else if(LED_14_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_14,LOW);
	    }
	break;
 670:	55 c0       	rjmp	.+170    	; 0x71c <LED_voidON+0x178>
	case (LED_15):
	    if(LED_15_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_15,HIGH);
 672:	61 e0       	ldi	r22, 0x01	; 1
 674:	8f e0       	ldi	r24, 0x0F	; 15
 676:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_voidSetPin>
	    }else if(LED_15_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_15,LOW);
	    }
	break;
 67a:	50 c0       	rjmp	.+160    	; 0x71c <LED_voidON+0x178>
	case (LED_16):
	    if(LED_16_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_16,HIGH);
 67c:	61 e0       	ldi	r22, 0x01	; 1
 67e:	80 e1       	ldi	r24, 0x10	; 16
 680:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_voidSetPin>
	    }else if(LED_16_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_16,LOW);
	    }
	break;
 684:	4b c0       	rjmp	.+150    	; 0x71c <LED_voidON+0x178>
	case (LED_17):
	    if(LED_17_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_17,HIGH);
 686:	61 e0       	ldi	r22, 0x01	; 1
 688:	81 e1       	ldi	r24, 0x11	; 17
 68a:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_voidSetPin>
	    }else if(LED_17_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_17,LOW);
	    }
	break;
 68e:	46 c0       	rjmp	.+140    	; 0x71c <LED_voidON+0x178>
	case (LED_18):
	    if(LED_18_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_18,HIGH);
 690:	61 e0       	ldi	r22, 0x01	; 1
 692:	82 e1       	ldi	r24, 0x12	; 18
 694:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_voidSetPin>
	    }else if(LED_18_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_18,LOW);
	    }
	break;
 698:	41 c0       	rjmp	.+130    	; 0x71c <LED_voidON+0x178>
	case (LED_19):
	    if(LED_19_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_19,HIGH);
 69a:	61 e0       	ldi	r22, 0x01	; 1
 69c:	83 e1       	ldi	r24, 0x13	; 19
 69e:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_voidSetPin>
	    }else if(LED_19_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_19,LOW);
	    }
	break;
 6a2:	3c c0       	rjmp	.+120    	; 0x71c <LED_voidON+0x178>
	case (LED_20):
	    if(LED_20_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_20,HIGH);
 6a4:	61 e0       	ldi	r22, 0x01	; 1
 6a6:	84 e1       	ldi	r24, 0x14	; 20
 6a8:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_voidSetPin>
	    }else if(LED_20_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_20,LOW);
	    }
	break;
 6ac:	37 c0       	rjmp	.+110    	; 0x71c <LED_voidON+0x178>
	case (LED_21):
	    if(LED_21_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_21,HIGH);
 6ae:	61 e0       	ldi	r22, 0x01	; 1
 6b0:	85 e1       	ldi	r24, 0x15	; 21
 6b2:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_voidSetPin>
	    }else if(LED_21_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_21,LOW);
	    }
	break;
 6b6:	32 c0       	rjmp	.+100    	; 0x71c <LED_voidON+0x178>
	case (LED_22):
	    if(LED_22_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_22,HIGH);
 6b8:	61 e0       	ldi	r22, 0x01	; 1
 6ba:	86 e1       	ldi	r24, 0x16	; 22
 6bc:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_voidSetPin>
	    }else if(LED_22_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_22,LOW);
	    }
	break;
 6c0:	2d c0       	rjmp	.+90     	; 0x71c <LED_voidON+0x178>
	case (LED_23):
	    if(LED_23_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_23,HIGH);
 6c2:	61 e0       	ldi	r22, 0x01	; 1
 6c4:	87 e1       	ldi	r24, 0x17	; 23
 6c6:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_voidSetPin>
	    }else if(LED_23_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_23,LOW);
	    }
	break;
 6ca:	28 c0       	rjmp	.+80     	; 0x71c <LED_voidON+0x178>
	case (LED_24):
	    if(LED_24_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_24,HIGH);
 6cc:	61 e0       	ldi	r22, 0x01	; 1
 6ce:	88 e1       	ldi	r24, 0x18	; 24
 6d0:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_voidSetPin>
	    }else if(LED_24_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_24,LOW);
	    }
	break;
 6d4:	23 c0       	rjmp	.+70     	; 0x71c <LED_voidON+0x178>
	case (LED_25):
	    if(LED_25_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_25,HIGH);
 6d6:	61 e0       	ldi	r22, 0x01	; 1
 6d8:	89 e1       	ldi	r24, 0x19	; 25
 6da:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_voidSetPin>
	    }else if(LED_25_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_25,LOW);
	    }
	break;
 6de:	1e c0       	rjmp	.+60     	; 0x71c <LED_voidON+0x178>
	case (LED_26):
	    if(LED_26_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_26,HIGH);
 6e0:	61 e0       	ldi	r22, 0x01	; 1
 6e2:	8a e1       	ldi	r24, 0x1A	; 26
 6e4:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_voidSetPin>
	    }else if(LED_26_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_26,LOW);
	    }
	break;
 6e8:	19 c0       	rjmp	.+50     	; 0x71c <LED_voidON+0x178>
	case (LED_27):
	    if(LED_27_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_27,HIGH);
 6ea:	61 e0       	ldi	r22, 0x01	; 1
 6ec:	8b e1       	ldi	r24, 0x1B	; 27
 6ee:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_voidSetPin>
	    }else if(LED_27_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_27,LOW);
	    }
	break;
 6f2:	14 c0       	rjmp	.+40     	; 0x71c <LED_voidON+0x178>
	case (LED_28):
	    if(LED_28_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_28,HIGH);
 6f4:	61 e0       	ldi	r22, 0x01	; 1
 6f6:	8c e1       	ldi	r24, 0x1C	; 28
 6f8:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_voidSetPin>
	    }else if(LED_28_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_28,LOW);
	    }
	break;
 6fc:	0f c0       	rjmp	.+30     	; 0x71c <LED_voidON+0x178>
	case (LED_29):
	    if(LED_29_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_29,HIGH);
 6fe:	61 e0       	ldi	r22, 0x01	; 1
 700:	8d e1       	ldi	r24, 0x1D	; 29
 702:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_voidSetPin>
	    }else if(LED_29_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_29,LOW);
	    }
	break;
 706:	0a c0       	rjmp	.+20     	; 0x71c <LED_voidON+0x178>
	case (LED_30):
	    if(LED_30_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_30,HIGH);
 708:	61 e0       	ldi	r22, 0x01	; 1
 70a:	8e e1       	ldi	r24, 0x1E	; 30
 70c:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_voidSetPin>
	    }else if(LED_30_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_30,LOW);
	    }
	break;
 710:	05 c0       	rjmp	.+10     	; 0x71c <LED_voidON+0x178>
	case (LED_31):
	    if(LED_31_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_31,HIGH);
 712:	61 e0       	ldi	r22, 0x01	; 1
 714:	8f e1       	ldi	r24, 0x1F	; 31
 716:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_voidSetPin>
	    }else if(LED_31_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_31,LOW);
	    }
	break;
 71a:	00 00       	nop


	}

}
 71c:	00 00       	nop
 71e:	0f 90       	pop	r0
 720:	df 91       	pop	r29
 722:	cf 91       	pop	r28
 724:	08 95       	ret

00000726 <LED_voidOff>:

void LED_voidOff(u8 LedNum){
 726:	cf 93       	push	r28
 728:	df 93       	push	r29
 72a:	1f 92       	push	r1
 72c:	cd b7       	in	r28, 0x3d	; 61
 72e:	de b7       	in	r29, 0x3e	; 62
 730:	89 83       	std	Y+1, r24	; 0x01

	switch(LedNum){
 732:	89 81       	ldd	r24, Y+1	; 0x01
 734:	88 2f       	mov	r24, r24
 736:	90 e0       	ldi	r25, 0x00	; 0
 738:	09 2e       	mov	r0, r25
 73a:	00 0c       	add	r0, r0
 73c:	aa 0b       	sbc	r26, r26
 73e:	bb 0b       	sbc	r27, r27
 740:	40 e0       	ldi	r20, 0x00	; 0
 742:	50 e0       	ldi	r21, 0x00	; 0
 744:	2f e1       	ldi	r18, 0x1F	; 31
 746:	30 e0       	ldi	r19, 0x00	; 0
 748:	84 1b       	sub	r24, r20
 74a:	95 0b       	sbc	r25, r21
 74c:	28 17       	cp	r18, r24
 74e:	39 07       	cpc	r19, r25
 750:	08 f4       	brcc	.+2      	; 0x754 <LED_voidOff+0x2e>
 752:	a5 c0       	rjmp	.+330    	; 0x89e <__stack+0x3f>
 754:	86 5b       	subi	r24, 0xB6	; 182
 756:	9f 4f       	sbci	r25, 0xFF	; 255
 758:	fc 01       	movw	r30, r24
 75a:	0c 94 77 06 	jmp	0xcee	; 0xcee <__tablejump2__>

    case (LED_0):
        if(LED_0_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_0,LOW);
 75e:	60 e0       	ldi	r22, 0x00	; 0
 760:	80 e0       	ldi	r24, 0x00	; 0
 762:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_voidSetPin>
        }else if(LED_0_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_0,HIGH);
        }
    break;
 766:	9b c0       	rjmp	.+310    	; 0x89e <__stack+0x3f>
    case (LED_1):
        if(LED_1_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_1,LOW);
 768:	60 e0       	ldi	r22, 0x00	; 0
 76a:	81 e0       	ldi	r24, 0x01	; 1
 76c:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_voidSetPin>
        }else if(LED_1_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_1,HIGH);
        }
    break;
 770:	96 c0       	rjmp	.+300    	; 0x89e <__stack+0x3f>
    case (LED_2):
        if(LED_2_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_2,LOW);
 772:	60 e0       	ldi	r22, 0x00	; 0
 774:	82 e0       	ldi	r24, 0x02	; 2
 776:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_voidSetPin>
        }else if(LED_2_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_2,HIGH);
        }
    break;
 77a:	91 c0       	rjmp	.+290    	; 0x89e <__stack+0x3f>
    case (LED_3):
        if(LED_3_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_3,LOW);
 77c:	60 e0       	ldi	r22, 0x00	; 0
 77e:	83 e0       	ldi	r24, 0x03	; 3
 780:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_voidSetPin>
        }else if(LED_3_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_3,HIGH);
        }
    break;
 784:	8c c0       	rjmp	.+280    	; 0x89e <__stack+0x3f>
    case (LED_4):
        if(LED_4_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_4,LOW);
 786:	60 e0       	ldi	r22, 0x00	; 0
 788:	84 e0       	ldi	r24, 0x04	; 4
 78a:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_voidSetPin>
        }else if(LED_4_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_4,HIGH);
        }
    break;
 78e:	87 c0       	rjmp	.+270    	; 0x89e <__stack+0x3f>
    case (LED_5):
        if(LED_5_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_5,LOW);
 790:	60 e0       	ldi	r22, 0x00	; 0
 792:	85 e0       	ldi	r24, 0x05	; 5
 794:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_voidSetPin>
        }else if(LED_5_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_5,HIGH);
        }
    break;
 798:	82 c0       	rjmp	.+260    	; 0x89e <__stack+0x3f>
    case (LED_6):
        if(LED_6_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_6,LOW);
 79a:	60 e0       	ldi	r22, 0x00	; 0
 79c:	86 e0       	ldi	r24, 0x06	; 6
 79e:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_voidSetPin>
        }else if(LED_6_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_6,HIGH);
        }
    break;
 7a2:	7d c0       	rjmp	.+250    	; 0x89e <__stack+0x3f>
    case (LED_7):
        if(LED_7_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_7,LOW);
 7a4:	60 e0       	ldi	r22, 0x00	; 0
 7a6:	87 e0       	ldi	r24, 0x07	; 7
 7a8:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_voidSetPin>
        }else if(LED_7_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_7,HIGH);
        }
    break;
 7ac:	78 c0       	rjmp	.+240    	; 0x89e <__stack+0x3f>
    case (LED_8):
        if(LED_8_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_8,LOW);
 7ae:	60 e0       	ldi	r22, 0x00	; 0
 7b0:	88 e0       	ldi	r24, 0x08	; 8
 7b2:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_voidSetPin>
        }else if(LED_8_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_8,HIGH);
        }
    break;
 7b6:	73 c0       	rjmp	.+230    	; 0x89e <__stack+0x3f>
    case (LED_9):
        if(LED_9_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_9,LOW);
 7b8:	60 e0       	ldi	r22, 0x00	; 0
 7ba:	89 e0       	ldi	r24, 0x09	; 9
 7bc:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_voidSetPin>
        }else if(LED_9_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_9,HIGH);
        }
    break;
 7c0:	6e c0       	rjmp	.+220    	; 0x89e <__stack+0x3f>
    case (LED_10):
        if(LED_10_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_10,LOW);
 7c2:	60 e0       	ldi	r22, 0x00	; 0
 7c4:	8a e0       	ldi	r24, 0x0A	; 10
 7c6:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_voidSetPin>
        }else if(LED_10_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_10,HIGH);
        }
    break;
 7ca:	69 c0       	rjmp	.+210    	; 0x89e <__stack+0x3f>
    case (LED_11):
        if(LED_11_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_11,LOW);
 7cc:	60 e0       	ldi	r22, 0x00	; 0
 7ce:	8b e0       	ldi	r24, 0x0B	; 11
 7d0:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_voidSetPin>
        }else if(LED_11_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_11,HIGH);
        }
    break;
 7d4:	64 c0       	rjmp	.+200    	; 0x89e <__stack+0x3f>
    case (LED_12):
        if(LED_12_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_12,LOW);
 7d6:	60 e0       	ldi	r22, 0x00	; 0
 7d8:	8c e0       	ldi	r24, 0x0C	; 12
 7da:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_voidSetPin>
        }else if(LED_12_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_12,HIGH);
        }
    break;
 7de:	5f c0       	rjmp	.+190    	; 0x89e <__stack+0x3f>
    case (LED_13):
        if(LED_13_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_13,LOW);
 7e0:	60 e0       	ldi	r22, 0x00	; 0
 7e2:	8d e0       	ldi	r24, 0x0D	; 13
 7e4:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_voidSetPin>
        }else if(LED_13_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_13,HIGH);
        }
    break;
 7e8:	5a c0       	rjmp	.+180    	; 0x89e <__stack+0x3f>
    case (LED_14):
        if(LED_14_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_14,LOW);
 7ea:	60 e0       	ldi	r22, 0x00	; 0
 7ec:	8e e0       	ldi	r24, 0x0E	; 14
 7ee:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_voidSetPin>
        }else if(LED_14_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_14,HIGH);
        }
    break;
 7f2:	55 c0       	rjmp	.+170    	; 0x89e <__stack+0x3f>
    case (LED_15):
        if(LED_15_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_15,LOW);
 7f4:	60 e0       	ldi	r22, 0x00	; 0
 7f6:	8f e0       	ldi	r24, 0x0F	; 15
 7f8:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_voidSetPin>
        }else if(LED_15_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_15,HIGH);
        }
    break;
 7fc:	50 c0       	rjmp	.+160    	; 0x89e <__stack+0x3f>
    case (LED_16):
        if(LED_16_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_16,LOW);
 7fe:	60 e0       	ldi	r22, 0x00	; 0
 800:	80 e1       	ldi	r24, 0x10	; 16
 802:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_voidSetPin>
        }else if(LED_16_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_16,HIGH);
        }
    break;
 806:	4b c0       	rjmp	.+150    	; 0x89e <__stack+0x3f>
    case (LED_17):
        if(LED_17_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_17,LOW);
 808:	60 e0       	ldi	r22, 0x00	; 0
 80a:	81 e1       	ldi	r24, 0x11	; 17
 80c:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_voidSetPin>
        }else if(LED_17_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_17,HIGH);
        }
    break;
 810:	46 c0       	rjmp	.+140    	; 0x89e <__stack+0x3f>
    case (LED_18):
        if(LED_18_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_18,LOW);
 812:	60 e0       	ldi	r22, 0x00	; 0
 814:	82 e1       	ldi	r24, 0x12	; 18
 816:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_voidSetPin>
        }else if(LED_18_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_18,HIGH);
        }
    break;
 81a:	41 c0       	rjmp	.+130    	; 0x89e <__stack+0x3f>
    case (LED_19):
        if(LED_19_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_19,LOW);
 81c:	60 e0       	ldi	r22, 0x00	; 0
 81e:	83 e1       	ldi	r24, 0x13	; 19
 820:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_voidSetPin>
        }else if(LED_19_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_19,HIGH);
        }
    break;
 824:	3c c0       	rjmp	.+120    	; 0x89e <__stack+0x3f>
    case (LED_20):
        if(LED_20_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_20,LOW);
 826:	60 e0       	ldi	r22, 0x00	; 0
 828:	84 e1       	ldi	r24, 0x14	; 20
 82a:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_voidSetPin>
        }else if(LED_20_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_20,HIGH);
        }
    break;
 82e:	37 c0       	rjmp	.+110    	; 0x89e <__stack+0x3f>
    case (LED_21):
        if(LED_21_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_21,LOW);
 830:	60 e0       	ldi	r22, 0x00	; 0
 832:	85 e1       	ldi	r24, 0x15	; 21
 834:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_voidSetPin>
        }else if(LED_21_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_21,HIGH);
        }
    break;
 838:	32 c0       	rjmp	.+100    	; 0x89e <__stack+0x3f>
    case (LED_22):
        if(LED_22_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_22,LOW);
 83a:	60 e0       	ldi	r22, 0x00	; 0
 83c:	86 e1       	ldi	r24, 0x16	; 22
 83e:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_voidSetPin>
        }else if(LED_22_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_22,HIGH);
        }
    break;
 842:	2d c0       	rjmp	.+90     	; 0x89e <__stack+0x3f>
    case (LED_23):
        if(LED_23_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_23,LOW);
 844:	60 e0       	ldi	r22, 0x00	; 0
 846:	87 e1       	ldi	r24, 0x17	; 23
 848:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_voidSetPin>
        }else if(LED_23_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_23,HIGH);
        }
    break;
 84c:	28 c0       	rjmp	.+80     	; 0x89e <__stack+0x3f>
    case (LED_24):
        if(LED_24_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_24,LOW);
 84e:	60 e0       	ldi	r22, 0x00	; 0
 850:	88 e1       	ldi	r24, 0x18	; 24
 852:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_voidSetPin>
        }else if(LED_24_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_24,HIGH);
        }
    break;
 856:	23 c0       	rjmp	.+70     	; 0x89e <__stack+0x3f>
    case (LED_25):
        if(LED_25_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_25,LOW);
 858:	60 e0       	ldi	r22, 0x00	; 0
 85a:	89 e1       	ldi	r24, 0x19	; 25
 85c:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_voidSetPin>
        }else if(LED_25_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_25,HIGH);
        }
    break;
 860:	1e c0       	rjmp	.+60     	; 0x89e <__stack+0x3f>
    case (LED_26):
        if(LED_26_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_26,LOW);
 862:	60 e0       	ldi	r22, 0x00	; 0
 864:	8a e1       	ldi	r24, 0x1A	; 26
 866:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_voidSetPin>
        }else if(LED_26_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_26,HIGH);
        }
    break;
 86a:	19 c0       	rjmp	.+50     	; 0x89e <__stack+0x3f>
    case (LED_27):
        if(LED_27_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_27,LOW);
 86c:	60 e0       	ldi	r22, 0x00	; 0
 86e:	8b e1       	ldi	r24, 0x1B	; 27
 870:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_voidSetPin>
        }else if(LED_27_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_27,HIGH);
        }
    break;
 874:	14 c0       	rjmp	.+40     	; 0x89e <__stack+0x3f>
    case (LED_28):
        if(LED_28_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_28,LOW);
 876:	60 e0       	ldi	r22, 0x00	; 0
 878:	8c e1       	ldi	r24, 0x1C	; 28
 87a:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_voidSetPin>
        }else if(LED_28_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_28,HIGH);
        }
    break;
 87e:	0f c0       	rjmp	.+30     	; 0x89e <__stack+0x3f>
    case (LED_29):
        if(LED_29_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_29,LOW);
 880:	60 e0       	ldi	r22, 0x00	; 0
 882:	8d e1       	ldi	r24, 0x1D	; 29
 884:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_voidSetPin>
        }else if(LED_29_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_29,HIGH);
        }
    break;
 888:	0a c0       	rjmp	.+20     	; 0x89e <__stack+0x3f>
    case (LED_30):
        if(LED_30_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_30,LOW);
 88a:	60 e0       	ldi	r22, 0x00	; 0
 88c:	8e e1       	ldi	r24, 0x1E	; 30
 88e:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_voidSetPin>
        }else if(LED_30_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_30,HIGH);
        }
    break;
 892:	05 c0       	rjmp	.+10     	; 0x89e <__stack+0x3f>
    case (LED_31):
        if(LED_31_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_31,LOW);
 894:	60 e0       	ldi	r22, 0x00	; 0
 896:	8f e1       	ldi	r24, 0x1F	; 31
 898:	0e 94 c2 00 	call	0x184	; 0x184 <DIO_voidSetPin>
        }else if(LED_31_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_31,HIGH);
        }
    break;
 89c:	00 00       	nop

	}


}
 89e:	00 00       	nop
 8a0:	0f 90       	pop	r0
 8a2:	df 91       	pop	r29
 8a4:	cf 91       	pop	r28
 8a6:	08 95       	ret

000008a8 <LED_voidToggle>:

void LED_voidToggle(u8 LedNum){
 8a8:	cf 93       	push	r28
 8aa:	df 93       	push	r29
 8ac:	1f 92       	push	r1
 8ae:	cd b7       	in	r28, 0x3d	; 61
 8b0:	de b7       	in	r29, 0x3e	; 62
 8b2:	89 83       	std	Y+1, r24	; 0x01

	switch(LedNum){
 8b4:	89 81       	ldd	r24, Y+1	; 0x01
 8b6:	88 2f       	mov	r24, r24
 8b8:	90 e0       	ldi	r25, 0x00	; 0
 8ba:	09 2e       	mov	r0, r25
 8bc:	00 0c       	add	r0, r0
 8be:	aa 0b       	sbc	r26, r26
 8c0:	bb 0b       	sbc	r27, r27
 8c2:	40 e0       	ldi	r20, 0x00	; 0
 8c4:	50 e0       	ldi	r21, 0x00	; 0
 8c6:	2f e1       	ldi	r18, 0x1F	; 31
 8c8:	30 e0       	ldi	r19, 0x00	; 0
 8ca:	84 1b       	sub	r24, r20
 8cc:	95 0b       	sbc	r25, r21
 8ce:	28 17       	cp	r18, r24
 8d0:	39 07       	cpc	r19, r25
 8d2:	08 f4       	brcc	.+2      	; 0x8d6 <LED_voidToggle+0x2e>
 8d4:	85 c0       	rjmp	.+266    	; 0x9e0 <LED_voidToggle+0x138>
 8d6:	86 59       	subi	r24, 0x96	; 150
 8d8:	9f 4f       	sbci	r25, 0xFF	; 255
 8da:	fc 01       	movw	r30, r24
 8dc:	0c 94 77 06 	jmp	0xcee	; 0xcee <__tablejump2__>

        	case (LED_0):
        		DIO_voidTogglePin(LEDPIN_0);
 8e0:	80 e0       	ldi	r24, 0x00	; 0
 8e2:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidTogglePin>
        	break;
 8e6:	7c c0       	rjmp	.+248    	; 0x9e0 <LED_voidToggle+0x138>
        	case (LED_1):
        		DIO_voidTogglePin(LEDPIN_1);
 8e8:	81 e0       	ldi	r24, 0x01	; 1
 8ea:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidTogglePin>
        	break;
 8ee:	78 c0       	rjmp	.+240    	; 0x9e0 <LED_voidToggle+0x138>
        	case (LED_2):
        		DIO_voidTogglePin(LEDPIN_2);
 8f0:	82 e0       	ldi	r24, 0x02	; 2
 8f2:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidTogglePin>
        	break;
 8f6:	74 c0       	rjmp	.+232    	; 0x9e0 <LED_voidToggle+0x138>
        	case (LED_3):
        		DIO_voidTogglePin(LEDPIN_3);
 8f8:	83 e0       	ldi	r24, 0x03	; 3
 8fa:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidTogglePin>
        	break;
 8fe:	70 c0       	rjmp	.+224    	; 0x9e0 <LED_voidToggle+0x138>
        	case (LED_4):
        		DIO_voidTogglePin(LEDPIN_4);
 900:	84 e0       	ldi	r24, 0x04	; 4
 902:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidTogglePin>
        	break;
 906:	6c c0       	rjmp	.+216    	; 0x9e0 <LED_voidToggle+0x138>
        	case (LED_5):
        		DIO_voidTogglePin(LEDPIN_5);
 908:	85 e0       	ldi	r24, 0x05	; 5
 90a:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidTogglePin>
        	break;
 90e:	68 c0       	rjmp	.+208    	; 0x9e0 <LED_voidToggle+0x138>
        	case (LED_6):
        		DIO_voidTogglePin(LEDPIN_6);
 910:	86 e0       	ldi	r24, 0x06	; 6
 912:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidTogglePin>
        	break;
 916:	64 c0       	rjmp	.+200    	; 0x9e0 <LED_voidToggle+0x138>
        	case (LED_7):
        		DIO_voidTogglePin(LEDPIN_7);
 918:	87 e0       	ldi	r24, 0x07	; 7
 91a:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidTogglePin>
        	break;
 91e:	60 c0       	rjmp	.+192    	; 0x9e0 <LED_voidToggle+0x138>
        	case (LED_8):
        		DIO_voidTogglePin(LEDPIN_8);
 920:	88 e0       	ldi	r24, 0x08	; 8
 922:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidTogglePin>
        	break;
 926:	5c c0       	rjmp	.+184    	; 0x9e0 <LED_voidToggle+0x138>
        	case (LED_9):
        		DIO_voidTogglePin(LEDPIN_9);
 928:	89 e0       	ldi	r24, 0x09	; 9
 92a:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidTogglePin>
        	break;
 92e:	58 c0       	rjmp	.+176    	; 0x9e0 <LED_voidToggle+0x138>
        	case (LED_10):
        		DIO_voidTogglePin(LEDPIN_10);
 930:	8a e0       	ldi	r24, 0x0A	; 10
 932:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidTogglePin>
        	break;
 936:	54 c0       	rjmp	.+168    	; 0x9e0 <LED_voidToggle+0x138>
        	case (LED_11):
        		DIO_voidTogglePin(LEDPIN_11);
 938:	8b e0       	ldi	r24, 0x0B	; 11
 93a:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidTogglePin>
        	break;
 93e:	50 c0       	rjmp	.+160    	; 0x9e0 <LED_voidToggle+0x138>
        	case (LED_12):
        		DIO_voidTogglePin(LEDPIN_12);
 940:	8c e0       	ldi	r24, 0x0C	; 12
 942:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidTogglePin>
        	break;
 946:	4c c0       	rjmp	.+152    	; 0x9e0 <LED_voidToggle+0x138>
        	case (LED_13):
        		DIO_voidTogglePin(LEDPIN_13);
 948:	8d e0       	ldi	r24, 0x0D	; 13
 94a:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidTogglePin>
        	break;
 94e:	48 c0       	rjmp	.+144    	; 0x9e0 <LED_voidToggle+0x138>
        	case (LED_14):
        		DIO_voidTogglePin(LEDPIN_14);
 950:	8e e0       	ldi	r24, 0x0E	; 14
 952:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidTogglePin>
        	break;
 956:	44 c0       	rjmp	.+136    	; 0x9e0 <LED_voidToggle+0x138>
        	case (LED_15):
        		DIO_voidTogglePin(LEDPIN_15);
 958:	8f e0       	ldi	r24, 0x0F	; 15
 95a:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidTogglePin>
        	break;
 95e:	40 c0       	rjmp	.+128    	; 0x9e0 <LED_voidToggle+0x138>
        	case (LED_16):
        		DIO_voidTogglePin(LEDPIN_16);
 960:	80 e1       	ldi	r24, 0x10	; 16
 962:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidTogglePin>
        	break;
 966:	3c c0       	rjmp	.+120    	; 0x9e0 <LED_voidToggle+0x138>
        	case (LED_17):
        		DIO_voidTogglePin(LEDPIN_17);
 968:	81 e1       	ldi	r24, 0x11	; 17
 96a:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidTogglePin>
        	break;
 96e:	38 c0       	rjmp	.+112    	; 0x9e0 <LED_voidToggle+0x138>
        	case (LED_18):
        		DIO_voidTogglePin(LEDPIN_18);
 970:	82 e1       	ldi	r24, 0x12	; 18
 972:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidTogglePin>
        	break;
 976:	34 c0       	rjmp	.+104    	; 0x9e0 <LED_voidToggle+0x138>
        	case (LED_19):
        		DIO_voidTogglePin(LEDPIN_19);
 978:	83 e1       	ldi	r24, 0x13	; 19
 97a:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidTogglePin>
        	break;
 97e:	30 c0       	rjmp	.+96     	; 0x9e0 <LED_voidToggle+0x138>
        	case (LED_20):
        		DIO_voidTogglePin(LEDPIN_20);
 980:	84 e1       	ldi	r24, 0x14	; 20
 982:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidTogglePin>
        	break;
 986:	2c c0       	rjmp	.+88     	; 0x9e0 <LED_voidToggle+0x138>
        	case (LED_21):
        		DIO_voidTogglePin(LEDPIN_21);
 988:	85 e1       	ldi	r24, 0x15	; 21
 98a:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidTogglePin>
        	break;
 98e:	28 c0       	rjmp	.+80     	; 0x9e0 <LED_voidToggle+0x138>
        	case (LED_22):
        		DIO_voidTogglePin(LEDPIN_22);
 990:	86 e1       	ldi	r24, 0x16	; 22
 992:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidTogglePin>
        	break;
 996:	24 c0       	rjmp	.+72     	; 0x9e0 <LED_voidToggle+0x138>
        	case (LED_23):
        		DIO_voidTogglePin(LEDPIN_23);
 998:	87 e1       	ldi	r24, 0x17	; 23
 99a:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidTogglePin>
        	break;
 99e:	20 c0       	rjmp	.+64     	; 0x9e0 <LED_voidToggle+0x138>
        	case (LED_24):
        		DIO_voidTogglePin(LEDPIN_24);
 9a0:	88 e1       	ldi	r24, 0x18	; 24
 9a2:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidTogglePin>
        	break;
 9a6:	1c c0       	rjmp	.+56     	; 0x9e0 <LED_voidToggle+0x138>
        	case (LED_25):
        		DIO_voidTogglePin(LEDPIN_25);
 9a8:	89 e1       	ldi	r24, 0x19	; 25
 9aa:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidTogglePin>
        	break;
 9ae:	18 c0       	rjmp	.+48     	; 0x9e0 <LED_voidToggle+0x138>
        	case (LED_26):
        		DIO_voidTogglePin(LEDPIN_26);
 9b0:	8a e1       	ldi	r24, 0x1A	; 26
 9b2:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidTogglePin>
        	break;
 9b6:	14 c0       	rjmp	.+40     	; 0x9e0 <LED_voidToggle+0x138>
        	case (LED_27):
        		DIO_voidTogglePin(LEDPIN_27);
 9b8:	8b e1       	ldi	r24, 0x1B	; 27
 9ba:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidTogglePin>
        	break;
 9be:	10 c0       	rjmp	.+32     	; 0x9e0 <LED_voidToggle+0x138>
        	case (LED_28):
        		DIO_voidTogglePin(LEDPIN_28);
 9c0:	8c e1       	ldi	r24, 0x1C	; 28
 9c2:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidTogglePin>
        	break;
 9c6:	0c c0       	rjmp	.+24     	; 0x9e0 <LED_voidToggle+0x138>
        	case (LED_29):
        		DIO_voidTogglePin(LEDPIN_29);
 9c8:	8d e1       	ldi	r24, 0x1D	; 29
 9ca:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidTogglePin>
        	break;
 9ce:	08 c0       	rjmp	.+16     	; 0x9e0 <LED_voidToggle+0x138>
        	case (LED_30):
        		DIO_voidTogglePin(LEDPIN_30);
 9d0:	8e e1       	ldi	r24, 0x1E	; 30
 9d2:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidTogglePin>
        	break;
 9d6:	04 c0       	rjmp	.+8      	; 0x9e0 <LED_voidToggle+0x138>
        	case (LED_31):
        		DIO_voidTogglePin(LEDPIN_31);
 9d8:	8f e1       	ldi	r24, 0x1F	; 31
 9da:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidTogglePin>
        	break;
 9de:	00 00       	nop

	}


}
 9e0:	00 00       	nop
 9e2:	0f 90       	pop	r0
 9e4:	df 91       	pop	r29
 9e6:	cf 91       	pop	r28
 9e8:	08 95       	ret

000009ea <LED_oneToggle>:
	u8 periodicity;
	void (*pf) (void);

}task_t;

void LED_oneToggle(void){
 9ea:	cf 93       	push	r28
 9ec:	df 93       	push	r29
 9ee:	cd b7       	in	r28, 0x3d	; 61
 9f0:	de b7       	in	r29, 0x3e	; 62
	LED_voidToggle(LED_0);
 9f2:	80 e0       	ldi	r24, 0x00	; 0
 9f4:	0e 94 54 04 	call	0x8a8	; 0x8a8 <LED_voidToggle>
}
 9f8:	00 00       	nop
 9fa:	df 91       	pop	r29
 9fc:	cf 91       	pop	r28
 9fe:	08 95       	ret

00000a00 <LED_twoToggle>:
void LED_twoToggle(void){
 a00:	cf 93       	push	r28
 a02:	df 93       	push	r29
 a04:	cd b7       	in	r28, 0x3d	; 61
 a06:	de b7       	in	r29, 0x3e	; 62
	LED_voidToggle(LED_1);
 a08:	81 e0       	ldi	r24, 0x01	; 1
 a0a:	0e 94 54 04 	call	0x8a8	; 0x8a8 <LED_voidToggle>
}
 a0e:	00 00       	nop
 a10:	df 91       	pop	r29
 a12:	cf 91       	pop	r28
 a14:	08 95       	ret

00000a16 <LED_threeToggle>:
void LED_threeToggle(void){
 a16:	cf 93       	push	r28
 a18:	df 93       	push	r29
 a1a:	cd b7       	in	r28, 0x3d	; 61
 a1c:	de b7       	in	r29, 0x3e	; 62
	LED_voidToggle(LED_2);
 a1e:	82 e0       	ldi	r24, 0x02	; 2
 a20:	0e 94 54 04 	call	0x8a8	; 0x8a8 <LED_voidToggle>
}
 a24:	00 00       	nop
 a26:	df 91       	pop	r29
 a28:	cf 91       	pop	r28
 a2a:	08 95       	ret

00000a2c <LED_fourToggle>:
void LED_fourToggle(void){
 a2c:	cf 93       	push	r28
 a2e:	df 93       	push	r29
 a30:	cd b7       	in	r28, 0x3d	; 61
 a32:	de b7       	in	r29, 0x3e	; 62
	LED_voidToggle(LED_3);
 a34:	83 e0       	ldi	r24, 0x03	; 3
 a36:	0e 94 54 04 	call	0x8a8	; 0x8a8 <LED_voidToggle>
}
 a3a:	00 00       	nop
 a3c:	df 91       	pop	r29
 a3e:	cf 91       	pop	r28
 a40:	08 95       	ret

00000a42 <RTOS_initialize>:


};


void RTOS_initialize(void){
 a42:	cf 93       	push	r28
 a44:	df 93       	push	r29
 a46:	cd b7       	in	r28, 0x3d	; 61
 a48:	de b7       	in	r29, 0x3e	; 62
	TIM0_voidSetRegister(RTO_u16_max_ov);
 a4a:	80 e9       	ldi	r24, 0x90	; 144
 a4c:	0e 94 e5 05 	call	0xbca	; 0xbca <TIM0_voidSetRegister>
	TIM0_voidSetCallBack(kernel);
 a50:	80 e3       	ldi	r24, 0x30	; 48
 a52:	95 e0       	ldi	r25, 0x05	; 5
 a54:	0e 94 f5 05 	call	0xbea	; 0xbea <TIM0_voidSetCallBack>

}
 a58:	00 00       	nop
 a5a:	df 91       	pop	r29
 a5c:	cf 91       	pop	r28
 a5e:	08 95       	ret

00000a60 <kernel>:

void kernel(void){
 a60:	cf 93       	push	r28
 a62:	df 93       	push	r29
 a64:	cd b7       	in	r28, 0x3d	; 61
 a66:	de b7       	in	r29, 0x3e	; 62
	counter++;
 a68:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <counter>
 a6c:	8f 5f       	subi	r24, 0xFF	; 255
 a6e:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <counter>
	if(counter==NumOfOverflows)
 a72:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <counter>
 a76:	83 30       	cpi	r24, 0x03	; 3
 a78:	c1 f4       	brne	.+48     	; 0xaaa <kernel+0x4a>
	{
		flag=1;
 a7a:	81 e0       	ldi	r24, 0x01	; 1
 a7c:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <flag>
		counter = 0;
 a80:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <counter>
		tickcount++;
 a84:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 a88:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <__data_end+0x1>
 a8c:	a0 91 6e 00 	lds	r26, 0x006E	; 0x80006e <__data_end+0x2>
 a90:	b0 91 6f 00 	lds	r27, 0x006F	; 0x80006f <__data_end+0x3>
 a94:	01 96       	adiw	r24, 0x01	; 1
 a96:	a1 1d       	adc	r26, r1
 a98:	b1 1d       	adc	r27, r1
 a9a:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end>
 a9e:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <__data_end+0x1>
 aa2:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <__data_end+0x2>
 aa6:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <__data_end+0x3>

	}
}
 aaa:	00 00       	nop
 aac:	df 91       	pop	r29
 aae:	cf 91       	pop	r28
 ab0:	08 95       	ret

00000ab2 <scheduler>:
void scheduler(void)
{
 ab2:	ef 92       	push	r14
 ab4:	ff 92       	push	r15
 ab6:	0f 93       	push	r16
 ab8:	1f 93       	push	r17
 aba:	cf 93       	push	r28
 abc:	df 93       	push	r29
 abe:	1f 92       	push	r1
 ac0:	cd b7       	in	r28, 0x3d	; 61
 ac2:	de b7       	in	r29, 0x3e	; 62
	for(u8 i =0 ; i<NumOfTasks;i++)
 ac4:	19 82       	std	Y+1, r1	; 0x01
 ac6:	34 c0       	rjmp	.+104    	; 0xb30 <scheduler+0x7e>
	{
		if(tickcount%tasks[i].periodicity==0)
 ac8:	e0 90 6c 00 	lds	r14, 0x006C	; 0x80006c <__data_end>
 acc:	f0 90 6d 00 	lds	r15, 0x006D	; 0x80006d <__data_end+0x1>
 ad0:	00 91 6e 00 	lds	r16, 0x006E	; 0x80006e <__data_end+0x2>
 ad4:	10 91 6f 00 	lds	r17, 0x006F	; 0x80006f <__data_end+0x3>
 ad8:	89 81       	ldd	r24, Y+1	; 0x01
 ada:	28 2f       	mov	r18, r24
 adc:	30 e0       	ldi	r19, 0x00	; 0
 ade:	c9 01       	movw	r24, r18
 ae0:	88 0f       	add	r24, r24
 ae2:	99 1f       	adc	r25, r25
 ae4:	82 0f       	add	r24, r18
 ae6:	93 1f       	adc	r25, r19
 ae8:	80 5a       	subi	r24, 0xA0	; 160
 aea:	9f 4f       	sbci	r25, 0xFF	; 255
 aec:	fc 01       	movw	r30, r24
 aee:	80 81       	ld	r24, Z
 af0:	28 2f       	mov	r18, r24
 af2:	30 e0       	ldi	r19, 0x00	; 0
 af4:	40 e0       	ldi	r20, 0x00	; 0
 af6:	50 e0       	ldi	r21, 0x00	; 0
 af8:	c8 01       	movw	r24, r16
 afa:	b7 01       	movw	r22, r14
 afc:	0e 94 55 06 	call	0xcaa	; 0xcaa <__udivmodsi4>
 b00:	dc 01       	movw	r26, r24
 b02:	cb 01       	movw	r24, r22
 b04:	89 2b       	or	r24, r25
 b06:	8a 2b       	or	r24, r26
 b08:	8b 2b       	or	r24, r27
 b0a:	79 f4       	brne	.+30     	; 0xb2a <scheduler+0x78>
		{
			tasks[i].pf();
 b0c:	89 81       	ldd	r24, Y+1	; 0x01
 b0e:	28 2f       	mov	r18, r24
 b10:	30 e0       	ldi	r19, 0x00	; 0
 b12:	c9 01       	movw	r24, r18
 b14:	88 0f       	add	r24, r24
 b16:	99 1f       	adc	r25, r25
 b18:	82 0f       	add	r24, r18
 b1a:	93 1f       	adc	r25, r19
 b1c:	8f 59       	subi	r24, 0x9F	; 159
 b1e:	9f 4f       	sbci	r25, 0xFF	; 255
 b20:	fc 01       	movw	r30, r24
 b22:	80 81       	ld	r24, Z
 b24:	91 81       	ldd	r25, Z+1	; 0x01
 b26:	fc 01       	movw	r30, r24
 b28:	09 95       	icall

	}
}
void scheduler(void)
{
	for(u8 i =0 ; i<NumOfTasks;i++)
 b2a:	89 81       	ldd	r24, Y+1	; 0x01
 b2c:	8f 5f       	subi	r24, 0xFF	; 255
 b2e:	89 83       	std	Y+1, r24	; 0x01
 b30:	89 81       	ldd	r24, Y+1	; 0x01
 b32:	84 30       	cpi	r24, 0x04	; 4
 b34:	48 f2       	brcs	.-110    	; 0xac8 <scheduler+0x16>
			tasks[i].pf();
		}

	}

}
 b36:	00 00       	nop
 b38:	0f 90       	pop	r0
 b3a:	df 91       	pop	r29
 b3c:	cf 91       	pop	r28
 b3e:	1f 91       	pop	r17
 b40:	0f 91       	pop	r16
 b42:	ff 90       	pop	r15
 b44:	ef 90       	pop	r14
 b46:	08 95       	ret

00000b48 <TIM0_voidInitialize>:
#include "TIM0_int.h"
static void(*TIM0_CallBack)(void);

/* Description:  */
void TIM0_voidInitialize(void)
{
 b48:	cf 93       	push	r28
 b4a:	df 93       	push	r29
 b4c:	cd b7       	in	r28, 0x3d	; 61
 b4e:	de b7       	in	r29, 0x3e	; 62
	//han5aly el prescaler a5er 7aga 3shan ana mograd makatbt el prescaller haybtdy 3ad
	
	/*Disable interrupt */  //3ashan el setcallback delwa2ty feha gabrage fna h3melo enable lama y7ot el call back
	CLRBIT(TIMSK,0);
 b50:	89 e5       	ldi	r24, 0x59	; 89
 b52:	90 e0       	ldi	r25, 0x00	; 0
 b54:	29 e5       	ldi	r18, 0x59	; 89
 b56:	30 e0       	ldi	r19, 0x00	; 0
 b58:	f9 01       	movw	r30, r18
 b5a:	20 81       	ld	r18, Z
 b5c:	2e 7f       	andi	r18, 0xFE	; 254
 b5e:	fc 01       	movw	r30, r24
 b60:	20 83       	st	Z, r18
	/* Clear Flag */
	SETBIT(TIFR,0);
 b62:	88 e5       	ldi	r24, 0x58	; 88
 b64:	90 e0       	ldi	r25, 0x00	; 0
 b66:	28 e5       	ldi	r18, 0x58	; 88
 b68:	30 e0       	ldi	r19, 0x00	; 0
 b6a:	f9 01       	movw	r30, r18
 b6c:	20 81       	ld	r18, Z
 b6e:	21 60       	ori	r18, 0x01	; 1
 b70:	fc 01       	movw	r30, r24
 b72:	20 83       	st	Z, r18
	#elif TIM0_u16_PRESCALLER ==TIM0_u16_DIV_8
	TCCR0 = 0b00000010;
	#elif TIM0_u16_PRESCALLER ==TIM0_u16_DIV_64
	TCCR0 = 0b00000011;
	#elif TIM0_u16_PRESCALLER ==TIM0_u16_DIV_256
	TCCR0 = 0b00000100;
 b74:	83 e5       	ldi	r24, 0x53	; 83
 b76:	90 e0       	ldi	r25, 0x00	; 0
 b78:	24 e0       	ldi	r18, 0x04	; 4
 b7a:	fc 01       	movw	r30, r24
 b7c:	20 83       	st	Z, r18
	#elif TIM0_u16_PRESCALLER ==TIM0_u16_DIV_1024
	TCCR0 = 0b00000101;
	#endif
	
}
 b7e:	00 00       	nop
 b80:	df 91       	pop	r29
 b82:	cf 91       	pop	r28
 b84:	08 95       	ret

00000b86 <TIM0_voidEnableInt>:

/* Description:  */
void TIM0_voidEnableInt(void)
{
 b86:	cf 93       	push	r28
 b88:	df 93       	push	r29
 b8a:	cd b7       	in	r28, 0x3d	; 61
 b8c:	de b7       	in	r29, 0x3e	; 62
	SETBIT(TIMSK,0);
 b8e:	89 e5       	ldi	r24, 0x59	; 89
 b90:	90 e0       	ldi	r25, 0x00	; 0
 b92:	29 e5       	ldi	r18, 0x59	; 89
 b94:	30 e0       	ldi	r19, 0x00	; 0
 b96:	f9 01       	movw	r30, r18
 b98:	20 81       	ld	r18, Z
 b9a:	21 60       	ori	r18, 0x01	; 1
 b9c:	fc 01       	movw	r30, r24
 b9e:	20 83       	st	Z, r18
}
 ba0:	00 00       	nop
 ba2:	df 91       	pop	r29
 ba4:	cf 91       	pop	r28
 ba6:	08 95       	ret

00000ba8 <TIM0_voidDisableInt>:


void TIM0_voidDisableInt(void)
{
 ba8:	cf 93       	push	r28
 baa:	df 93       	push	r29
 bac:	cd b7       	in	r28, 0x3d	; 61
 bae:	de b7       	in	r29, 0x3e	; 62
	CLRBIT(TIMSK,0);
 bb0:	89 e5       	ldi	r24, 0x59	; 89
 bb2:	90 e0       	ldi	r25, 0x00	; 0
 bb4:	29 e5       	ldi	r18, 0x59	; 89
 bb6:	30 e0       	ldi	r19, 0x00	; 0
 bb8:	f9 01       	movw	r30, r18
 bba:	20 81       	ld	r18, Z
 bbc:	2e 7f       	andi	r18, 0xFE	; 254
 bbe:	fc 01       	movw	r30, r24
 bc0:	20 83       	st	Z, r18
}
 bc2:	00 00       	nop
 bc4:	df 91       	pop	r29
 bc6:	cf 91       	pop	r28
 bc8:	08 95       	ret

00000bca <TIM0_voidSetRegister>:

void TIM0_voidSetRegister(u8 Copy_u8Value)
{
 bca:	cf 93       	push	r28
 bcc:	df 93       	push	r29
 bce:	1f 92       	push	r1
 bd0:	cd b7       	in	r28, 0x3d	; 61
 bd2:	de b7       	in	r29, 0x3e	; 62
 bd4:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Copy_u8Value;
 bd6:	82 e5       	ldi	r24, 0x52	; 82
 bd8:	90 e0       	ldi	r25, 0x00	; 0
 bda:	29 81       	ldd	r18, Y+1	; 0x01
 bdc:	fc 01       	movw	r30, r24
 bde:	20 83       	st	Z, r18
}
 be0:	00 00       	nop
 be2:	0f 90       	pop	r0
 be4:	df 91       	pop	r29
 be6:	cf 91       	pop	r28
 be8:	08 95       	ret

00000bea <TIM0_voidSetCallBack>:


void TIM0_voidSetCallBack(void (*Copy_ptr) (void))
{
 bea:	cf 93       	push	r28
 bec:	df 93       	push	r29
 bee:	00 d0       	rcall	.+0      	; 0xbf0 <TIM0_voidSetCallBack+0x6>
 bf0:	cd b7       	in	r28, 0x3d	; 61
 bf2:	de b7       	in	r29, 0x3e	; 62
 bf4:	9a 83       	std	Y+2, r25	; 0x02
 bf6:	89 83       	std	Y+1, r24	; 0x01
	TIM0_CallBack = Copy_ptr;
 bf8:	89 81       	ldd	r24, Y+1	; 0x01
 bfa:	9a 81       	ldd	r25, Y+2	; 0x02
 bfc:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <TIM0_CallBack+0x1>
 c00:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <TIM0_CallBack>
}
 c04:	00 00       	nop
 c06:	0f 90       	pop	r0
 c08:	0f 90       	pop	r0
 c0a:	df 91       	pop	r29
 c0c:	cf 91       	pop	r28
 c0e:	08 95       	ret

00000c10 <__vector_11>:

void __vector_11(void) __attribute__((signal,used));
void __vector_11(void)
{
 c10:	1f 92       	push	r1
 c12:	0f 92       	push	r0
 c14:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 c18:	0f 92       	push	r0
 c1a:	11 24       	eor	r1, r1
 c1c:	2f 93       	push	r18
 c1e:	3f 93       	push	r19
 c20:	4f 93       	push	r20
 c22:	5f 93       	push	r21
 c24:	6f 93       	push	r22
 c26:	7f 93       	push	r23
 c28:	8f 93       	push	r24
 c2a:	9f 93       	push	r25
 c2c:	af 93       	push	r26
 c2e:	bf 93       	push	r27
 c30:	ef 93       	push	r30
 c32:	ff 93       	push	r31
 c34:	cf 93       	push	r28
 c36:	df 93       	push	r29
 c38:	cd b7       	in	r28, 0x3d	; 61
 c3a:	de b7       	in	r29, 0x3e	; 62
	TIM0_CallBack();
 c3c:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <TIM0_CallBack>
 c40:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <TIM0_CallBack+0x1>
 c44:	fc 01       	movw	r30, r24
 c46:	09 95       	icall
}
 c48:	00 00       	nop
 c4a:	df 91       	pop	r29
 c4c:	cf 91       	pop	r28
 c4e:	ff 91       	pop	r31
 c50:	ef 91       	pop	r30
 c52:	bf 91       	pop	r27
 c54:	af 91       	pop	r26
 c56:	9f 91       	pop	r25
 c58:	8f 91       	pop	r24
 c5a:	7f 91       	pop	r23
 c5c:	6f 91       	pop	r22
 c5e:	5f 91       	pop	r21
 c60:	4f 91       	pop	r20
 c62:	3f 91       	pop	r19
 c64:	2f 91       	pop	r18
 c66:	0f 90       	pop	r0
 c68:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 c6c:	0f 90       	pop	r0
 c6e:	1f 90       	pop	r1
 c70:	18 95       	reti

00000c72 <main>:

extern u8 flag;
#define RTO_u8_TIM_INIT		144

int main(void)
{
 c72:	cf 93       	push	r28
 c74:	df 93       	push	r29
 c76:	cd b7       	in	r28, 0x3d	; 61
 c78:	de b7       	in	r29, 0x3e	; 62
	DIO_voidInitialize();
 c7a:	0e 94 a9 00 	call	0x152	; 0x152 <DIO_voidInitialize>
	GIE_voidEnable();
 c7e:	0e 94 a8 02 	call	0x550	; 0x550 <GIE_voidEnable>

	LED_voidInitialize();
 c82:	0e 94 ca 02 	call	0x594	; 0x594 <LED_voidInitialize>
	TIM0_voidSetRegister(RTO_u8_TIM_INIT);
 c86:	80 e9       	ldi	r24, 0x90	; 144
 c88:	0e 94 e5 05 	call	0xbca	; 0xbca <TIM0_voidSetRegister>
	TIM0_voidInitialize();
 c8c:	0e 94 a4 05 	call	0xb48	; 0xb48 <TIM0_voidInitialize>
	TIM0_voidEnableInt();
 c90:	0e 94 c3 05 	call	0xb86	; 0xb86 <TIM0_voidEnableInt>
	RTOS_initialize();
 c94:	0e 94 21 05 	call	0xa42	; 0xa42 <RTOS_initialize>


	while(1)
	{
		if(flag==1)
 c98:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <flag>
 c9c:	81 30       	cpi	r24, 0x01	; 1
 c9e:	e1 f7       	brne	.-8      	; 0xc98 <main+0x26>
		{
			scheduler();
 ca0:	0e 94 59 05 	call	0xab2	; 0xab2 <scheduler>
			flag=0;
 ca4:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <flag>
		}

	}
 ca8:	f7 cf       	rjmp	.-18     	; 0xc98 <main+0x26>

00000caa <__udivmodsi4>:
 caa:	a1 e2       	ldi	r26, 0x21	; 33
 cac:	1a 2e       	mov	r1, r26
 cae:	aa 1b       	sub	r26, r26
 cb0:	bb 1b       	sub	r27, r27
 cb2:	fd 01       	movw	r30, r26
 cb4:	0d c0       	rjmp	.+26     	; 0xcd0 <__udivmodsi4_ep>

00000cb6 <__udivmodsi4_loop>:
 cb6:	aa 1f       	adc	r26, r26
 cb8:	bb 1f       	adc	r27, r27
 cba:	ee 1f       	adc	r30, r30
 cbc:	ff 1f       	adc	r31, r31
 cbe:	a2 17       	cp	r26, r18
 cc0:	b3 07       	cpc	r27, r19
 cc2:	e4 07       	cpc	r30, r20
 cc4:	f5 07       	cpc	r31, r21
 cc6:	20 f0       	brcs	.+8      	; 0xcd0 <__udivmodsi4_ep>
 cc8:	a2 1b       	sub	r26, r18
 cca:	b3 0b       	sbc	r27, r19
 ccc:	e4 0b       	sbc	r30, r20
 cce:	f5 0b       	sbc	r31, r21

00000cd0 <__udivmodsi4_ep>:
 cd0:	66 1f       	adc	r22, r22
 cd2:	77 1f       	adc	r23, r23
 cd4:	88 1f       	adc	r24, r24
 cd6:	99 1f       	adc	r25, r25
 cd8:	1a 94       	dec	r1
 cda:	69 f7       	brne	.-38     	; 0xcb6 <__udivmodsi4_loop>
 cdc:	60 95       	com	r22
 cde:	70 95       	com	r23
 ce0:	80 95       	com	r24
 ce2:	90 95       	com	r25
 ce4:	9b 01       	movw	r18, r22
 ce6:	ac 01       	movw	r20, r24
 ce8:	bd 01       	movw	r22, r26
 cea:	cf 01       	movw	r24, r30
 cec:	08 95       	ret

00000cee <__tablejump2__>:
 cee:	ee 0f       	add	r30, r30
 cf0:	ff 1f       	adc	r31, r31
 cf2:	05 90       	lpm	r0, Z+
 cf4:	f4 91       	lpm	r31, Z
 cf6:	e0 2d       	mov	r30, r0
 cf8:	09 94       	ijmp

00000cfa <_exit>:
 cfa:	f8 94       	cli

00000cfc <__stop_program>:
 cfc:	ff cf       	rjmp	.-2      	; 0xcfc <__stop_program>
