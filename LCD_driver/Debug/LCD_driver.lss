
LCD_driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000017be  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000017be  00001832  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001950  00000000  00000000  0000183c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000e5b  00000000  00000000  0000318c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00003fe7  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003ff8  2**2
                  CONTENTS, READONLY
  6 .debug_info   000004e6  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004a3  00000000  00000000  0000451a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001a  00000000  00000000  000049bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000196  00000000  00000000  000049d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee eb       	ldi	r30, 0xBE	; 190
      68:	f7 e1       	ldi	r31, 0x17	; 23
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
      76:	0e 94 58 09 	call	0x12b0	; 0x12b0 <main>
      7a:	0c 94 dd 0b 	jmp	0x17ba	; 0x17ba <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_voidInitialize>:
#include "BIT_MATH.h"
#include "DIO_priv.h"
#include "DIO_config.h"
#include "DIO_int.h"

void DIO_voidInitialize(void){
      82:	cf 93       	push	r28
      84:	df 93       	push	r29
      86:	cd b7       	in	r28, 0x3d	; 61
      88:	de b7       	in	r29, 0x3e	; 62

	DDRA = CONCBIT(PIN_7DIR,PIN_6DIR,PIN_5DIR,PIN_4DIR,PIN_3DIR,PIN_2DIR,PIN_1DIR,PIN_0DIR);
      8a:	8a e3       	ldi	r24, 0x3A	; 58
      8c:	90 e0       	ldi	r25, 0x00	; 0
      8e:	2f ef       	ldi	r18, 0xFF	; 255
      90:	fc 01       	movw	r30, r24
      92:	20 83       	st	Z, r18
	DDRB = CONCBIT(PIN_15DIR,PIN_14DIR,PIN_13DIR,PIN_12DIR,PIN_11DIR,PIN_10DIR,PIN_9DIR,PIN_8DIR);
      94:	87 e3       	ldi	r24, 0x37	; 55
      96:	90 e0       	ldi	r25, 0x00	; 0
      98:	27 e0       	ldi	r18, 0x07	; 7
      9a:	fc 01       	movw	r30, r24
      9c:	20 83       	st	Z, r18
	DDRC = CONCBIT(PIN_23DIR,PIN_22DIR,PIN_21DIR,PIN_20DIR,PIN_19DIR,PIN_18DIR,PIN_17DIR,PIN_16DIR);
      9e:	84 e3       	ldi	r24, 0x34	; 52
      a0:	90 e0       	ldi	r25, 0x00	; 0
      a2:	2f ef       	ldi	r18, 0xFF	; 255
      a4:	fc 01       	movw	r30, r24
      a6:	20 83       	st	Z, r18
	DDRD = CONCBIT(PIN_31DIR,PIN_30DIR,PIN_29DIR,PIN_28DIR,PIN_27DIR,PIN_26DIR,PIN_25DIR,PIN_24DIR);
      a8:	81 e3       	ldi	r24, 0x31	; 49
      aa:	90 e0       	ldi	r25, 0x00	; 0
      ac:	2f ef       	ldi	r18, 0xFF	; 255
      ae:	fc 01       	movw	r30, r24
      b0:	20 83       	st	Z, r18

}
      b2:	00 00       	nop
      b4:	df 91       	pop	r29
      b6:	cf 91       	pop	r28
      b8:	08 95       	ret

000000ba <DIO_voidSetPin>:

void DIO_voidSetPin(u8 PinNum,u8 Value){
      ba:	cf 93       	push	r28
      bc:	df 93       	push	r29
      be:	00 d0       	rcall	.+0      	; 0xc0 <DIO_voidSetPin+0x6>
      c0:	cd b7       	in	r28, 0x3d	; 61
      c2:	de b7       	in	r29, 0x3e	; 62
      c4:	89 83       	std	Y+1, r24	; 0x01
      c6:	6a 83       	std	Y+2, r22	; 0x02
    if (Value==HIGH){
      c8:	8a 81       	ldd	r24, Y+2	; 0x02
      ca:	81 30       	cpi	r24, 0x01	; 1
      cc:	09 f0       	breq	.+2      	; 0xd0 <DIO_voidSetPin+0x16>
      ce:	74 c0       	rjmp	.+232    	; 0x1b8 <DIO_voidSetPin+0xfe>

        if((PinNum>=0 && PinNum<8)){
      d0:	89 81       	ldd	r24, Y+1	; 0x01
      d2:	88 30       	cpi	r24, 0x08	; 8
      d4:	a8 f4       	brcc	.+42     	; 0x100 <DIO_voidSetPin+0x46>
            SETBIT(PORTA,PinNum);
      d6:	8b e3       	ldi	r24, 0x3B	; 59
      d8:	90 e0       	ldi	r25, 0x00	; 0
      da:	2b e3       	ldi	r18, 0x3B	; 59
      dc:	30 e0       	ldi	r19, 0x00	; 0
      de:	f9 01       	movw	r30, r18
      e0:	20 81       	ld	r18, Z
      e2:	62 2f       	mov	r22, r18
      e4:	29 81       	ldd	r18, Y+1	; 0x01
      e6:	42 2f       	mov	r20, r18
      e8:	50 e0       	ldi	r21, 0x00	; 0
      ea:	21 e0       	ldi	r18, 0x01	; 1
      ec:	30 e0       	ldi	r19, 0x00	; 0
      ee:	02 c0       	rjmp	.+4      	; 0xf4 <DIO_voidSetPin+0x3a>
      f0:	22 0f       	add	r18, r18
      f2:	33 1f       	adc	r19, r19
      f4:	4a 95       	dec	r20
      f6:	e2 f7       	brpl	.-8      	; 0xf0 <DIO_voidSetPin+0x36>
      f8:	26 2b       	or	r18, r22
      fa:	fc 01       	movw	r30, r24
      fc:	20 83       	st	Z, r18
    	    CLRBIT(PORTD,PinNum-16);
    	}

    }

}
      fe:	d6 c0       	rjmp	.+428    	; 0x2ac <DIO_voidSetPin+0x1f2>
void DIO_voidSetPin(u8 PinNum,u8 Value){
    if (Value==HIGH){

        if((PinNum>=0 && PinNum<8)){
            SETBIT(PORTA,PinNum);
        }else if((PinNum>=8) && (PinNum<16)){
     100:	89 81       	ldd	r24, Y+1	; 0x01
     102:	88 30       	cpi	r24, 0x08	; 8
     104:	d8 f0       	brcs	.+54     	; 0x13c <DIO_voidSetPin+0x82>
     106:	89 81       	ldd	r24, Y+1	; 0x01
     108:	80 31       	cpi	r24, 0x10	; 16
     10a:	c0 f4       	brcc	.+48     	; 0x13c <DIO_voidSetPin+0x82>
        	SETBIT(PORTB,PinNum-8);
     10c:	88 e3       	ldi	r24, 0x38	; 56
     10e:	90 e0       	ldi	r25, 0x00	; 0
     110:	28 e3       	ldi	r18, 0x38	; 56
     112:	30 e0       	ldi	r19, 0x00	; 0
     114:	f9 01       	movw	r30, r18
     116:	20 81       	ld	r18, Z
     118:	62 2f       	mov	r22, r18
     11a:	29 81       	ldd	r18, Y+1	; 0x01
     11c:	22 2f       	mov	r18, r18
     11e:	30 e0       	ldi	r19, 0x00	; 0
     120:	a9 01       	movw	r20, r18
     122:	48 50       	subi	r20, 0x08	; 8
     124:	51 09       	sbc	r21, r1
     126:	21 e0       	ldi	r18, 0x01	; 1
     128:	30 e0       	ldi	r19, 0x00	; 0
     12a:	02 c0       	rjmp	.+4      	; 0x130 <DIO_voidSetPin+0x76>
     12c:	22 0f       	add	r18, r18
     12e:	33 1f       	adc	r19, r19
     130:	4a 95       	dec	r20
     132:	e2 f7       	brpl	.-8      	; 0x12c <DIO_voidSetPin+0x72>
     134:	26 2b       	or	r18, r22
     136:	fc 01       	movw	r30, r24
     138:	20 83       	st	Z, r18
     13a:	b8 c0       	rjmp	.+368    	; 0x2ac <DIO_voidSetPin+0x1f2>
        }else if((PinNum>=16) && (PinNum<24)){
     13c:	89 81       	ldd	r24, Y+1	; 0x01
     13e:	80 31       	cpi	r24, 0x10	; 16
     140:	d8 f0       	brcs	.+54     	; 0x178 <DIO_voidSetPin+0xbe>
     142:	89 81       	ldd	r24, Y+1	; 0x01
     144:	88 31       	cpi	r24, 0x18	; 24
     146:	c0 f4       	brcc	.+48     	; 0x178 <DIO_voidSetPin+0xbe>
        	SETBIT(PORTC,PinNum-16);
     148:	85 e3       	ldi	r24, 0x35	; 53
     14a:	90 e0       	ldi	r25, 0x00	; 0
     14c:	25 e3       	ldi	r18, 0x35	; 53
     14e:	30 e0       	ldi	r19, 0x00	; 0
     150:	f9 01       	movw	r30, r18
     152:	20 81       	ld	r18, Z
     154:	62 2f       	mov	r22, r18
     156:	29 81       	ldd	r18, Y+1	; 0x01
     158:	22 2f       	mov	r18, r18
     15a:	30 e0       	ldi	r19, 0x00	; 0
     15c:	a9 01       	movw	r20, r18
     15e:	40 51       	subi	r20, 0x10	; 16
     160:	51 09       	sbc	r21, r1
     162:	21 e0       	ldi	r18, 0x01	; 1
     164:	30 e0       	ldi	r19, 0x00	; 0
     166:	02 c0       	rjmp	.+4      	; 0x16c <DIO_voidSetPin+0xb2>
     168:	22 0f       	add	r18, r18
     16a:	33 1f       	adc	r19, r19
     16c:	4a 95       	dec	r20
     16e:	e2 f7       	brpl	.-8      	; 0x168 <DIO_voidSetPin+0xae>
     170:	26 2b       	or	r18, r22
     172:	fc 01       	movw	r30, r24
     174:	20 83       	st	Z, r18
     176:	9a c0       	rjmp	.+308    	; 0x2ac <DIO_voidSetPin+0x1f2>
        }else if((PinNum>=24) && (PinNum<32)){
     178:	89 81       	ldd	r24, Y+1	; 0x01
     17a:	88 31       	cpi	r24, 0x18	; 24
     17c:	08 f4       	brcc	.+2      	; 0x180 <DIO_voidSetPin+0xc6>
     17e:	96 c0       	rjmp	.+300    	; 0x2ac <DIO_voidSetPin+0x1f2>
     180:	89 81       	ldd	r24, Y+1	; 0x01
     182:	80 32       	cpi	r24, 0x20	; 32
     184:	08 f0       	brcs	.+2      	; 0x188 <DIO_voidSetPin+0xce>
     186:	92 c0       	rjmp	.+292    	; 0x2ac <DIO_voidSetPin+0x1f2>
        	SETBIT(PORTD,PinNum-16);
     188:	82 e3       	ldi	r24, 0x32	; 50
     18a:	90 e0       	ldi	r25, 0x00	; 0
     18c:	22 e3       	ldi	r18, 0x32	; 50
     18e:	30 e0       	ldi	r19, 0x00	; 0
     190:	f9 01       	movw	r30, r18
     192:	20 81       	ld	r18, Z
     194:	62 2f       	mov	r22, r18
     196:	29 81       	ldd	r18, Y+1	; 0x01
     198:	22 2f       	mov	r18, r18
     19a:	30 e0       	ldi	r19, 0x00	; 0
     19c:	a9 01       	movw	r20, r18
     19e:	40 51       	subi	r20, 0x10	; 16
     1a0:	51 09       	sbc	r21, r1
     1a2:	21 e0       	ldi	r18, 0x01	; 1
     1a4:	30 e0       	ldi	r19, 0x00	; 0
     1a6:	02 c0       	rjmp	.+4      	; 0x1ac <DIO_voidSetPin+0xf2>
     1a8:	22 0f       	add	r18, r18
     1aa:	33 1f       	adc	r19, r19
     1ac:	4a 95       	dec	r20
     1ae:	e2 f7       	brpl	.-8      	; 0x1a8 <DIO_voidSetPin+0xee>
     1b0:	26 2b       	or	r18, r22
     1b2:	fc 01       	movw	r30, r24
     1b4:	20 83       	st	Z, r18
    	    CLRBIT(PORTD,PinNum-16);
    	}

    }

}
     1b6:	7a c0       	rjmp	.+244    	; 0x2ac <DIO_voidSetPin+0x1f2>
        	SETBIT(PORTC,PinNum-16);
        }else if((PinNum>=24) && (PinNum<32)){
        	SETBIT(PORTD,PinNum-16);
        }

    }else if (Value==LOW){
     1b8:	8a 81       	ldd	r24, Y+2	; 0x02
     1ba:	88 23       	and	r24, r24
     1bc:	09 f0       	breq	.+2      	; 0x1c0 <DIO_voidSetPin+0x106>
     1be:	76 c0       	rjmp	.+236    	; 0x2ac <DIO_voidSetPin+0x1f2>

    	if((PinNum>=0 && PinNum<8)){
     1c0:	89 81       	ldd	r24, Y+1	; 0x01
     1c2:	88 30       	cpi	r24, 0x08	; 8
     1c4:	b0 f4       	brcc	.+44     	; 0x1f2 <DIO_voidSetPin+0x138>
    	    CLRBIT(PORTA,PinNum);
     1c6:	8b e3       	ldi	r24, 0x3B	; 59
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	2b e3       	ldi	r18, 0x3B	; 59
     1cc:	30 e0       	ldi	r19, 0x00	; 0
     1ce:	f9 01       	movw	r30, r18
     1d0:	20 81       	ld	r18, Z
     1d2:	62 2f       	mov	r22, r18
     1d4:	29 81       	ldd	r18, Y+1	; 0x01
     1d6:	42 2f       	mov	r20, r18
     1d8:	50 e0       	ldi	r21, 0x00	; 0
     1da:	21 e0       	ldi	r18, 0x01	; 1
     1dc:	30 e0       	ldi	r19, 0x00	; 0
     1de:	02 c0       	rjmp	.+4      	; 0x1e4 <DIO_voidSetPin+0x12a>
     1e0:	22 0f       	add	r18, r18
     1e2:	33 1f       	adc	r19, r19
     1e4:	4a 95       	dec	r20
     1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <DIO_voidSetPin+0x126>
     1e8:	20 95       	com	r18
     1ea:	26 23       	and	r18, r22
     1ec:	fc 01       	movw	r30, r24
     1ee:	20 83       	st	Z, r18
    	    CLRBIT(PORTD,PinNum-16);
    	}

    }

}
     1f0:	5d c0       	rjmp	.+186    	; 0x2ac <DIO_voidSetPin+0x1f2>

    }else if (Value==LOW){

    	if((PinNum>=0 && PinNum<8)){
    	    CLRBIT(PORTA,PinNum);
    	}else if((PinNum>=8) && (PinNum<16)){
     1f2:	89 81       	ldd	r24, Y+1	; 0x01
     1f4:	88 30       	cpi	r24, 0x08	; 8
     1f6:	e0 f0       	brcs	.+56     	; 0x230 <DIO_voidSetPin+0x176>
     1f8:	89 81       	ldd	r24, Y+1	; 0x01
     1fa:	80 31       	cpi	r24, 0x10	; 16
     1fc:	c8 f4       	brcc	.+50     	; 0x230 <DIO_voidSetPin+0x176>
    	    CLRBIT(PORTB,PinNum-8);
     1fe:	88 e3       	ldi	r24, 0x38	; 56
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	28 e3       	ldi	r18, 0x38	; 56
     204:	30 e0       	ldi	r19, 0x00	; 0
     206:	f9 01       	movw	r30, r18
     208:	20 81       	ld	r18, Z
     20a:	62 2f       	mov	r22, r18
     20c:	29 81       	ldd	r18, Y+1	; 0x01
     20e:	22 2f       	mov	r18, r18
     210:	30 e0       	ldi	r19, 0x00	; 0
     212:	a9 01       	movw	r20, r18
     214:	48 50       	subi	r20, 0x08	; 8
     216:	51 09       	sbc	r21, r1
     218:	21 e0       	ldi	r18, 0x01	; 1
     21a:	30 e0       	ldi	r19, 0x00	; 0
     21c:	02 c0       	rjmp	.+4      	; 0x222 <DIO_voidSetPin+0x168>
     21e:	22 0f       	add	r18, r18
     220:	33 1f       	adc	r19, r19
     222:	4a 95       	dec	r20
     224:	e2 f7       	brpl	.-8      	; 0x21e <DIO_voidSetPin+0x164>
     226:	20 95       	com	r18
     228:	26 23       	and	r18, r22
     22a:	fc 01       	movw	r30, r24
     22c:	20 83       	st	Z, r18
     22e:	3e c0       	rjmp	.+124    	; 0x2ac <DIO_voidSetPin+0x1f2>
    	}else if((PinNum>=16) && (PinNum<24)){
     230:	89 81       	ldd	r24, Y+1	; 0x01
     232:	80 31       	cpi	r24, 0x10	; 16
     234:	e0 f0       	brcs	.+56     	; 0x26e <DIO_voidSetPin+0x1b4>
     236:	89 81       	ldd	r24, Y+1	; 0x01
     238:	88 31       	cpi	r24, 0x18	; 24
     23a:	c8 f4       	brcc	.+50     	; 0x26e <DIO_voidSetPin+0x1b4>
    	    CLRBIT(PORTC,PinNum-16);
     23c:	85 e3       	ldi	r24, 0x35	; 53
     23e:	90 e0       	ldi	r25, 0x00	; 0
     240:	25 e3       	ldi	r18, 0x35	; 53
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	f9 01       	movw	r30, r18
     246:	20 81       	ld	r18, Z
     248:	62 2f       	mov	r22, r18
     24a:	29 81       	ldd	r18, Y+1	; 0x01
     24c:	22 2f       	mov	r18, r18
     24e:	30 e0       	ldi	r19, 0x00	; 0
     250:	a9 01       	movw	r20, r18
     252:	40 51       	subi	r20, 0x10	; 16
     254:	51 09       	sbc	r21, r1
     256:	21 e0       	ldi	r18, 0x01	; 1
     258:	30 e0       	ldi	r19, 0x00	; 0
     25a:	02 c0       	rjmp	.+4      	; 0x260 <DIO_voidSetPin+0x1a6>
     25c:	22 0f       	add	r18, r18
     25e:	33 1f       	adc	r19, r19
     260:	4a 95       	dec	r20
     262:	e2 f7       	brpl	.-8      	; 0x25c <DIO_voidSetPin+0x1a2>
     264:	20 95       	com	r18
     266:	26 23       	and	r18, r22
     268:	fc 01       	movw	r30, r24
     26a:	20 83       	st	Z, r18
     26c:	1f c0       	rjmp	.+62     	; 0x2ac <DIO_voidSetPin+0x1f2>
    	}else if((PinNum>=24) && (PinNum<32)){
     26e:	89 81       	ldd	r24, Y+1	; 0x01
     270:	88 31       	cpi	r24, 0x18	; 24
     272:	e0 f0       	brcs	.+56     	; 0x2ac <DIO_voidSetPin+0x1f2>
     274:	89 81       	ldd	r24, Y+1	; 0x01
     276:	80 32       	cpi	r24, 0x20	; 32
     278:	c8 f4       	brcc	.+50     	; 0x2ac <DIO_voidSetPin+0x1f2>
    	    CLRBIT(PORTD,PinNum-16);
     27a:	82 e3       	ldi	r24, 0x32	; 50
     27c:	90 e0       	ldi	r25, 0x00	; 0
     27e:	22 e3       	ldi	r18, 0x32	; 50
     280:	30 e0       	ldi	r19, 0x00	; 0
     282:	f9 01       	movw	r30, r18
     284:	20 81       	ld	r18, Z
     286:	62 2f       	mov	r22, r18
     288:	29 81       	ldd	r18, Y+1	; 0x01
     28a:	22 2f       	mov	r18, r18
     28c:	30 e0       	ldi	r19, 0x00	; 0
     28e:	a9 01       	movw	r20, r18
     290:	40 51       	subi	r20, 0x10	; 16
     292:	51 09       	sbc	r21, r1
     294:	21 e0       	ldi	r18, 0x01	; 1
     296:	30 e0       	ldi	r19, 0x00	; 0
     298:	02 c0       	rjmp	.+4      	; 0x29e <DIO_voidSetPin+0x1e4>
     29a:	22 0f       	add	r18, r18
     29c:	33 1f       	adc	r19, r19
     29e:	4a 95       	dec	r20
     2a0:	e2 f7       	brpl	.-8      	; 0x29a <DIO_voidSetPin+0x1e0>
     2a2:	20 95       	com	r18
     2a4:	26 23       	and	r18, r22
     2a6:	fc 01       	movw	r30, r24
     2a8:	20 83       	st	Z, r18
    	}

    }

}
     2aa:	00 c0       	rjmp	.+0      	; 0x2ac <DIO_voidSetPin+0x1f2>
     2ac:	00 00       	nop
     2ae:	0f 90       	pop	r0
     2b0:	0f 90       	pop	r0
     2b2:	df 91       	pop	r29
     2b4:	cf 91       	pop	r28
     2b6:	08 95       	ret

000002b8 <DIO_u8GetPin>:

u8 DIO_u8GetPin(u8 PinNum){
     2b8:	cf 93       	push	r28
     2ba:	df 93       	push	r29
     2bc:	00 d0       	rcall	.+0      	; 0x2be <DIO_u8GetPin+0x6>
     2be:	cd b7       	in	r28, 0x3d	; 61
     2c0:	de b7       	in	r29, 0x3e	; 62
     2c2:	8a 83       	std	Y+2, r24	; 0x02

	u8 ret;

	if((PinNum>=0 && PinNum<8)){
     2c4:	8a 81       	ldd	r24, Y+2	; 0x02
     2c6:	88 30       	cpi	r24, 0x08	; 8
     2c8:	88 f4       	brcc	.+34     	; 0x2ec <DIO_u8GetPin+0x34>
	     ret= GETBIT(PINA,PinNum);
     2ca:	89 e3       	ldi	r24, 0x39	; 57
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	fc 01       	movw	r30, r24
     2d0:	80 81       	ld	r24, Z
     2d2:	88 2f       	mov	r24, r24
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	2a 81       	ldd	r18, Y+2	; 0x02
     2d8:	22 2f       	mov	r18, r18
     2da:	30 e0       	ldi	r19, 0x00	; 0
     2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <DIO_u8GetPin+0x2a>
     2de:	95 95       	asr	r25
     2e0:	87 95       	ror	r24
     2e2:	2a 95       	dec	r18
     2e4:	e2 f7       	brpl	.-8      	; 0x2de <DIO_u8GetPin+0x26>
     2e6:	81 70       	andi	r24, 0x01	; 1
     2e8:	89 83       	std	Y+1, r24	; 0x01
     2ea:	4a c0       	rjmp	.+148    	; 0x380 <DIO_u8GetPin+0xc8>
	}else if((PinNum>=8) && (PinNum<16)){
     2ec:	8a 81       	ldd	r24, Y+2	; 0x02
     2ee:	88 30       	cpi	r24, 0x08	; 8
     2f0:	b0 f0       	brcs	.+44     	; 0x31e <DIO_u8GetPin+0x66>
     2f2:	8a 81       	ldd	r24, Y+2	; 0x02
     2f4:	80 31       	cpi	r24, 0x10	; 16
     2f6:	98 f4       	brcc	.+38     	; 0x31e <DIO_u8GetPin+0x66>
	     ret= GETBIT(PINB,PinNum-8);
     2f8:	86 e3       	ldi	r24, 0x36	; 54
     2fa:	90 e0       	ldi	r25, 0x00	; 0
     2fc:	fc 01       	movw	r30, r24
     2fe:	80 81       	ld	r24, Z
     300:	88 2f       	mov	r24, r24
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	2a 81       	ldd	r18, Y+2	; 0x02
     306:	22 2f       	mov	r18, r18
     308:	30 e0       	ldi	r19, 0x00	; 0
     30a:	28 50       	subi	r18, 0x08	; 8
     30c:	31 09       	sbc	r19, r1
     30e:	02 c0       	rjmp	.+4      	; 0x314 <DIO_u8GetPin+0x5c>
     310:	95 95       	asr	r25
     312:	87 95       	ror	r24
     314:	2a 95       	dec	r18
     316:	e2 f7       	brpl	.-8      	; 0x310 <DIO_u8GetPin+0x58>
     318:	81 70       	andi	r24, 0x01	; 1
     31a:	89 83       	std	Y+1, r24	; 0x01
     31c:	31 c0       	rjmp	.+98     	; 0x380 <DIO_u8GetPin+0xc8>
	}else if((PinNum>=16) && (PinNum<24)){
     31e:	8a 81       	ldd	r24, Y+2	; 0x02
     320:	80 31       	cpi	r24, 0x10	; 16
     322:	b0 f0       	brcs	.+44     	; 0x350 <DIO_u8GetPin+0x98>
     324:	8a 81       	ldd	r24, Y+2	; 0x02
     326:	88 31       	cpi	r24, 0x18	; 24
     328:	98 f4       	brcc	.+38     	; 0x350 <DIO_u8GetPin+0x98>
	     ret= GETBIT(PINC,PinNum-16);
     32a:	83 e3       	ldi	r24, 0x33	; 51
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	fc 01       	movw	r30, r24
     330:	80 81       	ld	r24, Z
     332:	88 2f       	mov	r24, r24
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	2a 81       	ldd	r18, Y+2	; 0x02
     338:	22 2f       	mov	r18, r18
     33a:	30 e0       	ldi	r19, 0x00	; 0
     33c:	20 51       	subi	r18, 0x10	; 16
     33e:	31 09       	sbc	r19, r1
     340:	02 c0       	rjmp	.+4      	; 0x346 <DIO_u8GetPin+0x8e>
     342:	95 95       	asr	r25
     344:	87 95       	ror	r24
     346:	2a 95       	dec	r18
     348:	e2 f7       	brpl	.-8      	; 0x342 <DIO_u8GetPin+0x8a>
     34a:	81 70       	andi	r24, 0x01	; 1
     34c:	89 83       	std	Y+1, r24	; 0x01
     34e:	18 c0       	rjmp	.+48     	; 0x380 <DIO_u8GetPin+0xc8>
	}else if((PinNum>=24) && (PinNum<32)){
     350:	8a 81       	ldd	r24, Y+2	; 0x02
     352:	88 31       	cpi	r24, 0x18	; 24
     354:	a8 f0       	brcs	.+42     	; 0x380 <DIO_u8GetPin+0xc8>
     356:	8a 81       	ldd	r24, Y+2	; 0x02
     358:	80 32       	cpi	r24, 0x20	; 32
     35a:	90 f4       	brcc	.+36     	; 0x380 <DIO_u8GetPin+0xc8>
	     ret= GETBIT(PIND,PinNum-16);
     35c:	80 e3       	ldi	r24, 0x30	; 48
     35e:	90 e0       	ldi	r25, 0x00	; 0
     360:	fc 01       	movw	r30, r24
     362:	80 81       	ld	r24, Z
     364:	88 2f       	mov	r24, r24
     366:	90 e0       	ldi	r25, 0x00	; 0
     368:	2a 81       	ldd	r18, Y+2	; 0x02
     36a:	22 2f       	mov	r18, r18
     36c:	30 e0       	ldi	r19, 0x00	; 0
     36e:	20 51       	subi	r18, 0x10	; 16
     370:	31 09       	sbc	r19, r1
     372:	02 c0       	rjmp	.+4      	; 0x378 <DIO_u8GetPin+0xc0>
     374:	95 95       	asr	r25
     376:	87 95       	ror	r24
     378:	2a 95       	dec	r18
     37a:	e2 f7       	brpl	.-8      	; 0x374 <DIO_u8GetPin+0xbc>
     37c:	81 70       	andi	r24, 0x01	; 1
     37e:	89 83       	std	Y+1, r24	; 0x01
	}

	return ret;
     380:	89 81       	ldd	r24, Y+1	; 0x01

}
     382:	0f 90       	pop	r0
     384:	0f 90       	pop	r0
     386:	df 91       	pop	r29
     388:	cf 91       	pop	r28
     38a:	08 95       	ret

0000038c <DIO_voidTogglePin>:

void DIO_voidTogglePin(u8 PinNum){
     38c:	cf 93       	push	r28
     38e:	df 93       	push	r29
     390:	1f 92       	push	r1
     392:	cd b7       	in	r28, 0x3d	; 61
     394:	de b7       	in	r29, 0x3e	; 62
     396:	89 83       	std	Y+1, r24	; 0x01

	if((PinNum>=0 && PinNum<8)){
     398:	89 81       	ldd	r24, Y+1	; 0x01
     39a:	88 30       	cpi	r24, 0x08	; 8
     39c:	a8 f4       	brcc	.+42     	; 0x3c8 <DIO_voidTogglePin+0x3c>
		    TOGGLEBIT(PORTA,PinNum);
     39e:	8b e3       	ldi	r24, 0x3B	; 59
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	2b e3       	ldi	r18, 0x3B	; 59
     3a4:	30 e0       	ldi	r19, 0x00	; 0
     3a6:	f9 01       	movw	r30, r18
     3a8:	20 81       	ld	r18, Z
     3aa:	62 2f       	mov	r22, r18
     3ac:	29 81       	ldd	r18, Y+1	; 0x01
     3ae:	42 2f       	mov	r20, r18
     3b0:	50 e0       	ldi	r21, 0x00	; 0
     3b2:	21 e0       	ldi	r18, 0x01	; 1
     3b4:	30 e0       	ldi	r19, 0x00	; 0
     3b6:	02 c0       	rjmp	.+4      	; 0x3bc <DIO_voidTogglePin+0x30>
     3b8:	22 0f       	add	r18, r18
     3ba:	33 1f       	adc	r19, r19
     3bc:	4a 95       	dec	r20
     3be:	e2 f7       	brpl	.-8      	; 0x3b8 <DIO_voidTogglePin+0x2c>
     3c0:	26 27       	eor	r18, r22
     3c2:	fc 01       	movw	r30, r24
     3c4:	20 83       	st	Z, r18
		}else if((PinNum>=24) && (PinNum<32)){
		    TOGGLEBIT(PORTD,PinNum-16);
		}


}
     3c6:	5a c0       	rjmp	.+180    	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>

void DIO_voidTogglePin(u8 PinNum){

	if((PinNum>=0 && PinNum<8)){
		    TOGGLEBIT(PORTA,PinNum);
		}else if((PinNum>=8) && (PinNum<16)){
     3c8:	89 81       	ldd	r24, Y+1	; 0x01
     3ca:	88 30       	cpi	r24, 0x08	; 8
     3cc:	d8 f0       	brcs	.+54     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     3ce:	89 81       	ldd	r24, Y+1	; 0x01
     3d0:	80 31       	cpi	r24, 0x10	; 16
     3d2:	c0 f4       	brcc	.+48     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
		    TOGGLEBIT(PORTB,PinNum-8);
     3d4:	88 e3       	ldi	r24, 0x38	; 56
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	28 e3       	ldi	r18, 0x38	; 56
     3da:	30 e0       	ldi	r19, 0x00	; 0
     3dc:	f9 01       	movw	r30, r18
     3de:	20 81       	ld	r18, Z
     3e0:	62 2f       	mov	r22, r18
     3e2:	29 81       	ldd	r18, Y+1	; 0x01
     3e4:	22 2f       	mov	r18, r18
     3e6:	30 e0       	ldi	r19, 0x00	; 0
     3e8:	a9 01       	movw	r20, r18
     3ea:	48 50       	subi	r20, 0x08	; 8
     3ec:	51 09       	sbc	r21, r1
     3ee:	21 e0       	ldi	r18, 0x01	; 1
     3f0:	30 e0       	ldi	r19, 0x00	; 0
     3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <DIO_voidTogglePin+0x6c>
     3f4:	22 0f       	add	r18, r18
     3f6:	33 1f       	adc	r19, r19
     3f8:	4a 95       	dec	r20
     3fa:	e2 f7       	brpl	.-8      	; 0x3f4 <DIO_voidTogglePin+0x68>
     3fc:	26 27       	eor	r18, r22
     3fe:	fc 01       	movw	r30, r24
     400:	20 83       	st	Z, r18
     402:	3c c0       	rjmp	.+120    	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
		}else if((PinNum>=16) && (PinNum<24)){
     404:	89 81       	ldd	r24, Y+1	; 0x01
     406:	80 31       	cpi	r24, 0x10	; 16
     408:	d8 f0       	brcs	.+54     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     40a:	89 81       	ldd	r24, Y+1	; 0x01
     40c:	88 31       	cpi	r24, 0x18	; 24
     40e:	c0 f4       	brcc	.+48     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
		    TOGGLEBIT(PORTC,PinNum-16);
     410:	85 e3       	ldi	r24, 0x35	; 53
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	25 e3       	ldi	r18, 0x35	; 53
     416:	30 e0       	ldi	r19, 0x00	; 0
     418:	f9 01       	movw	r30, r18
     41a:	20 81       	ld	r18, Z
     41c:	62 2f       	mov	r22, r18
     41e:	29 81       	ldd	r18, Y+1	; 0x01
     420:	22 2f       	mov	r18, r18
     422:	30 e0       	ldi	r19, 0x00	; 0
     424:	a9 01       	movw	r20, r18
     426:	40 51       	subi	r20, 0x10	; 16
     428:	51 09       	sbc	r21, r1
     42a:	21 e0       	ldi	r18, 0x01	; 1
     42c:	30 e0       	ldi	r19, 0x00	; 0
     42e:	02 c0       	rjmp	.+4      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     430:	22 0f       	add	r18, r18
     432:	33 1f       	adc	r19, r19
     434:	4a 95       	dec	r20
     436:	e2 f7       	brpl	.-8      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     438:	26 27       	eor	r18, r22
     43a:	fc 01       	movw	r30, r24
     43c:	20 83       	st	Z, r18
     43e:	1e c0       	rjmp	.+60     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
		}else if((PinNum>=24) && (PinNum<32)){
     440:	89 81       	ldd	r24, Y+1	; 0x01
     442:	88 31       	cpi	r24, 0x18	; 24
     444:	d8 f0       	brcs	.+54     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
     446:	89 81       	ldd	r24, Y+1	; 0x01
     448:	80 32       	cpi	r24, 0x20	; 32
     44a:	c0 f4       	brcc	.+48     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
		    TOGGLEBIT(PORTD,PinNum-16);
     44c:	82 e3       	ldi	r24, 0x32	; 50
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	22 e3       	ldi	r18, 0x32	; 50
     452:	30 e0       	ldi	r19, 0x00	; 0
     454:	f9 01       	movw	r30, r18
     456:	20 81       	ld	r18, Z
     458:	62 2f       	mov	r22, r18
     45a:	29 81       	ldd	r18, Y+1	; 0x01
     45c:	22 2f       	mov	r18, r18
     45e:	30 e0       	ldi	r19, 0x00	; 0
     460:	a9 01       	movw	r20, r18
     462:	40 51       	subi	r20, 0x10	; 16
     464:	51 09       	sbc	r21, r1
     466:	21 e0       	ldi	r18, 0x01	; 1
     468:	30 e0       	ldi	r19, 0x00	; 0
     46a:	02 c0       	rjmp	.+4      	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
     46c:	22 0f       	add	r18, r18
     46e:	33 1f       	adc	r19, r19
     470:	4a 95       	dec	r20
     472:	e2 f7       	brpl	.-8      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
     474:	26 27       	eor	r18, r22
     476:	fc 01       	movw	r30, r24
     478:	20 83       	st	Z, r18
		}


}
     47a:	00 c0       	rjmp	.+0      	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
     47c:	00 00       	nop
     47e:	0f 90       	pop	r0
     480:	df 91       	pop	r29
     482:	cf 91       	pop	r28
     484:	08 95       	ret

00000486 <LCD_voidInitialize>:
#include "LCD_priv.h"
#include "LCD_config.h"
#include "LCD_int.h"


void LCD_voidInitialize(void){
     486:	0f 93       	push	r16
     488:	1f 93       	push	r17
     48a:	cf 93       	push	r28
     48c:	df 93       	push	r29
     48e:	cd b7       	in	r28, 0x3d	; 61
     490:	de b7       	in	r29, 0x3e	; 62
     492:	cc 57       	subi	r28, 0x7C	; 124
     494:	d1 09       	sbc	r29, r1
     496:	0f b6       	in	r0, 0x3f	; 63
     498:	f8 94       	cli
     49a:	de bf       	out	0x3e, r29	; 62
     49c:	0f be       	out	0x3f, r0	; 63
     49e:	cd bf       	out	0x3d, r28	; 61

	DIO_voidInitialize();
     4a0:	0e 94 41 00 	call	0x82	; 0x82 <DIO_voidInitialize>
     4a4:	80 e0       	ldi	r24, 0x00	; 0
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	a0 e2       	ldi	r26, 0x20	; 32
     4aa:	b2 e4       	ldi	r27, 0x42	; 66
     4ac:	89 83       	std	Y+1, r24	; 0x01
     4ae:	9a 83       	std	Y+2, r25	; 0x02
     4b0:	ab 83       	std	Y+3, r26	; 0x03
     4b2:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     4b4:	8e 01       	movw	r16, r28
     4b6:	0d 58       	subi	r16, 0x8D	; 141
     4b8:	1f 4f       	sbci	r17, 0xFF	; 255
     4ba:	20 e0       	ldi	r18, 0x00	; 0
     4bc:	30 e0       	ldi	r19, 0x00	; 0
     4be:	4a ef       	ldi	r20, 0xFA	; 250
     4c0:	54 e4       	ldi	r21, 0x44	; 68
     4c2:	69 81       	ldd	r22, Y+1	; 0x01
     4c4:	7a 81       	ldd	r23, Y+2	; 0x02
     4c6:	8b 81       	ldd	r24, Y+3	; 0x03
     4c8:	9c 81       	ldd	r25, Y+4	; 0x04
     4ca:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <__mulsf3>
     4ce:	dc 01       	movw	r26, r24
     4d0:	cb 01       	movw	r24, r22
     4d2:	f8 01       	movw	r30, r16
     4d4:	80 83       	st	Z, r24
     4d6:	91 83       	std	Z+1, r25	; 0x01
     4d8:	a2 83       	std	Z+2, r26	; 0x02
     4da:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     4dc:	ce 01       	movw	r24, r28
     4de:	8d 58       	subi	r24, 0x8D	; 141
     4e0:	9f 4f       	sbci	r25, 0xFF	; 255
     4e2:	20 e0       	ldi	r18, 0x00	; 0
     4e4:	30 e0       	ldi	r19, 0x00	; 0
     4e6:	40 e8       	ldi	r20, 0x80	; 128
     4e8:	5f e3       	ldi	r21, 0x3F	; 63
     4ea:	fc 01       	movw	r30, r24
     4ec:	60 81       	ld	r22, Z
     4ee:	71 81       	ldd	r23, Z+1	; 0x01
     4f0:	82 81       	ldd	r24, Z+2	; 0x02
     4f2:	93 81       	ldd	r25, Z+3	; 0x03
     4f4:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <__cmpsf2>
     4f8:	88 23       	and	r24, r24
     4fa:	4c f4       	brge	.+18     	; 0x50e <LCD_voidInitialize+0x88>
		__ticks = 1;
     4fc:	ce 01       	movw	r24, r28
     4fe:	89 58       	subi	r24, 0x89	; 137
     500:	9f 4f       	sbci	r25, 0xFF	; 255
     502:	21 e0       	ldi	r18, 0x01	; 1
     504:	30 e0       	ldi	r19, 0x00	; 0
     506:	fc 01       	movw	r30, r24
     508:	31 83       	std	Z+1, r19	; 0x01
     50a:	20 83       	st	Z, r18
     50c:	69 c0       	rjmp	.+210    	; 0x5e0 <LCD_voidInitialize+0x15a>
	else if (__tmp > 65535)
     50e:	ce 01       	movw	r24, r28
     510:	8d 58       	subi	r24, 0x8D	; 141
     512:	9f 4f       	sbci	r25, 0xFF	; 255
     514:	20 e0       	ldi	r18, 0x00	; 0
     516:	3f ef       	ldi	r19, 0xFF	; 255
     518:	4f e7       	ldi	r20, 0x7F	; 127
     51a:	57 e4       	ldi	r21, 0x47	; 71
     51c:	fc 01       	movw	r30, r24
     51e:	60 81       	ld	r22, Z
     520:	71 81       	ldd	r23, Z+1	; 0x01
     522:	82 81       	ldd	r24, Z+2	; 0x02
     524:	93 81       	ldd	r25, Z+3	; 0x03
     526:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <__gesf2>
     52a:	18 16       	cp	r1, r24
     52c:	0c f0       	brlt	.+2      	; 0x530 <LCD_voidInitialize+0xaa>
     52e:	46 c0       	rjmp	.+140    	; 0x5bc <LCD_voidInitialize+0x136>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     530:	20 e0       	ldi	r18, 0x00	; 0
     532:	30 e0       	ldi	r19, 0x00	; 0
     534:	40 e2       	ldi	r20, 0x20	; 32
     536:	51 e4       	ldi	r21, 0x41	; 65
     538:	69 81       	ldd	r22, Y+1	; 0x01
     53a:	7a 81       	ldd	r23, Y+2	; 0x02
     53c:	8b 81       	ldd	r24, Y+3	; 0x03
     53e:	9c 81       	ldd	r25, Y+4	; 0x04
     540:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <__mulsf3>
     544:	dc 01       	movw	r26, r24
     546:	cb 01       	movw	r24, r22
     548:	8e 01       	movw	r16, r28
     54a:	09 58       	subi	r16, 0x89	; 137
     54c:	1f 4f       	sbci	r17, 0xFF	; 255
     54e:	bc 01       	movw	r22, r24
     550:	cd 01       	movw	r24, r26
     552:	0e 94 c7 0a 	call	0x158e	; 0x158e <__fixunssfsi>
     556:	dc 01       	movw	r26, r24
     558:	cb 01       	movw	r24, r22
     55a:	f8 01       	movw	r30, r16
     55c:	91 83       	std	Z+1, r25	; 0x01
     55e:	80 83       	st	Z, r24
     560:	24 c0       	rjmp	.+72     	; 0x5aa <LCD_voidInitialize+0x124>
     562:	ce 01       	movw	r24, r28
     564:	87 58       	subi	r24, 0x87	; 135
     566:	9f 4f       	sbci	r25, 0xFF	; 255
     568:	28 ec       	ldi	r18, 0xC8	; 200
     56a:	30 e0       	ldi	r19, 0x00	; 0
     56c:	fc 01       	movw	r30, r24
     56e:	31 83       	std	Z+1, r19	; 0x01
     570:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     572:	ce 01       	movw	r24, r28
     574:	87 58       	subi	r24, 0x87	; 135
     576:	9f 4f       	sbci	r25, 0xFF	; 255
     578:	fc 01       	movw	r30, r24
     57a:	80 81       	ld	r24, Z
     57c:	91 81       	ldd	r25, Z+1	; 0x01
     57e:	01 97       	sbiw	r24, 0x01	; 1
     580:	f1 f7       	brne	.-4      	; 0x57e <LCD_voidInitialize+0xf8>
     582:	9e 01       	movw	r18, r28
     584:	27 58       	subi	r18, 0x87	; 135
     586:	3f 4f       	sbci	r19, 0xFF	; 255
     588:	f9 01       	movw	r30, r18
     58a:	91 83       	std	Z+1, r25	; 0x01
     58c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     58e:	ce 01       	movw	r24, r28
     590:	89 58       	subi	r24, 0x89	; 137
     592:	9f 4f       	sbci	r25, 0xFF	; 255
     594:	9e 01       	movw	r18, r28
     596:	29 58       	subi	r18, 0x89	; 137
     598:	3f 4f       	sbci	r19, 0xFF	; 255
     59a:	f9 01       	movw	r30, r18
     59c:	20 81       	ld	r18, Z
     59e:	31 81       	ldd	r19, Z+1	; 0x01
     5a0:	21 50       	subi	r18, 0x01	; 1
     5a2:	31 09       	sbc	r19, r1
     5a4:	fc 01       	movw	r30, r24
     5a6:	31 83       	std	Z+1, r19	; 0x01
     5a8:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5aa:	ce 01       	movw	r24, r28
     5ac:	89 58       	subi	r24, 0x89	; 137
     5ae:	9f 4f       	sbci	r25, 0xFF	; 255
     5b0:	fc 01       	movw	r30, r24
     5b2:	80 81       	ld	r24, Z
     5b4:	91 81       	ldd	r25, Z+1	; 0x01
     5b6:	89 2b       	or	r24, r25
     5b8:	a1 f6       	brne	.-88     	; 0x562 <LCD_voidInitialize+0xdc>
     5ba:	2c c0       	rjmp	.+88     	; 0x614 <LCD_voidInitialize+0x18e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     5bc:	8e 01       	movw	r16, r28
     5be:	09 58       	subi	r16, 0x89	; 137
     5c0:	1f 4f       	sbci	r17, 0xFF	; 255
     5c2:	ce 01       	movw	r24, r28
     5c4:	8d 58       	subi	r24, 0x8D	; 141
     5c6:	9f 4f       	sbci	r25, 0xFF	; 255
     5c8:	fc 01       	movw	r30, r24
     5ca:	60 81       	ld	r22, Z
     5cc:	71 81       	ldd	r23, Z+1	; 0x01
     5ce:	82 81       	ldd	r24, Z+2	; 0x02
     5d0:	93 81       	ldd	r25, Z+3	; 0x03
     5d2:	0e 94 c7 0a 	call	0x158e	; 0x158e <__fixunssfsi>
     5d6:	dc 01       	movw	r26, r24
     5d8:	cb 01       	movw	r24, r22
     5da:	f8 01       	movw	r30, r16
     5dc:	91 83       	std	Z+1, r25	; 0x01
     5de:	80 83       	st	Z, r24
     5e0:	ce 01       	movw	r24, r28
     5e2:	85 58       	subi	r24, 0x85	; 133
     5e4:	9f 4f       	sbci	r25, 0xFF	; 255
     5e6:	9e 01       	movw	r18, r28
     5e8:	29 58       	subi	r18, 0x89	; 137
     5ea:	3f 4f       	sbci	r19, 0xFF	; 255
     5ec:	f9 01       	movw	r30, r18
     5ee:	20 81       	ld	r18, Z
     5f0:	31 81       	ldd	r19, Z+1	; 0x01
     5f2:	fc 01       	movw	r30, r24
     5f4:	31 83       	std	Z+1, r19	; 0x01
     5f6:	20 83       	st	Z, r18
     5f8:	ce 01       	movw	r24, r28
     5fa:	85 58       	subi	r24, 0x85	; 133
     5fc:	9f 4f       	sbci	r25, 0xFF	; 255
     5fe:	fc 01       	movw	r30, r24
     600:	80 81       	ld	r24, Z
     602:	91 81       	ldd	r25, Z+1	; 0x01
     604:	01 97       	sbiw	r24, 0x01	; 1
     606:	f1 f7       	brne	.-4      	; 0x604 <LCD_voidInitialize+0x17e>
     608:	9e 01       	movw	r18, r28
     60a:	25 58       	subi	r18, 0x85	; 133
     60c:	3f 4f       	sbci	r19, 0xFF	; 255
     60e:	f9 01       	movw	r30, r18
     610:	91 83       	std	Z+1, r25	; 0x01
     612:	80 83       	st	Z, r24

	_delay_ms(2);*/



	LCD_voidWriteCmd(LCD_FUNCTION_SET_4BIT);
     614:	88 e2       	ldi	r24, 0x28	; 40
     616:	0e 94 9e 07 	call	0xf3c	; 0xf3c <LCD_voidWriteCmd>
     61a:	80 e0       	ldi	r24, 0x00	; 0
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	a8 e4       	ldi	r26, 0x48	; 72
     620:	b2 e4       	ldi	r27, 0x42	; 66
     622:	8d 83       	std	Y+5, r24	; 0x05
     624:	9e 83       	std	Y+6, r25	; 0x06
     626:	af 83       	std	Y+7, r26	; 0x07
     628:	b8 87       	std	Y+8, r27	; 0x08
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     62a:	8e 01       	movw	r16, r28
     62c:	09 5a       	subi	r16, 0xA9	; 169
     62e:	1f 4f       	sbci	r17, 0xFF	; 255
     630:	2b ea       	ldi	r18, 0xAB	; 171
     632:	3a ea       	ldi	r19, 0xAA	; 170
     634:	4a e2       	ldi	r20, 0x2A	; 42
     636:	50 e4       	ldi	r21, 0x40	; 64
     638:	6d 81       	ldd	r22, Y+5	; 0x05
     63a:	7e 81       	ldd	r23, Y+6	; 0x06
     63c:	8f 81       	ldd	r24, Y+7	; 0x07
     63e:	98 85       	ldd	r25, Y+8	; 0x08
     640:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <__mulsf3>
     644:	dc 01       	movw	r26, r24
     646:	cb 01       	movw	r24, r22
     648:	f8 01       	movw	r30, r16
     64a:	80 83       	st	Z, r24
     64c:	91 83       	std	Z+1, r25	; 0x01
     64e:	a2 83       	std	Z+2, r26	; 0x02
     650:	b3 83       	std	Z+3, r27	; 0x03
	__tmp2 = ((F_CPU) / 4e6) * __us;
     652:	8e 01       	movw	r16, r28
     654:	05 5a       	subi	r16, 0xA5	; 165
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	8d 81       	ldd	r24, Y+5	; 0x05
     65a:	9e 81       	ldd	r25, Y+6	; 0x06
     65c:	af 81       	ldd	r26, Y+7	; 0x07
     65e:	b8 85       	ldd	r27, Y+8	; 0x08
     660:	9c 01       	movw	r18, r24
     662:	ad 01       	movw	r20, r26
     664:	bc 01       	movw	r22, r24
     666:	cd 01       	movw	r24, r26
     668:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <__addsf3>
     66c:	dc 01       	movw	r26, r24
     66e:	cb 01       	movw	r24, r22
     670:	f8 01       	movw	r30, r16
     672:	80 83       	st	Z, r24
     674:	91 83       	std	Z+1, r25	; 0x01
     676:	a2 83       	std	Z+2, r26	; 0x02
     678:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     67a:	ce 01       	movw	r24, r28
     67c:	89 5a       	subi	r24, 0xA9	; 169
     67e:	9f 4f       	sbci	r25, 0xFF	; 255
     680:	20 e0       	ldi	r18, 0x00	; 0
     682:	30 e0       	ldi	r19, 0x00	; 0
     684:	40 e8       	ldi	r20, 0x80	; 128
     686:	5f e3       	ldi	r21, 0x3F	; 63
     688:	fc 01       	movw	r30, r24
     68a:	60 81       	ld	r22, Z
     68c:	71 81       	ldd	r23, Z+1	; 0x01
     68e:	82 81       	ldd	r24, Z+2	; 0x02
     690:	93 81       	ldd	r25, Z+3	; 0x03
     692:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <__cmpsf2>
     696:	88 23       	and	r24, r24
     698:	3c f4       	brge	.+14     	; 0x6a8 <LCD_voidInitialize+0x222>
		__ticks = 1;
     69a:	ce 01       	movw	r24, r28
     69c:	81 5a       	subi	r24, 0xA1	; 161
     69e:	9f 4f       	sbci	r25, 0xFF	; 255
     6a0:	21 e0       	ldi	r18, 0x01	; 1
     6a2:	fc 01       	movw	r30, r24
     6a4:	20 83       	st	Z, r18
     6a6:	2c c1       	rjmp	.+600    	; 0x900 <__stack+0xa1>
	else if (__tmp2 > 65535)
     6a8:	ce 01       	movw	r24, r28
     6aa:	85 5a       	subi	r24, 0xA5	; 165
     6ac:	9f 4f       	sbci	r25, 0xFF	; 255
     6ae:	20 e0       	ldi	r18, 0x00	; 0
     6b0:	3f ef       	ldi	r19, 0xFF	; 255
     6b2:	4f e7       	ldi	r20, 0x7F	; 127
     6b4:	57 e4       	ldi	r21, 0x47	; 71
     6b6:	fc 01       	movw	r30, r24
     6b8:	60 81       	ld	r22, Z
     6ba:	71 81       	ldd	r23, Z+1	; 0x01
     6bc:	82 81       	ldd	r24, Z+2	; 0x02
     6be:	93 81       	ldd	r25, Z+3	; 0x03
     6c0:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <__gesf2>
     6c4:	18 16       	cp	r1, r24
     6c6:	0c f0       	brlt	.+2      	; 0x6ca <LCD_voidInitialize+0x244>
     6c8:	cd c0       	rjmp	.+410    	; 0x864 <__stack+0x5>
	{
		_delay_ms(__us / 1000.0);
     6ca:	20 e0       	ldi	r18, 0x00	; 0
     6cc:	30 e0       	ldi	r19, 0x00	; 0
     6ce:	4a e7       	ldi	r20, 0x7A	; 122
     6d0:	54 e4       	ldi	r21, 0x44	; 68
     6d2:	6d 81       	ldd	r22, Y+5	; 0x05
     6d4:	7e 81       	ldd	r23, Y+6	; 0x06
     6d6:	8f 81       	ldd	r24, Y+7	; 0x07
     6d8:	98 85       	ldd	r25, Y+8	; 0x08
     6da:	0e 94 55 0a 	call	0x14aa	; 0x14aa <__divsf3>
     6de:	dc 01       	movw	r26, r24
     6e0:	cb 01       	movw	r24, r22
     6e2:	9e 01       	movw	r18, r28
     6e4:	20 5a       	subi	r18, 0xA0	; 160
     6e6:	3f 4f       	sbci	r19, 0xFF	; 255
     6e8:	f9 01       	movw	r30, r18
     6ea:	80 83       	st	Z, r24
     6ec:	91 83       	std	Z+1, r25	; 0x01
     6ee:	a2 83       	std	Z+2, r26	; 0x02
     6f0:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     6f2:	8e 01       	movw	r16, r28
     6f4:	0c 59       	subi	r16, 0x9C	; 156
     6f6:	1f 4f       	sbci	r17, 0xFF	; 255
     6f8:	ce 01       	movw	r24, r28
     6fa:	80 5a       	subi	r24, 0xA0	; 160
     6fc:	9f 4f       	sbci	r25, 0xFF	; 255
     6fe:	20 e0       	ldi	r18, 0x00	; 0
     700:	30 e0       	ldi	r19, 0x00	; 0
     702:	4a ef       	ldi	r20, 0xFA	; 250
     704:	54 e4       	ldi	r21, 0x44	; 68
     706:	fc 01       	movw	r30, r24
     708:	60 81       	ld	r22, Z
     70a:	71 81       	ldd	r23, Z+1	; 0x01
     70c:	82 81       	ldd	r24, Z+2	; 0x02
     70e:	93 81       	ldd	r25, Z+3	; 0x03
     710:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <__mulsf3>
     714:	dc 01       	movw	r26, r24
     716:	cb 01       	movw	r24, r22
     718:	f8 01       	movw	r30, r16
     71a:	80 83       	st	Z, r24
     71c:	91 83       	std	Z+1, r25	; 0x01
     71e:	a2 83       	std	Z+2, r26	; 0x02
     720:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     722:	ce 01       	movw	r24, r28
     724:	8c 59       	subi	r24, 0x9C	; 156
     726:	9f 4f       	sbci	r25, 0xFF	; 255
     728:	20 e0       	ldi	r18, 0x00	; 0
     72a:	30 e0       	ldi	r19, 0x00	; 0
     72c:	40 e8       	ldi	r20, 0x80	; 128
     72e:	5f e3       	ldi	r21, 0x3F	; 63
     730:	fc 01       	movw	r30, r24
     732:	60 81       	ld	r22, Z
     734:	71 81       	ldd	r23, Z+1	; 0x01
     736:	82 81       	ldd	r24, Z+2	; 0x02
     738:	93 81       	ldd	r25, Z+3	; 0x03
     73a:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <__cmpsf2>
     73e:	88 23       	and	r24, r24
     740:	4c f4       	brge	.+18     	; 0x754 <LCD_voidInitialize+0x2ce>
		__ticks = 1;
     742:	ce 01       	movw	r24, r28
     744:	88 59       	subi	r24, 0x98	; 152
     746:	9f 4f       	sbci	r25, 0xFF	; 255
     748:	21 e0       	ldi	r18, 0x01	; 1
     74a:	30 e0       	ldi	r19, 0x00	; 0
     74c:	fc 01       	movw	r30, r24
     74e:	31 83       	std	Z+1, r19	; 0x01
     750:	20 83       	st	Z, r18
     752:	6d c0       	rjmp	.+218    	; 0x82e <LCD_voidInitialize+0x3a8>
	else if (__tmp > 65535)
     754:	ce 01       	movw	r24, r28
     756:	8c 59       	subi	r24, 0x9C	; 156
     758:	9f 4f       	sbci	r25, 0xFF	; 255
     75a:	20 e0       	ldi	r18, 0x00	; 0
     75c:	3f ef       	ldi	r19, 0xFF	; 255
     75e:	4f e7       	ldi	r20, 0x7F	; 127
     760:	57 e4       	ldi	r21, 0x47	; 71
     762:	fc 01       	movw	r30, r24
     764:	60 81       	ld	r22, Z
     766:	71 81       	ldd	r23, Z+1	; 0x01
     768:	82 81       	ldd	r24, Z+2	; 0x02
     76a:	93 81       	ldd	r25, Z+3	; 0x03
     76c:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <__gesf2>
     770:	18 16       	cp	r1, r24
     772:	0c f0       	brlt	.+2      	; 0x776 <LCD_voidInitialize+0x2f0>
     774:	4a c0       	rjmp	.+148    	; 0x80a <LCD_voidInitialize+0x384>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     776:	ce 01       	movw	r24, r28
     778:	80 5a       	subi	r24, 0xA0	; 160
     77a:	9f 4f       	sbci	r25, 0xFF	; 255
     77c:	20 e0       	ldi	r18, 0x00	; 0
     77e:	30 e0       	ldi	r19, 0x00	; 0
     780:	40 e2       	ldi	r20, 0x20	; 32
     782:	51 e4       	ldi	r21, 0x41	; 65
     784:	fc 01       	movw	r30, r24
     786:	60 81       	ld	r22, Z
     788:	71 81       	ldd	r23, Z+1	; 0x01
     78a:	82 81       	ldd	r24, Z+2	; 0x02
     78c:	93 81       	ldd	r25, Z+3	; 0x03
     78e:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <__mulsf3>
     792:	dc 01       	movw	r26, r24
     794:	cb 01       	movw	r24, r22
     796:	8e 01       	movw	r16, r28
     798:	08 59       	subi	r16, 0x98	; 152
     79a:	1f 4f       	sbci	r17, 0xFF	; 255
     79c:	bc 01       	movw	r22, r24
     79e:	cd 01       	movw	r24, r26
     7a0:	0e 94 c7 0a 	call	0x158e	; 0x158e <__fixunssfsi>
     7a4:	dc 01       	movw	r26, r24
     7a6:	cb 01       	movw	r24, r22
     7a8:	f8 01       	movw	r30, r16
     7aa:	91 83       	std	Z+1, r25	; 0x01
     7ac:	80 83       	st	Z, r24
     7ae:	24 c0       	rjmp	.+72     	; 0x7f8 <LCD_voidInitialize+0x372>
     7b0:	ce 01       	movw	r24, r28
     7b2:	86 59       	subi	r24, 0x96	; 150
     7b4:	9f 4f       	sbci	r25, 0xFF	; 255
     7b6:	28 ec       	ldi	r18, 0xC8	; 200
     7b8:	30 e0       	ldi	r19, 0x00	; 0
     7ba:	fc 01       	movw	r30, r24
     7bc:	31 83       	std	Z+1, r19	; 0x01
     7be:	20 83       	st	Z, r18
     7c0:	ce 01       	movw	r24, r28
     7c2:	86 59       	subi	r24, 0x96	; 150
     7c4:	9f 4f       	sbci	r25, 0xFF	; 255
     7c6:	fc 01       	movw	r30, r24
     7c8:	80 81       	ld	r24, Z
     7ca:	91 81       	ldd	r25, Z+1	; 0x01
     7cc:	01 97       	sbiw	r24, 0x01	; 1
     7ce:	f1 f7       	brne	.-4      	; 0x7cc <LCD_voidInitialize+0x346>
     7d0:	9e 01       	movw	r18, r28
     7d2:	26 59       	subi	r18, 0x96	; 150
     7d4:	3f 4f       	sbci	r19, 0xFF	; 255
     7d6:	f9 01       	movw	r30, r18
     7d8:	91 83       	std	Z+1, r25	; 0x01
     7da:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7dc:	ce 01       	movw	r24, r28
     7de:	88 59       	subi	r24, 0x98	; 152
     7e0:	9f 4f       	sbci	r25, 0xFF	; 255
     7e2:	9e 01       	movw	r18, r28
     7e4:	28 59       	subi	r18, 0x98	; 152
     7e6:	3f 4f       	sbci	r19, 0xFF	; 255
     7e8:	f9 01       	movw	r30, r18
     7ea:	20 81       	ld	r18, Z
     7ec:	31 81       	ldd	r19, Z+1	; 0x01
     7ee:	21 50       	subi	r18, 0x01	; 1
     7f0:	31 09       	sbc	r19, r1
     7f2:	fc 01       	movw	r30, r24
     7f4:	31 83       	std	Z+1, r19	; 0x01
     7f6:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7f8:	ce 01       	movw	r24, r28
     7fa:	88 59       	subi	r24, 0x98	; 152
     7fc:	9f 4f       	sbci	r25, 0xFF	; 255
     7fe:	fc 01       	movw	r30, r24
     800:	80 81       	ld	r24, Z
     802:	91 81       	ldd	r25, Z+1	; 0x01
     804:	89 2b       	or	r24, r25
     806:	a1 f6       	brne	.-88     	; 0x7b0 <LCD_voidInitialize+0x32a>
     808:	7b c0       	rjmp	.+246    	; 0x900 <__stack+0xa1>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     80a:	8e 01       	movw	r16, r28
     80c:	08 59       	subi	r16, 0x98	; 152
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	8c 59       	subi	r24, 0x9C	; 156
     814:	9f 4f       	sbci	r25, 0xFF	; 255
     816:	fc 01       	movw	r30, r24
     818:	60 81       	ld	r22, Z
     81a:	71 81       	ldd	r23, Z+1	; 0x01
     81c:	82 81       	ldd	r24, Z+2	; 0x02
     81e:	93 81       	ldd	r25, Z+3	; 0x03
     820:	0e 94 c7 0a 	call	0x158e	; 0x158e <__fixunssfsi>
     824:	dc 01       	movw	r26, r24
     826:	cb 01       	movw	r24, r22
     828:	f8 01       	movw	r30, r16
     82a:	91 83       	std	Z+1, r25	; 0x01
     82c:	80 83       	st	Z, r24
     82e:	ce 01       	movw	r24, r28
     830:	84 59       	subi	r24, 0x94	; 148
     832:	9f 4f       	sbci	r25, 0xFF	; 255
     834:	9e 01       	movw	r18, r28
     836:	28 59       	subi	r18, 0x98	; 152
     838:	3f 4f       	sbci	r19, 0xFF	; 255
     83a:	f9 01       	movw	r30, r18
     83c:	20 81       	ld	r18, Z
     83e:	31 81       	ldd	r19, Z+1	; 0x01
     840:	fc 01       	movw	r30, r24
     842:	31 83       	std	Z+1, r19	; 0x01
     844:	20 83       	st	Z, r18
     846:	ce 01       	movw	r24, r28
     848:	84 59       	subi	r24, 0x94	; 148
     84a:	9f 4f       	sbci	r25, 0xFF	; 255
     84c:	fc 01       	movw	r30, r24
     84e:	80 81       	ld	r24, Z
     850:	91 81       	ldd	r25, Z+1	; 0x01
     852:	01 97       	sbiw	r24, 0x01	; 1
     854:	f1 f7       	brne	.-4      	; 0x852 <LCD_voidInitialize+0x3cc>
     856:	9e 01       	movw	r18, r28
     858:	24 59       	subi	r18, 0x94	; 148
     85a:	3f 4f       	sbci	r19, 0xFF	; 255
     85c:	f9 01       	movw	r30, r18
     85e:	91 83       	std	Z+1, r25	; 0x01
     860:	80 83       	st	Z, r24
     862:	4e c0       	rjmp	.+156    	; 0x900 <__stack+0xa1>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     864:	ce 01       	movw	r24, r28
     866:	89 5a       	subi	r24, 0xA9	; 169
     868:	9f 4f       	sbci	r25, 0xFF	; 255
     86a:	20 e0       	ldi	r18, 0x00	; 0
     86c:	30 e0       	ldi	r19, 0x00	; 0
     86e:	4f e7       	ldi	r20, 0x7F	; 127
     870:	53 e4       	ldi	r21, 0x43	; 67
     872:	fc 01       	movw	r30, r24
     874:	60 81       	ld	r22, Z
     876:	71 81       	ldd	r23, Z+1	; 0x01
     878:	82 81       	ldd	r24, Z+2	; 0x02
     87a:	93 81       	ldd	r25, Z+3	; 0x03
     87c:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <__gesf2>
     880:	18 16       	cp	r1, r24
     882:	6c f5       	brge	.+90     	; 0x8de <__stack+0x7f>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     884:	8e 01       	movw	r16, r28
     886:	02 59       	subi	r16, 0x92	; 146
     888:	1f 4f       	sbci	r17, 0xFF	; 255
     88a:	ce 01       	movw	r24, r28
     88c:	85 5a       	subi	r24, 0xA5	; 165
     88e:	9f 4f       	sbci	r25, 0xFF	; 255
     890:	fc 01       	movw	r30, r24
     892:	60 81       	ld	r22, Z
     894:	71 81       	ldd	r23, Z+1	; 0x01
     896:	82 81       	ldd	r24, Z+2	; 0x02
     898:	93 81       	ldd	r25, Z+3	; 0x03
     89a:	0e 94 c7 0a 	call	0x158e	; 0x158e <__fixunssfsi>
     89e:	dc 01       	movw	r26, r24
     8a0:	cb 01       	movw	r24, r22
     8a2:	f8 01       	movw	r30, r16
     8a4:	91 83       	std	Z+1, r25	; 0x01
     8a6:	80 83       	st	Z, r24
     8a8:	ce 01       	movw	r24, r28
     8aa:	80 59       	subi	r24, 0x90	; 144
     8ac:	9f 4f       	sbci	r25, 0xFF	; 255
     8ae:	9e 01       	movw	r18, r28
     8b0:	22 59       	subi	r18, 0x92	; 146
     8b2:	3f 4f       	sbci	r19, 0xFF	; 255
     8b4:	f9 01       	movw	r30, r18
     8b6:	20 81       	ld	r18, Z
     8b8:	31 81       	ldd	r19, Z+1	; 0x01
     8ba:	fc 01       	movw	r30, r24
     8bc:	31 83       	std	Z+1, r19	; 0x01
     8be:	20 83       	st	Z, r18
     8c0:	ce 01       	movw	r24, r28
     8c2:	80 59       	subi	r24, 0x90	; 144
     8c4:	9f 4f       	sbci	r25, 0xFF	; 255
     8c6:	fc 01       	movw	r30, r24
     8c8:	80 81       	ld	r24, Z
     8ca:	91 81       	ldd	r25, Z+1	; 0x01
     8cc:	01 97       	sbiw	r24, 0x01	; 1
     8ce:	f1 f7       	brne	.-4      	; 0x8cc <__stack+0x6d>
     8d0:	9e 01       	movw	r18, r28
     8d2:	20 59       	subi	r18, 0x90	; 144
     8d4:	3f 4f       	sbci	r19, 0xFF	; 255
     8d6:	f9 01       	movw	r30, r18
     8d8:	91 83       	std	Z+1, r25	; 0x01
     8da:	80 83       	st	Z, r24
     8dc:	28 c0       	rjmp	.+80     	; 0x92e <__stack+0xcf>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     8de:	8e 01       	movw	r16, r28
     8e0:	01 5a       	subi	r16, 0xA1	; 161
     8e2:	1f 4f       	sbci	r17, 0xFF	; 255
     8e4:	ce 01       	movw	r24, r28
     8e6:	89 5a       	subi	r24, 0xA9	; 169
     8e8:	9f 4f       	sbci	r25, 0xFF	; 255
     8ea:	fc 01       	movw	r30, r24
     8ec:	60 81       	ld	r22, Z
     8ee:	71 81       	ldd	r23, Z+1	; 0x01
     8f0:	82 81       	ldd	r24, Z+2	; 0x02
     8f2:	93 81       	ldd	r25, Z+3	; 0x03
     8f4:	0e 94 c7 0a 	call	0x158e	; 0x158e <__fixunssfsi>
     8f8:	dc 01       	movw	r26, r24
     8fa:	cb 01       	movw	r24, r22
     8fc:	f8 01       	movw	r30, r16
     8fe:	80 83       	st	Z, r24
     900:	ce 01       	movw	r24, r28
     902:	8e 58       	subi	r24, 0x8E	; 142
     904:	9f 4f       	sbci	r25, 0xFF	; 255
     906:	9e 01       	movw	r18, r28
     908:	21 5a       	subi	r18, 0xA1	; 161
     90a:	3f 4f       	sbci	r19, 0xFF	; 255
     90c:	f9 01       	movw	r30, r18
     90e:	20 81       	ld	r18, Z
     910:	fc 01       	movw	r30, r24
     912:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     914:	ce 01       	movw	r24, r28
     916:	8e 58       	subi	r24, 0x8E	; 142
     918:	9f 4f       	sbci	r25, 0xFF	; 255
     91a:	fc 01       	movw	r30, r24
     91c:	80 81       	ld	r24, Z
     91e:	28 2f       	mov	r18, r24
     920:	2a 95       	dec	r18
     922:	f1 f7       	brne	.-4      	; 0x920 <__stack+0xc1>
     924:	ce 01       	movw	r24, r28
     926:	8e 58       	subi	r24, 0x8E	; 142
     928:	9f 4f       	sbci	r25, 0xFF	; 255
     92a:	fc 01       	movw	r30, r24
     92c:	20 83       	st	Z, r18

	_delay_us(50);

	LCD_voidWriteCmd(LCD_DISP_ON_CURSE_OFF_BLINK_OFF);
     92e:	8c e0       	ldi	r24, 0x0C	; 12
     930:	0e 94 9e 07 	call	0xf3c	; 0xf3c <LCD_voidWriteCmd>
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a8 e4       	ldi	r26, 0x48	; 72
     93a:	b2 e4       	ldi	r27, 0x42	; 66
     93c:	89 87       	std	Y+9, r24	; 0x09
     93e:	9a 87       	std	Y+10, r25	; 0x0a
     940:	ab 87       	std	Y+11, r26	; 0x0b
     942:	bc 87       	std	Y+12, r27	; 0x0c
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     944:	2b ea       	ldi	r18, 0xAB	; 171
     946:	3a ea       	ldi	r19, 0xAA	; 170
     948:	4a e2       	ldi	r20, 0x2A	; 42
     94a:	50 e4       	ldi	r21, 0x40	; 64
     94c:	69 85       	ldd	r22, Y+9	; 0x09
     94e:	7a 85       	ldd	r23, Y+10	; 0x0a
     950:	8b 85       	ldd	r24, Y+11	; 0x0b
     952:	9c 85       	ldd	r25, Y+12	; 0x0c
     954:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <__mulsf3>
     958:	dc 01       	movw	r26, r24
     95a:	cb 01       	movw	r24, r22
     95c:	8b af       	std	Y+59, r24	; 0x3b
     95e:	9c af       	std	Y+60, r25	; 0x3c
     960:	ad af       	std	Y+61, r26	; 0x3d
     962:	be af       	std	Y+62, r27	; 0x3e
	__tmp2 = ((F_CPU) / 4e6) * __us;
     964:	8e 01       	movw	r16, r28
     966:	01 5c       	subi	r16, 0xC1	; 193
     968:	1f 4f       	sbci	r17, 0xFF	; 255
     96a:	89 85       	ldd	r24, Y+9	; 0x09
     96c:	9a 85       	ldd	r25, Y+10	; 0x0a
     96e:	ab 85       	ldd	r26, Y+11	; 0x0b
     970:	bc 85       	ldd	r27, Y+12	; 0x0c
     972:	9c 01       	movw	r18, r24
     974:	ad 01       	movw	r20, r26
     976:	bc 01       	movw	r22, r24
     978:	cd 01       	movw	r24, r26
     97a:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <__addsf3>
     97e:	dc 01       	movw	r26, r24
     980:	cb 01       	movw	r24, r22
     982:	f8 01       	movw	r30, r16
     984:	80 83       	st	Z, r24
     986:	91 83       	std	Z+1, r25	; 0x01
     988:	a2 83       	std	Z+2, r26	; 0x02
     98a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     98c:	20 e0       	ldi	r18, 0x00	; 0
     98e:	30 e0       	ldi	r19, 0x00	; 0
     990:	40 e8       	ldi	r20, 0x80	; 128
     992:	5f e3       	ldi	r21, 0x3F	; 63
     994:	6b ad       	ldd	r22, Y+59	; 0x3b
     996:	7c ad       	ldd	r23, Y+60	; 0x3c
     998:	8d ad       	ldd	r24, Y+61	; 0x3d
     99a:	9e ad       	ldd	r25, Y+62	; 0x3e
     99c:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <__cmpsf2>
     9a0:	88 23       	and	r24, r24
     9a2:	3c f4       	brge	.+14     	; 0x9b2 <__stack+0x153>
		__ticks = 1;
     9a4:	ce 01       	movw	r24, r28
     9a6:	8d 5b       	subi	r24, 0xBD	; 189
     9a8:	9f 4f       	sbci	r25, 0xFF	; 255
     9aa:	21 e0       	ldi	r18, 0x01	; 1
     9ac:	fc 01       	movw	r30, r24
     9ae:	20 83       	st	Z, r18
     9b0:	22 c1       	rjmp	.+580    	; 0xbf6 <__stack+0x397>
	else if (__tmp2 > 65535)
     9b2:	ce 01       	movw	r24, r28
     9b4:	cf 96       	adiw	r24, 0x3f	; 63
     9b6:	20 e0       	ldi	r18, 0x00	; 0
     9b8:	3f ef       	ldi	r19, 0xFF	; 255
     9ba:	4f e7       	ldi	r20, 0x7F	; 127
     9bc:	57 e4       	ldi	r21, 0x47	; 71
     9be:	fc 01       	movw	r30, r24
     9c0:	60 81       	ld	r22, Z
     9c2:	71 81       	ldd	r23, Z+1	; 0x01
     9c4:	82 81       	ldd	r24, Z+2	; 0x02
     9c6:	93 81       	ldd	r25, Z+3	; 0x03
     9c8:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <__gesf2>
     9cc:	18 16       	cp	r1, r24
     9ce:	0c f0       	brlt	.+2      	; 0x9d2 <__stack+0x173>
     9d0:	cd c0       	rjmp	.+410    	; 0xb6c <__stack+0x30d>
	{
		_delay_ms(__us / 1000.0);
     9d2:	20 e0       	ldi	r18, 0x00	; 0
     9d4:	30 e0       	ldi	r19, 0x00	; 0
     9d6:	4a e7       	ldi	r20, 0x7A	; 122
     9d8:	54 e4       	ldi	r21, 0x44	; 68
     9da:	69 85       	ldd	r22, Y+9	; 0x09
     9dc:	7a 85       	ldd	r23, Y+10	; 0x0a
     9de:	8b 85       	ldd	r24, Y+11	; 0x0b
     9e0:	9c 85       	ldd	r25, Y+12	; 0x0c
     9e2:	0e 94 55 0a 	call	0x14aa	; 0x14aa <__divsf3>
     9e6:	dc 01       	movw	r26, r24
     9e8:	cb 01       	movw	r24, r22
     9ea:	9e 01       	movw	r18, r28
     9ec:	2c 5b       	subi	r18, 0xBC	; 188
     9ee:	3f 4f       	sbci	r19, 0xFF	; 255
     9f0:	f9 01       	movw	r30, r18
     9f2:	80 83       	st	Z, r24
     9f4:	91 83       	std	Z+1, r25	; 0x01
     9f6:	a2 83       	std	Z+2, r26	; 0x02
     9f8:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     9fa:	8e 01       	movw	r16, r28
     9fc:	08 5b       	subi	r16, 0xB8	; 184
     9fe:	1f 4f       	sbci	r17, 0xFF	; 255
     a00:	ce 01       	movw	r24, r28
     a02:	8c 5b       	subi	r24, 0xBC	; 188
     a04:	9f 4f       	sbci	r25, 0xFF	; 255
     a06:	20 e0       	ldi	r18, 0x00	; 0
     a08:	30 e0       	ldi	r19, 0x00	; 0
     a0a:	4a ef       	ldi	r20, 0xFA	; 250
     a0c:	54 e4       	ldi	r21, 0x44	; 68
     a0e:	fc 01       	movw	r30, r24
     a10:	60 81       	ld	r22, Z
     a12:	71 81       	ldd	r23, Z+1	; 0x01
     a14:	82 81       	ldd	r24, Z+2	; 0x02
     a16:	93 81       	ldd	r25, Z+3	; 0x03
     a18:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <__mulsf3>
     a1c:	dc 01       	movw	r26, r24
     a1e:	cb 01       	movw	r24, r22
     a20:	f8 01       	movw	r30, r16
     a22:	80 83       	st	Z, r24
     a24:	91 83       	std	Z+1, r25	; 0x01
     a26:	a2 83       	std	Z+2, r26	; 0x02
     a28:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     a2a:	ce 01       	movw	r24, r28
     a2c:	88 5b       	subi	r24, 0xB8	; 184
     a2e:	9f 4f       	sbci	r25, 0xFF	; 255
     a30:	20 e0       	ldi	r18, 0x00	; 0
     a32:	30 e0       	ldi	r19, 0x00	; 0
     a34:	40 e8       	ldi	r20, 0x80	; 128
     a36:	5f e3       	ldi	r21, 0x3F	; 63
     a38:	fc 01       	movw	r30, r24
     a3a:	60 81       	ld	r22, Z
     a3c:	71 81       	ldd	r23, Z+1	; 0x01
     a3e:	82 81       	ldd	r24, Z+2	; 0x02
     a40:	93 81       	ldd	r25, Z+3	; 0x03
     a42:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <__cmpsf2>
     a46:	88 23       	and	r24, r24
     a48:	4c f4       	brge	.+18     	; 0xa5c <__stack+0x1fd>
		__ticks = 1;
     a4a:	ce 01       	movw	r24, r28
     a4c:	84 5b       	subi	r24, 0xB4	; 180
     a4e:	9f 4f       	sbci	r25, 0xFF	; 255
     a50:	21 e0       	ldi	r18, 0x01	; 1
     a52:	30 e0       	ldi	r19, 0x00	; 0
     a54:	fc 01       	movw	r30, r24
     a56:	31 83       	std	Z+1, r19	; 0x01
     a58:	20 83       	st	Z, r18
     a5a:	6d c0       	rjmp	.+218    	; 0xb36 <__stack+0x2d7>
	else if (__tmp > 65535)
     a5c:	ce 01       	movw	r24, r28
     a5e:	88 5b       	subi	r24, 0xB8	; 184
     a60:	9f 4f       	sbci	r25, 0xFF	; 255
     a62:	20 e0       	ldi	r18, 0x00	; 0
     a64:	3f ef       	ldi	r19, 0xFF	; 255
     a66:	4f e7       	ldi	r20, 0x7F	; 127
     a68:	57 e4       	ldi	r21, 0x47	; 71
     a6a:	fc 01       	movw	r30, r24
     a6c:	60 81       	ld	r22, Z
     a6e:	71 81       	ldd	r23, Z+1	; 0x01
     a70:	82 81       	ldd	r24, Z+2	; 0x02
     a72:	93 81       	ldd	r25, Z+3	; 0x03
     a74:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <__gesf2>
     a78:	18 16       	cp	r1, r24
     a7a:	0c f0       	brlt	.+2      	; 0xa7e <__stack+0x21f>
     a7c:	4a c0       	rjmp	.+148    	; 0xb12 <__stack+0x2b3>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a7e:	ce 01       	movw	r24, r28
     a80:	8c 5b       	subi	r24, 0xBC	; 188
     a82:	9f 4f       	sbci	r25, 0xFF	; 255
     a84:	20 e0       	ldi	r18, 0x00	; 0
     a86:	30 e0       	ldi	r19, 0x00	; 0
     a88:	40 e2       	ldi	r20, 0x20	; 32
     a8a:	51 e4       	ldi	r21, 0x41	; 65
     a8c:	fc 01       	movw	r30, r24
     a8e:	60 81       	ld	r22, Z
     a90:	71 81       	ldd	r23, Z+1	; 0x01
     a92:	82 81       	ldd	r24, Z+2	; 0x02
     a94:	93 81       	ldd	r25, Z+3	; 0x03
     a96:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <__mulsf3>
     a9a:	dc 01       	movw	r26, r24
     a9c:	cb 01       	movw	r24, r22
     a9e:	8e 01       	movw	r16, r28
     aa0:	04 5b       	subi	r16, 0xB4	; 180
     aa2:	1f 4f       	sbci	r17, 0xFF	; 255
     aa4:	bc 01       	movw	r22, r24
     aa6:	cd 01       	movw	r24, r26
     aa8:	0e 94 c7 0a 	call	0x158e	; 0x158e <__fixunssfsi>
     aac:	dc 01       	movw	r26, r24
     aae:	cb 01       	movw	r24, r22
     ab0:	f8 01       	movw	r30, r16
     ab2:	91 83       	std	Z+1, r25	; 0x01
     ab4:	80 83       	st	Z, r24
     ab6:	24 c0       	rjmp	.+72     	; 0xb00 <__stack+0x2a1>
     ab8:	ce 01       	movw	r24, r28
     aba:	82 5b       	subi	r24, 0xB2	; 178
     abc:	9f 4f       	sbci	r25, 0xFF	; 255
     abe:	28 ec       	ldi	r18, 0xC8	; 200
     ac0:	30 e0       	ldi	r19, 0x00	; 0
     ac2:	fc 01       	movw	r30, r24
     ac4:	31 83       	std	Z+1, r19	; 0x01
     ac6:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ac8:	ce 01       	movw	r24, r28
     aca:	82 5b       	subi	r24, 0xB2	; 178
     acc:	9f 4f       	sbci	r25, 0xFF	; 255
     ace:	fc 01       	movw	r30, r24
     ad0:	80 81       	ld	r24, Z
     ad2:	91 81       	ldd	r25, Z+1	; 0x01
     ad4:	01 97       	sbiw	r24, 0x01	; 1
     ad6:	f1 f7       	brne	.-4      	; 0xad4 <__stack+0x275>
     ad8:	9e 01       	movw	r18, r28
     ada:	22 5b       	subi	r18, 0xB2	; 178
     adc:	3f 4f       	sbci	r19, 0xFF	; 255
     ade:	f9 01       	movw	r30, r18
     ae0:	91 83       	std	Z+1, r25	; 0x01
     ae2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ae4:	ce 01       	movw	r24, r28
     ae6:	84 5b       	subi	r24, 0xB4	; 180
     ae8:	9f 4f       	sbci	r25, 0xFF	; 255
     aea:	9e 01       	movw	r18, r28
     aec:	24 5b       	subi	r18, 0xB4	; 180
     aee:	3f 4f       	sbci	r19, 0xFF	; 255
     af0:	f9 01       	movw	r30, r18
     af2:	20 81       	ld	r18, Z
     af4:	31 81       	ldd	r19, Z+1	; 0x01
     af6:	21 50       	subi	r18, 0x01	; 1
     af8:	31 09       	sbc	r19, r1
     afa:	fc 01       	movw	r30, r24
     afc:	31 83       	std	Z+1, r19	; 0x01
     afe:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b00:	ce 01       	movw	r24, r28
     b02:	84 5b       	subi	r24, 0xB4	; 180
     b04:	9f 4f       	sbci	r25, 0xFF	; 255
     b06:	fc 01       	movw	r30, r24
     b08:	80 81       	ld	r24, Z
     b0a:	91 81       	ldd	r25, Z+1	; 0x01
     b0c:	89 2b       	or	r24, r25
     b0e:	a1 f6       	brne	.-88     	; 0xab8 <__stack+0x259>
     b10:	72 c0       	rjmp	.+228    	; 0xbf6 <__stack+0x397>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b12:	8e 01       	movw	r16, r28
     b14:	04 5b       	subi	r16, 0xB4	; 180
     b16:	1f 4f       	sbci	r17, 0xFF	; 255
     b18:	ce 01       	movw	r24, r28
     b1a:	88 5b       	subi	r24, 0xB8	; 184
     b1c:	9f 4f       	sbci	r25, 0xFF	; 255
     b1e:	fc 01       	movw	r30, r24
     b20:	60 81       	ld	r22, Z
     b22:	71 81       	ldd	r23, Z+1	; 0x01
     b24:	82 81       	ldd	r24, Z+2	; 0x02
     b26:	93 81       	ldd	r25, Z+3	; 0x03
     b28:	0e 94 c7 0a 	call	0x158e	; 0x158e <__fixunssfsi>
     b2c:	dc 01       	movw	r26, r24
     b2e:	cb 01       	movw	r24, r22
     b30:	f8 01       	movw	r30, r16
     b32:	91 83       	std	Z+1, r25	; 0x01
     b34:	80 83       	st	Z, r24
     b36:	ce 01       	movw	r24, r28
     b38:	80 5b       	subi	r24, 0xB0	; 176
     b3a:	9f 4f       	sbci	r25, 0xFF	; 255
     b3c:	9e 01       	movw	r18, r28
     b3e:	24 5b       	subi	r18, 0xB4	; 180
     b40:	3f 4f       	sbci	r19, 0xFF	; 255
     b42:	f9 01       	movw	r30, r18
     b44:	20 81       	ld	r18, Z
     b46:	31 81       	ldd	r19, Z+1	; 0x01
     b48:	fc 01       	movw	r30, r24
     b4a:	31 83       	std	Z+1, r19	; 0x01
     b4c:	20 83       	st	Z, r18
     b4e:	ce 01       	movw	r24, r28
     b50:	80 5b       	subi	r24, 0xB0	; 176
     b52:	9f 4f       	sbci	r25, 0xFF	; 255
     b54:	fc 01       	movw	r30, r24
     b56:	80 81       	ld	r24, Z
     b58:	91 81       	ldd	r25, Z+1	; 0x01
     b5a:	01 97       	sbiw	r24, 0x01	; 1
     b5c:	f1 f7       	brne	.-4      	; 0xb5a <__stack+0x2fb>
     b5e:	9e 01       	movw	r18, r28
     b60:	20 5b       	subi	r18, 0xB0	; 176
     b62:	3f 4f       	sbci	r19, 0xFF	; 255
     b64:	f9 01       	movw	r30, r18
     b66:	91 83       	std	Z+1, r25	; 0x01
     b68:	80 83       	st	Z, r24
     b6a:	45 c0       	rjmp	.+138    	; 0xbf6 <__stack+0x397>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     b6c:	20 e0       	ldi	r18, 0x00	; 0
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	4f e7       	ldi	r20, 0x7F	; 127
     b72:	53 e4       	ldi	r21, 0x43	; 67
     b74:	6b ad       	ldd	r22, Y+59	; 0x3b
     b76:	7c ad       	ldd	r23, Y+60	; 0x3c
     b78:	8d ad       	ldd	r24, Y+61	; 0x3d
     b7a:	9e ad       	ldd	r25, Y+62	; 0x3e
     b7c:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <__gesf2>
     b80:	18 16       	cp	r1, r24
     b82:	64 f5       	brge	.+88     	; 0xbdc <__stack+0x37d>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     b84:	8e 01       	movw	r16, r28
     b86:	0e 5a       	subi	r16, 0xAE	; 174
     b88:	1f 4f       	sbci	r17, 0xFF	; 255
     b8a:	ce 01       	movw	r24, r28
     b8c:	cf 96       	adiw	r24, 0x3f	; 63
     b8e:	fc 01       	movw	r30, r24
     b90:	60 81       	ld	r22, Z
     b92:	71 81       	ldd	r23, Z+1	; 0x01
     b94:	82 81       	ldd	r24, Z+2	; 0x02
     b96:	93 81       	ldd	r25, Z+3	; 0x03
     b98:	0e 94 c7 0a 	call	0x158e	; 0x158e <__fixunssfsi>
     b9c:	dc 01       	movw	r26, r24
     b9e:	cb 01       	movw	r24, r22
     ba0:	f8 01       	movw	r30, r16
     ba2:	91 83       	std	Z+1, r25	; 0x01
     ba4:	80 83       	st	Z, r24
     ba6:	ce 01       	movw	r24, r28
     ba8:	8c 5a       	subi	r24, 0xAC	; 172
     baa:	9f 4f       	sbci	r25, 0xFF	; 255
     bac:	9e 01       	movw	r18, r28
     bae:	2e 5a       	subi	r18, 0xAE	; 174
     bb0:	3f 4f       	sbci	r19, 0xFF	; 255
     bb2:	f9 01       	movw	r30, r18
     bb4:	20 81       	ld	r18, Z
     bb6:	31 81       	ldd	r19, Z+1	; 0x01
     bb8:	fc 01       	movw	r30, r24
     bba:	31 83       	std	Z+1, r19	; 0x01
     bbc:	20 83       	st	Z, r18
     bbe:	ce 01       	movw	r24, r28
     bc0:	8c 5a       	subi	r24, 0xAC	; 172
     bc2:	9f 4f       	sbci	r25, 0xFF	; 255
     bc4:	fc 01       	movw	r30, r24
     bc6:	80 81       	ld	r24, Z
     bc8:	91 81       	ldd	r25, Z+1	; 0x01
     bca:	01 97       	sbiw	r24, 0x01	; 1
     bcc:	f1 f7       	brne	.-4      	; 0xbca <__stack+0x36b>
     bce:	9e 01       	movw	r18, r28
     bd0:	2c 5a       	subi	r18, 0xAC	; 172
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	f9 01       	movw	r30, r18
     bd6:	91 83       	std	Z+1, r25	; 0x01
     bd8:	80 83       	st	Z, r24
     bda:	24 c0       	rjmp	.+72     	; 0xc24 <__stack+0x3c5>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     bdc:	8e 01       	movw	r16, r28
     bde:	0d 5b       	subi	r16, 0xBD	; 189
     be0:	1f 4f       	sbci	r17, 0xFF	; 255
     be2:	6b ad       	ldd	r22, Y+59	; 0x3b
     be4:	7c ad       	ldd	r23, Y+60	; 0x3c
     be6:	8d ad       	ldd	r24, Y+61	; 0x3d
     be8:	9e ad       	ldd	r25, Y+62	; 0x3e
     bea:	0e 94 c7 0a 	call	0x158e	; 0x158e <__fixunssfsi>
     bee:	dc 01       	movw	r26, r24
     bf0:	cb 01       	movw	r24, r22
     bf2:	f8 01       	movw	r30, r16
     bf4:	80 83       	st	Z, r24
     bf6:	ce 01       	movw	r24, r28
     bf8:	8a 5a       	subi	r24, 0xAA	; 170
     bfa:	9f 4f       	sbci	r25, 0xFF	; 255
     bfc:	9e 01       	movw	r18, r28
     bfe:	2d 5b       	subi	r18, 0xBD	; 189
     c00:	3f 4f       	sbci	r19, 0xFF	; 255
     c02:	f9 01       	movw	r30, r18
     c04:	20 81       	ld	r18, Z
     c06:	fc 01       	movw	r30, r24
     c08:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     c0a:	ce 01       	movw	r24, r28
     c0c:	8a 5a       	subi	r24, 0xAA	; 170
     c0e:	9f 4f       	sbci	r25, 0xFF	; 255
     c10:	fc 01       	movw	r30, r24
     c12:	80 81       	ld	r24, Z
     c14:	28 2f       	mov	r18, r24
     c16:	2a 95       	dec	r18
     c18:	f1 f7       	brne	.-4      	; 0xc16 <__stack+0x3b7>
     c1a:	ce 01       	movw	r24, r28
     c1c:	8a 5a       	subi	r24, 0xAA	; 170
     c1e:	9f 4f       	sbci	r25, 0xFF	; 255
     c20:	fc 01       	movw	r30, r24
     c22:	20 83       	st	Z, r18

	_delay_us(50);

	LCD_voidClrScreen();
     c24:	0e 94 b7 07 	call	0xf6e	; 0xf6e <LCD_voidClrScreen>
     c28:	80 e0       	ldi	r24, 0x00	; 0
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e4       	ldi	r27, 0x40	; 64
     c30:	8d 87       	std	Y+13, r24	; 0x0d
     c32:	9e 87       	std	Y+14, r25	; 0x0e
     c34:	af 87       	std	Y+15, r26	; 0x0f
     c36:	b8 8b       	std	Y+16, r27	; 0x10

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     c38:	20 e0       	ldi	r18, 0x00	; 0
     c3a:	30 e0       	ldi	r19, 0x00	; 0
     c3c:	4a ef       	ldi	r20, 0xFA	; 250
     c3e:	54 e4       	ldi	r21, 0x44	; 68
     c40:	6d 85       	ldd	r22, Y+13	; 0x0d
     c42:	7e 85       	ldd	r23, Y+14	; 0x0e
     c44:	8f 85       	ldd	r24, Y+15	; 0x0f
     c46:	98 89       	ldd	r25, Y+16	; 0x10
     c48:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <__mulsf3>
     c4c:	dc 01       	movw	r26, r24
     c4e:	cb 01       	movw	r24, r22
     c50:	89 ab       	std	Y+49, r24	; 0x31
     c52:	9a ab       	std	Y+50, r25	; 0x32
     c54:	ab ab       	std	Y+51, r26	; 0x33
     c56:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     c58:	20 e0       	ldi	r18, 0x00	; 0
     c5a:	30 e0       	ldi	r19, 0x00	; 0
     c5c:	40 e8       	ldi	r20, 0x80	; 128
     c5e:	5f e3       	ldi	r21, 0x3F	; 63
     c60:	69 a9       	ldd	r22, Y+49	; 0x31
     c62:	7a a9       	ldd	r23, Y+50	; 0x32
     c64:	8b a9       	ldd	r24, Y+51	; 0x33
     c66:	9c a9       	ldd	r25, Y+52	; 0x34
     c68:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <__cmpsf2>
     c6c:	88 23       	and	r24, r24
     c6e:	2c f4       	brge	.+10     	; 0xc7a <__stack+0x41b>
		__ticks = 1;
     c70:	81 e0       	ldi	r24, 0x01	; 1
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	9e ab       	std	Y+54, r25	; 0x36
     c76:	8d ab       	std	Y+53, r24	; 0x35
     c78:	3f c0       	rjmp	.+126    	; 0xcf8 <__stack+0x499>
	else if (__tmp > 65535)
     c7a:	20 e0       	ldi	r18, 0x00	; 0
     c7c:	3f ef       	ldi	r19, 0xFF	; 255
     c7e:	4f e7       	ldi	r20, 0x7F	; 127
     c80:	57 e4       	ldi	r21, 0x47	; 71
     c82:	69 a9       	ldd	r22, Y+49	; 0x31
     c84:	7a a9       	ldd	r23, Y+50	; 0x32
     c86:	8b a9       	ldd	r24, Y+51	; 0x33
     c88:	9c a9       	ldd	r25, Y+52	; 0x34
     c8a:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <__gesf2>
     c8e:	18 16       	cp	r1, r24
     c90:	4c f5       	brge	.+82     	; 0xce4 <__stack+0x485>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c92:	20 e0       	ldi	r18, 0x00	; 0
     c94:	30 e0       	ldi	r19, 0x00	; 0
     c96:	40 e2       	ldi	r20, 0x20	; 32
     c98:	51 e4       	ldi	r21, 0x41	; 65
     c9a:	6d 85       	ldd	r22, Y+13	; 0x0d
     c9c:	7e 85       	ldd	r23, Y+14	; 0x0e
     c9e:	8f 85       	ldd	r24, Y+15	; 0x0f
     ca0:	98 89       	ldd	r25, Y+16	; 0x10
     ca2:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <__mulsf3>
     ca6:	dc 01       	movw	r26, r24
     ca8:	cb 01       	movw	r24, r22
     caa:	bc 01       	movw	r22, r24
     cac:	cd 01       	movw	r24, r26
     cae:	0e 94 c7 0a 	call	0x158e	; 0x158e <__fixunssfsi>
     cb2:	dc 01       	movw	r26, r24
     cb4:	cb 01       	movw	r24, r22
     cb6:	9e ab       	std	Y+54, r25	; 0x36
     cb8:	8d ab       	std	Y+53, r24	; 0x35
     cba:	0f c0       	rjmp	.+30     	; 0xcda <__stack+0x47b>
     cbc:	88 ec       	ldi	r24, 0xC8	; 200
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	98 af       	std	Y+56, r25	; 0x38
     cc2:	8f ab       	std	Y+55, r24	; 0x37
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     cc4:	8f a9       	ldd	r24, Y+55	; 0x37
     cc6:	98 ad       	ldd	r25, Y+56	; 0x38
     cc8:	01 97       	sbiw	r24, 0x01	; 1
     cca:	f1 f7       	brne	.-4      	; 0xcc8 <__stack+0x469>
     ccc:	98 af       	std	Y+56, r25	; 0x38
     cce:	8f ab       	std	Y+55, r24	; 0x37
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cd0:	8d a9       	ldd	r24, Y+53	; 0x35
     cd2:	9e a9       	ldd	r25, Y+54	; 0x36
     cd4:	01 97       	sbiw	r24, 0x01	; 1
     cd6:	9e ab       	std	Y+54, r25	; 0x36
     cd8:	8d ab       	std	Y+53, r24	; 0x35
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cda:	8d a9       	ldd	r24, Y+53	; 0x35
     cdc:	9e a9       	ldd	r25, Y+54	; 0x36
     cde:	89 2b       	or	r24, r25
     ce0:	69 f7       	brne	.-38     	; 0xcbc <__stack+0x45d>
     ce2:	14 c0       	rjmp	.+40     	; 0xd0c <__stack+0x4ad>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ce4:	69 a9       	ldd	r22, Y+49	; 0x31
     ce6:	7a a9       	ldd	r23, Y+50	; 0x32
     ce8:	8b a9       	ldd	r24, Y+51	; 0x33
     cea:	9c a9       	ldd	r25, Y+52	; 0x34
     cec:	0e 94 c7 0a 	call	0x158e	; 0x158e <__fixunssfsi>
     cf0:	dc 01       	movw	r26, r24
     cf2:	cb 01       	movw	r24, r22
     cf4:	9e ab       	std	Y+54, r25	; 0x36
     cf6:	8d ab       	std	Y+53, r24	; 0x35
     cf8:	8d a9       	ldd	r24, Y+53	; 0x35
     cfa:	9e a9       	ldd	r25, Y+54	; 0x36
     cfc:	9a af       	std	Y+58, r25	; 0x3a
     cfe:	89 af       	std	Y+57, r24	; 0x39
     d00:	89 ad       	ldd	r24, Y+57	; 0x39
     d02:	9a ad       	ldd	r25, Y+58	; 0x3a
     d04:	01 97       	sbiw	r24, 0x01	; 1
     d06:	f1 f7       	brne	.-4      	; 0xd04 <__stack+0x4a5>
     d08:	9a af       	std	Y+58, r25	; 0x3a
     d0a:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(2);

	LCD_voidWriteCmd(LCD_ENTRY_MODE);
     d0c:	86 e0       	ldi	r24, 0x06	; 6
     d0e:	0e 94 9e 07 	call	0xf3c	; 0xf3c <LCD_voidWriteCmd>
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	a8 e4       	ldi	r26, 0x48	; 72
     d18:	b2 e4       	ldi	r27, 0x42	; 66
     d1a:	89 8b       	std	Y+17, r24	; 0x11
     d1c:	9a 8b       	std	Y+18, r25	; 0x12
     d1e:	ab 8b       	std	Y+19, r26	; 0x13
     d20:	bc 8b       	std	Y+20, r27	; 0x14
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     d22:	2b ea       	ldi	r18, 0xAB	; 171
     d24:	3a ea       	ldi	r19, 0xAA	; 170
     d26:	4a e2       	ldi	r20, 0x2A	; 42
     d28:	50 e4       	ldi	r21, 0x40	; 64
     d2a:	69 89       	ldd	r22, Y+17	; 0x11
     d2c:	7a 89       	ldd	r23, Y+18	; 0x12
     d2e:	8b 89       	ldd	r24, Y+19	; 0x13
     d30:	9c 89       	ldd	r25, Y+20	; 0x14
     d32:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <__mulsf3>
     d36:	dc 01       	movw	r26, r24
     d38:	cb 01       	movw	r24, r22
     d3a:	8d 8b       	std	Y+21, r24	; 0x15
     d3c:	9e 8b       	std	Y+22, r25	; 0x16
     d3e:	af 8b       	std	Y+23, r26	; 0x17
     d40:	b8 8f       	std	Y+24, r27	; 0x18
	__tmp2 = ((F_CPU) / 4e6) * __us;
     d42:	89 89       	ldd	r24, Y+17	; 0x11
     d44:	9a 89       	ldd	r25, Y+18	; 0x12
     d46:	ab 89       	ldd	r26, Y+19	; 0x13
     d48:	bc 89       	ldd	r27, Y+20	; 0x14
     d4a:	9c 01       	movw	r18, r24
     d4c:	ad 01       	movw	r20, r26
     d4e:	bc 01       	movw	r22, r24
     d50:	cd 01       	movw	r24, r26
     d52:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <__addsf3>
     d56:	dc 01       	movw	r26, r24
     d58:	cb 01       	movw	r24, r22
     d5a:	89 8f       	std	Y+25, r24	; 0x19
     d5c:	9a 8f       	std	Y+26, r25	; 0x1a
     d5e:	ab 8f       	std	Y+27, r26	; 0x1b
     d60:	bc 8f       	std	Y+28, r27	; 0x1c
	if (__tmp < 1.0)
     d62:	20 e0       	ldi	r18, 0x00	; 0
     d64:	30 e0       	ldi	r19, 0x00	; 0
     d66:	40 e8       	ldi	r20, 0x80	; 128
     d68:	5f e3       	ldi	r21, 0x3F	; 63
     d6a:	6d 89       	ldd	r22, Y+21	; 0x15
     d6c:	7e 89       	ldd	r23, Y+22	; 0x16
     d6e:	8f 89       	ldd	r24, Y+23	; 0x17
     d70:	98 8d       	ldd	r25, Y+24	; 0x18
     d72:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <__cmpsf2>
     d76:	88 23       	and	r24, r24
     d78:	1c f4       	brge	.+6      	; 0xd80 <__stack+0x521>
		__ticks = 1;
     d7a:	81 e0       	ldi	r24, 0x01	; 1
     d7c:	8d 8f       	std	Y+29, r24	; 0x1d
     d7e:	b2 c0       	rjmp	.+356    	; 0xee4 <__stack+0x685>
	else if (__tmp2 > 65535)
     d80:	20 e0       	ldi	r18, 0x00	; 0
     d82:	3f ef       	ldi	r19, 0xFF	; 255
     d84:	4f e7       	ldi	r20, 0x7F	; 127
     d86:	57 e4       	ldi	r21, 0x47	; 71
     d88:	69 8d       	ldd	r22, Y+25	; 0x19
     d8a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d8c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d8e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d90:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <__gesf2>
     d94:	18 16       	cp	r1, r24
     d96:	0c f0       	brlt	.+2      	; 0xd9a <__stack+0x53b>
     d98:	7b c0       	rjmp	.+246    	; 0xe90 <__stack+0x631>
	{
		_delay_ms(__us / 1000.0);
     d9a:	20 e0       	ldi	r18, 0x00	; 0
     d9c:	30 e0       	ldi	r19, 0x00	; 0
     d9e:	4a e7       	ldi	r20, 0x7A	; 122
     da0:	54 e4       	ldi	r21, 0x44	; 68
     da2:	69 89       	ldd	r22, Y+17	; 0x11
     da4:	7a 89       	ldd	r23, Y+18	; 0x12
     da6:	8b 89       	ldd	r24, Y+19	; 0x13
     da8:	9c 89       	ldd	r25, Y+20	; 0x14
     daa:	0e 94 55 0a 	call	0x14aa	; 0x14aa <__divsf3>
     dae:	dc 01       	movw	r26, r24
     db0:	cb 01       	movw	r24, r22
     db2:	8e 8f       	std	Y+30, r24	; 0x1e
     db4:	9f 8f       	std	Y+31, r25	; 0x1f
     db6:	a8 a3       	std	Y+32, r26	; 0x20
     db8:	b9 a3       	std	Y+33, r27	; 0x21

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     dba:	20 e0       	ldi	r18, 0x00	; 0
     dbc:	30 e0       	ldi	r19, 0x00	; 0
     dbe:	4a ef       	ldi	r20, 0xFA	; 250
     dc0:	54 e4       	ldi	r21, 0x44	; 68
     dc2:	6e 8d       	ldd	r22, Y+30	; 0x1e
     dc4:	7f 8d       	ldd	r23, Y+31	; 0x1f
     dc6:	88 a1       	ldd	r24, Y+32	; 0x20
     dc8:	99 a1       	ldd	r25, Y+33	; 0x21
     dca:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <__mulsf3>
     dce:	dc 01       	movw	r26, r24
     dd0:	cb 01       	movw	r24, r22
     dd2:	8a a3       	std	Y+34, r24	; 0x22
     dd4:	9b a3       	std	Y+35, r25	; 0x23
     dd6:	ac a3       	std	Y+36, r26	; 0x24
     dd8:	bd a3       	std	Y+37, r27	; 0x25
	if (__tmp < 1.0)
     dda:	20 e0       	ldi	r18, 0x00	; 0
     ddc:	30 e0       	ldi	r19, 0x00	; 0
     dde:	40 e8       	ldi	r20, 0x80	; 128
     de0:	5f e3       	ldi	r21, 0x3F	; 63
     de2:	6a a1       	ldd	r22, Y+34	; 0x22
     de4:	7b a1       	ldd	r23, Y+35	; 0x23
     de6:	8c a1       	ldd	r24, Y+36	; 0x24
     de8:	9d a1       	ldd	r25, Y+37	; 0x25
     dea:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <__cmpsf2>
     dee:	88 23       	and	r24, r24
     df0:	2c f4       	brge	.+10     	; 0xdfc <__stack+0x59d>
		__ticks = 1;
     df2:	81 e0       	ldi	r24, 0x01	; 1
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	9f a3       	std	Y+39, r25	; 0x27
     df8:	8e a3       	std	Y+38, r24	; 0x26
     dfa:	3f c0       	rjmp	.+126    	; 0xe7a <__stack+0x61b>
	else if (__tmp > 65535)
     dfc:	20 e0       	ldi	r18, 0x00	; 0
     dfe:	3f ef       	ldi	r19, 0xFF	; 255
     e00:	4f e7       	ldi	r20, 0x7F	; 127
     e02:	57 e4       	ldi	r21, 0x47	; 71
     e04:	6a a1       	ldd	r22, Y+34	; 0x22
     e06:	7b a1       	ldd	r23, Y+35	; 0x23
     e08:	8c a1       	ldd	r24, Y+36	; 0x24
     e0a:	9d a1       	ldd	r25, Y+37	; 0x25
     e0c:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <__gesf2>
     e10:	18 16       	cp	r1, r24
     e12:	4c f5       	brge	.+82     	; 0xe66 <__stack+0x607>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e14:	20 e0       	ldi	r18, 0x00	; 0
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	40 e2       	ldi	r20, 0x20	; 32
     e1a:	51 e4       	ldi	r21, 0x41	; 65
     e1c:	6e 8d       	ldd	r22, Y+30	; 0x1e
     e1e:	7f 8d       	ldd	r23, Y+31	; 0x1f
     e20:	88 a1       	ldd	r24, Y+32	; 0x20
     e22:	99 a1       	ldd	r25, Y+33	; 0x21
     e24:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <__mulsf3>
     e28:	dc 01       	movw	r26, r24
     e2a:	cb 01       	movw	r24, r22
     e2c:	bc 01       	movw	r22, r24
     e2e:	cd 01       	movw	r24, r26
     e30:	0e 94 c7 0a 	call	0x158e	; 0x158e <__fixunssfsi>
     e34:	dc 01       	movw	r26, r24
     e36:	cb 01       	movw	r24, r22
     e38:	9f a3       	std	Y+39, r25	; 0x27
     e3a:	8e a3       	std	Y+38, r24	; 0x26
     e3c:	0f c0       	rjmp	.+30     	; 0xe5c <__stack+0x5fd>
     e3e:	88 ec       	ldi	r24, 0xC8	; 200
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	99 a7       	std	Y+41, r25	; 0x29
     e44:	88 a7       	std	Y+40, r24	; 0x28
     e46:	88 a5       	ldd	r24, Y+40	; 0x28
     e48:	99 a5       	ldd	r25, Y+41	; 0x29
     e4a:	01 97       	sbiw	r24, 0x01	; 1
     e4c:	f1 f7       	brne	.-4      	; 0xe4a <__stack+0x5eb>
     e4e:	99 a7       	std	Y+41, r25	; 0x29
     e50:	88 a7       	std	Y+40, r24	; 0x28
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e52:	8e a1       	ldd	r24, Y+38	; 0x26
     e54:	9f a1       	ldd	r25, Y+39	; 0x27
     e56:	01 97       	sbiw	r24, 0x01	; 1
     e58:	9f a3       	std	Y+39, r25	; 0x27
     e5a:	8e a3       	std	Y+38, r24	; 0x26
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e5c:	8e a1       	ldd	r24, Y+38	; 0x26
     e5e:	9f a1       	ldd	r25, Y+39	; 0x27
     e60:	89 2b       	or	r24, r25
     e62:	69 f7       	brne	.-38     	; 0xe3e <__stack+0x5df>
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__stack+0x685>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e66:	6a a1       	ldd	r22, Y+34	; 0x22
     e68:	7b a1       	ldd	r23, Y+35	; 0x23
     e6a:	8c a1       	ldd	r24, Y+36	; 0x24
     e6c:	9d a1       	ldd	r25, Y+37	; 0x25
     e6e:	0e 94 c7 0a 	call	0x158e	; 0x158e <__fixunssfsi>
     e72:	dc 01       	movw	r26, r24
     e74:	cb 01       	movw	r24, r22
     e76:	9f a3       	std	Y+39, r25	; 0x27
     e78:	8e a3       	std	Y+38, r24	; 0x26
     e7a:	8e a1       	ldd	r24, Y+38	; 0x26
     e7c:	9f a1       	ldd	r25, Y+39	; 0x27
     e7e:	9b a7       	std	Y+43, r25	; 0x2b
     e80:	8a a7       	std	Y+42, r24	; 0x2a
     e82:	8a a5       	ldd	r24, Y+42	; 0x2a
     e84:	9b a5       	ldd	r25, Y+43	; 0x2b
     e86:	01 97       	sbiw	r24, 0x01	; 1
     e88:	f1 f7       	brne	.-4      	; 0xe86 <__stack+0x627>
     e8a:	9b a7       	std	Y+43, r25	; 0x2b
     e8c:	8a a7       	std	Y+42, r24	; 0x2a
     e8e:	2a c0       	rjmp	.+84     	; 0xee4 <__stack+0x685>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     e90:	20 e0       	ldi	r18, 0x00	; 0
     e92:	30 e0       	ldi	r19, 0x00	; 0
     e94:	4f e7       	ldi	r20, 0x7F	; 127
     e96:	53 e4       	ldi	r21, 0x43	; 67
     e98:	6d 89       	ldd	r22, Y+21	; 0x15
     e9a:	7e 89       	ldd	r23, Y+22	; 0x16
     e9c:	8f 89       	ldd	r24, Y+23	; 0x17
     e9e:	98 8d       	ldd	r25, Y+24	; 0x18
     ea0:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <__gesf2>
     ea4:	18 16       	cp	r1, r24
     ea6:	ac f4       	brge	.+42     	; 0xed2 <__stack+0x673>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     ea8:	69 8d       	ldd	r22, Y+25	; 0x19
     eaa:	7a 8d       	ldd	r23, Y+26	; 0x1a
     eac:	8b 8d       	ldd	r24, Y+27	; 0x1b
     eae:	9c 8d       	ldd	r25, Y+28	; 0x1c
     eb0:	0e 94 c7 0a 	call	0x158e	; 0x158e <__fixunssfsi>
     eb4:	dc 01       	movw	r26, r24
     eb6:	cb 01       	movw	r24, r22
     eb8:	9d a7       	std	Y+45, r25	; 0x2d
     eba:	8c a7       	std	Y+44, r24	; 0x2c
     ebc:	8c a5       	ldd	r24, Y+44	; 0x2c
     ebe:	9d a5       	ldd	r25, Y+45	; 0x2d
     ec0:	9f a7       	std	Y+47, r25	; 0x2f
     ec2:	8e a7       	std	Y+46, r24	; 0x2e
     ec4:	8e a5       	ldd	r24, Y+46	; 0x2e
     ec6:	9f a5       	ldd	r25, Y+47	; 0x2f
     ec8:	01 97       	sbiw	r24, 0x01	; 1
     eca:	f1 f7       	brne	.-4      	; 0xec8 <__stack+0x669>
     ecc:	9f a7       	std	Y+47, r25	; 0x2f
     ece:	8e a7       	std	Y+46, r24	; 0x2e

	_delay_ms(2);
*/


}
     ed0:	0f c0       	rjmp	.+30     	; 0xef0 <__stack+0x691>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     ed2:	6d 89       	ldd	r22, Y+21	; 0x15
     ed4:	7e 89       	ldd	r23, Y+22	; 0x16
     ed6:	8f 89       	ldd	r24, Y+23	; 0x17
     ed8:	98 8d       	ldd	r25, Y+24	; 0x18
     eda:	0e 94 c7 0a 	call	0x158e	; 0x158e <__fixunssfsi>
     ede:	dc 01       	movw	r26, r24
     ee0:	cb 01       	movw	r24, r22
     ee2:	8d 8f       	std	Y+29, r24	; 0x1d
     ee4:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ee6:	88 ab       	std	Y+48, r24	; 0x30
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     ee8:	88 a9       	ldd	r24, Y+48	; 0x30
     eea:	8a 95       	dec	r24
     eec:	f1 f7       	brne	.-4      	; 0xeea <__stack+0x68b>
     eee:	88 ab       	std	Y+48, r24	; 0x30
     ef0:	00 00       	nop
     ef2:	c4 58       	subi	r28, 0x84	; 132
     ef4:	df 4f       	sbci	r29, 0xFF	; 255
     ef6:	0f b6       	in	r0, 0x3f	; 63
     ef8:	f8 94       	cli
     efa:	de bf       	out	0x3e, r29	; 62
     efc:	0f be       	out	0x3f, r0	; 63
     efe:	cd bf       	out	0x3d, r28	; 61
     f00:	df 91       	pop	r29
     f02:	cf 91       	pop	r28
     f04:	1f 91       	pop	r17
     f06:	0f 91       	pop	r16
     f08:	08 95       	ret

00000f0a <LCD_voidWriteData>:
void LCD_voidWriteData(u8 Data){
     f0a:	cf 93       	push	r28
     f0c:	df 93       	push	r29
     f0e:	1f 92       	push	r1
     f10:	cd b7       	in	r28, 0x3d	; 61
     f12:	de b7       	in	r29, 0x3e	; 62
     f14:	89 83       	std	Y+1, r24	; 0x01

	DIO_voidSetPin(LCD_RS_PIN,HIGH);
     f16:	61 e0       	ldi	r22, 0x01	; 1
     f18:	80 e1       	ldi	r24, 0x10	; 16
     f1a:	0e 94 5d 00 	call	0xba	; 0xba <DIO_voidSetPin>
	DIO_voidSetPin(LCD_RW_PIN,LOW);
     f1e:	60 e0       	ldi	r22, 0x00	; 0
     f20:	81 e1       	ldi	r24, 0x11	; 17
     f22:	0e 94 5d 00 	call	0xba	; 0xba <DIO_voidSetPin>

	LCD_writeHighNibble(Data);
     f26:	89 81       	ldd	r24, Y+1	; 0x01
     f28:	0e 94 cf 07 	call	0xf9e	; 0xf9e <LCD_writeHighNibble>


	LCD_writeLowNibble(Data);
     f2c:	89 81       	ldd	r24, Y+1	; 0x01
     f2e:	0e 94 81 08 	call	0x1102	; 0x1102 <LCD_writeLowNibble>

}
     f32:	00 00       	nop
     f34:	0f 90       	pop	r0
     f36:	df 91       	pop	r29
     f38:	cf 91       	pop	r28
     f3a:	08 95       	ret

00000f3c <LCD_voidWriteCmd>:
void LCD_voidWriteCmd(u8 Cmd){
     f3c:	cf 93       	push	r28
     f3e:	df 93       	push	r29
     f40:	1f 92       	push	r1
     f42:	cd b7       	in	r28, 0x3d	; 61
     f44:	de b7       	in	r29, 0x3e	; 62
     f46:	89 83       	std	Y+1, r24	; 0x01


	DIO_voidSetPin(LCD_RS_PIN,LOW);
     f48:	60 e0       	ldi	r22, 0x00	; 0
     f4a:	80 e1       	ldi	r24, 0x10	; 16
     f4c:	0e 94 5d 00 	call	0xba	; 0xba <DIO_voidSetPin>
	DIO_voidSetPin(LCD_RW_PIN,LOW);
     f50:	60 e0       	ldi	r22, 0x00	; 0
     f52:	81 e1       	ldi	r24, 0x11	; 17
     f54:	0e 94 5d 00 	call	0xba	; 0xba <DIO_voidSetPin>

	LCD_writeHighNibble(Cmd);
     f58:	89 81       	ldd	r24, Y+1	; 0x01
     f5a:	0e 94 cf 07 	call	0xf9e	; 0xf9e <LCD_writeHighNibble>


	LCD_writeLowNibble(Cmd);
     f5e:	89 81       	ldd	r24, Y+1	; 0x01
     f60:	0e 94 81 08 	call	0x1102	; 0x1102 <LCD_writeLowNibble>


}
     f64:	00 00       	nop
     f66:	0f 90       	pop	r0
     f68:	df 91       	pop	r29
     f6a:	cf 91       	pop	r28
     f6c:	08 95       	ret

00000f6e <LCD_voidClrScreen>:
void LCD_voidClrScreen(void){
     f6e:	cf 93       	push	r28
     f70:	df 93       	push	r29
     f72:	cd b7       	in	r28, 0x3d	; 61
     f74:	de b7       	in	r29, 0x3e	; 62

	LCD_voidWriteCmd(CLR_DISPLAY);
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	0e 94 9e 07 	call	0xf3c	; 0xf3c <LCD_voidWriteCmd>

}
     f7c:	00 00       	nop
     f7e:	df 91       	pop	r29
     f80:	cf 91       	pop	r28
     f82:	08 95       	ret

00000f84 <LCD_voidGoToXY>:

void LCD_voidGoToXY(u8 x,u8 y){
     f84:	cf 93       	push	r28
     f86:	df 93       	push	r29
     f88:	00 d0       	rcall	.+0      	; 0xf8a <LCD_voidGoToXY+0x6>
     f8a:	cd b7       	in	r28, 0x3d	; 61
     f8c:	de b7       	in	r29, 0x3e	; 62
     f8e:	89 83       	std	Y+1, r24	; 0x01
     f90:	6a 83       	std	Y+2, r22	; 0x02



}
     f92:	00 00       	nop
     f94:	0f 90       	pop	r0
     f96:	0f 90       	pop	r0
     f98:	df 91       	pop	r29
     f9a:	cf 91       	pop	r28
     f9c:	08 95       	ret

00000f9e <LCD_writeHighNibble>:
static void LCD_writeHighNibble(u8 Data){
     f9e:	cf 93       	push	r28
     fa0:	df 93       	push	r29
     fa2:	cd b7       	in	r28, 0x3d	; 61
     fa4:	de b7       	in	r29, 0x3e	; 62
     fa6:	2f 97       	sbiw	r28, 0x0f	; 15
     fa8:	0f b6       	in	r0, 0x3f	; 63
     faa:	f8 94       	cli
     fac:	de bf       	out	0x3e, r29	; 62
     fae:	0f be       	out	0x3f, r0	; 63
     fb0:	cd bf       	out	0x3d, r28	; 61
     fb2:	8f 87       	std	Y+15, r24	; 0x0f

	DIO_voidSetPin(LCD_D7_PIN,GETBIT(Data,7));
     fb4:	8f 85       	ldd	r24, Y+15	; 0x0f
     fb6:	88 1f       	adc	r24, r24
     fb8:	88 27       	eor	r24, r24
     fba:	88 1f       	adc	r24, r24
     fbc:	68 2f       	mov	r22, r24
     fbe:	86 e1       	ldi	r24, 0x16	; 22
     fc0:	0e 94 5d 00 	call	0xba	; 0xba <DIO_voidSetPin>
	DIO_voidSetPin(LCD_D6_PIN,GETBIT(Data,6));
     fc4:	8f 85       	ldd	r24, Y+15	; 0x0f
     fc6:	82 95       	swap	r24
     fc8:	86 95       	lsr	r24
     fca:	86 95       	lsr	r24
     fcc:	83 70       	andi	r24, 0x03	; 3
     fce:	81 70       	andi	r24, 0x01	; 1
     fd0:	68 2f       	mov	r22, r24
     fd2:	85 e1       	ldi	r24, 0x15	; 21
     fd4:	0e 94 5d 00 	call	0xba	; 0xba <DIO_voidSetPin>
	DIO_voidSetPin(LCD_D5_PIN,GETBIT(Data,5));
     fd8:	8f 85       	ldd	r24, Y+15	; 0x0f
     fda:	82 95       	swap	r24
     fdc:	86 95       	lsr	r24
     fde:	87 70       	andi	r24, 0x07	; 7
     fe0:	81 70       	andi	r24, 0x01	; 1
     fe2:	68 2f       	mov	r22, r24
     fe4:	84 e1       	ldi	r24, 0x14	; 20
     fe6:	0e 94 5d 00 	call	0xba	; 0xba <DIO_voidSetPin>
	DIO_voidSetPin(LCD_D4_PIN,GETBIT(Data,4));
     fea:	8f 85       	ldd	r24, Y+15	; 0x0f
     fec:	82 95       	swap	r24
     fee:	8f 70       	andi	r24, 0x0F	; 15
     ff0:	81 70       	andi	r24, 0x01	; 1
     ff2:	68 2f       	mov	r22, r24
     ff4:	83 e1       	ldi	r24, 0x13	; 19
     ff6:	0e 94 5d 00 	call	0xba	; 0xba <DIO_voidSetPin>
	DIO_voidSetPin(LCD_E_PIN,HIGH);
     ffa:	61 e0       	ldi	r22, 0x01	; 1
     ffc:	82 e1       	ldi	r24, 0x12	; 18
     ffe:	0e 94 5d 00 	call	0xba	; 0xba <DIO_voidSetPin>
    1002:	80 e0       	ldi	r24, 0x00	; 0
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	a0 e8       	ldi	r26, 0x80	; 128
    1008:	bf e3       	ldi	r27, 0x3F	; 63
    100a:	89 83       	std	Y+1, r24	; 0x01
    100c:	9a 83       	std	Y+2, r25	; 0x02
    100e:	ab 83       	std	Y+3, r26	; 0x03
    1010:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1012:	20 e0       	ldi	r18, 0x00	; 0
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	4a ef       	ldi	r20, 0xFA	; 250
    1018:	54 e4       	ldi	r21, 0x44	; 68
    101a:	69 81       	ldd	r22, Y+1	; 0x01
    101c:	7a 81       	ldd	r23, Y+2	; 0x02
    101e:	8b 81       	ldd	r24, Y+3	; 0x03
    1020:	9c 81       	ldd	r25, Y+4	; 0x04
    1022:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <__mulsf3>
    1026:	dc 01       	movw	r26, r24
    1028:	cb 01       	movw	r24, r22
    102a:	8d 83       	std	Y+5, r24	; 0x05
    102c:	9e 83       	std	Y+6, r25	; 0x06
    102e:	af 83       	std	Y+7, r26	; 0x07
    1030:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1032:	20 e0       	ldi	r18, 0x00	; 0
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	40 e8       	ldi	r20, 0x80	; 128
    1038:	5f e3       	ldi	r21, 0x3F	; 63
    103a:	6d 81       	ldd	r22, Y+5	; 0x05
    103c:	7e 81       	ldd	r23, Y+6	; 0x06
    103e:	8f 81       	ldd	r24, Y+7	; 0x07
    1040:	98 85       	ldd	r25, Y+8	; 0x08
    1042:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <__cmpsf2>
    1046:	88 23       	and	r24, r24
    1048:	2c f4       	brge	.+10     	; 0x1054 <LCD_writeHighNibble+0xb6>
		__ticks = 1;
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	9a 87       	std	Y+10, r25	; 0x0a
    1050:	89 87       	std	Y+9, r24	; 0x09
    1052:	3f c0       	rjmp	.+126    	; 0x10d2 <LCD_writeHighNibble+0x134>
	else if (__tmp > 65535)
    1054:	20 e0       	ldi	r18, 0x00	; 0
    1056:	3f ef       	ldi	r19, 0xFF	; 255
    1058:	4f e7       	ldi	r20, 0x7F	; 127
    105a:	57 e4       	ldi	r21, 0x47	; 71
    105c:	6d 81       	ldd	r22, Y+5	; 0x05
    105e:	7e 81       	ldd	r23, Y+6	; 0x06
    1060:	8f 81       	ldd	r24, Y+7	; 0x07
    1062:	98 85       	ldd	r25, Y+8	; 0x08
    1064:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <__gesf2>
    1068:	18 16       	cp	r1, r24
    106a:	4c f5       	brge	.+82     	; 0x10be <LCD_writeHighNibble+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    106c:	20 e0       	ldi	r18, 0x00	; 0
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	40 e2       	ldi	r20, 0x20	; 32
    1072:	51 e4       	ldi	r21, 0x41	; 65
    1074:	69 81       	ldd	r22, Y+1	; 0x01
    1076:	7a 81       	ldd	r23, Y+2	; 0x02
    1078:	8b 81       	ldd	r24, Y+3	; 0x03
    107a:	9c 81       	ldd	r25, Y+4	; 0x04
    107c:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <__mulsf3>
    1080:	dc 01       	movw	r26, r24
    1082:	cb 01       	movw	r24, r22
    1084:	bc 01       	movw	r22, r24
    1086:	cd 01       	movw	r24, r26
    1088:	0e 94 c7 0a 	call	0x158e	; 0x158e <__fixunssfsi>
    108c:	dc 01       	movw	r26, r24
    108e:	cb 01       	movw	r24, r22
    1090:	9a 87       	std	Y+10, r25	; 0x0a
    1092:	89 87       	std	Y+9, r24	; 0x09
    1094:	0f c0       	rjmp	.+30     	; 0x10b4 <LCD_writeHighNibble+0x116>
    1096:	88 ec       	ldi	r24, 0xC8	; 200
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	9c 87       	std	Y+12, r25	; 0x0c
    109c:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    109e:	8b 85       	ldd	r24, Y+11	; 0x0b
    10a0:	9c 85       	ldd	r25, Y+12	; 0x0c
    10a2:	01 97       	sbiw	r24, 0x01	; 1
    10a4:	f1 f7       	brne	.-4      	; 0x10a2 <LCD_writeHighNibble+0x104>
    10a6:	9c 87       	std	Y+12, r25	; 0x0c
    10a8:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10aa:	89 85       	ldd	r24, Y+9	; 0x09
    10ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    10ae:	01 97       	sbiw	r24, 0x01	; 1
    10b0:	9a 87       	std	Y+10, r25	; 0x0a
    10b2:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10b4:	89 85       	ldd	r24, Y+9	; 0x09
    10b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    10b8:	89 2b       	or	r24, r25
    10ba:	69 f7       	brne	.-38     	; 0x1096 <LCD_writeHighNibble+0xf8>
    10bc:	14 c0       	rjmp	.+40     	; 0x10e6 <LCD_writeHighNibble+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10be:	6d 81       	ldd	r22, Y+5	; 0x05
    10c0:	7e 81       	ldd	r23, Y+6	; 0x06
    10c2:	8f 81       	ldd	r24, Y+7	; 0x07
    10c4:	98 85       	ldd	r25, Y+8	; 0x08
    10c6:	0e 94 c7 0a 	call	0x158e	; 0x158e <__fixunssfsi>
    10ca:	dc 01       	movw	r26, r24
    10cc:	cb 01       	movw	r24, r22
    10ce:	9a 87       	std	Y+10, r25	; 0x0a
    10d0:	89 87       	std	Y+9, r24	; 0x09
    10d2:	89 85       	ldd	r24, Y+9	; 0x09
    10d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    10d6:	9e 87       	std	Y+14, r25	; 0x0e
    10d8:	8d 87       	std	Y+13, r24	; 0x0d
    10da:	8d 85       	ldd	r24, Y+13	; 0x0d
    10dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    10de:	01 97       	sbiw	r24, 0x01	; 1
    10e0:	f1 f7       	brne	.-4      	; 0x10de <LCD_writeHighNibble+0x140>
    10e2:	9e 87       	std	Y+14, r25	; 0x0e
    10e4:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(1);
	DIO_voidSetPin(LCD_E_PIN,LOW);
    10e6:	60 e0       	ldi	r22, 0x00	; 0
    10e8:	82 e1       	ldi	r24, 0x12	; 18
    10ea:	0e 94 5d 00 	call	0xba	; 0xba <DIO_voidSetPin>

}
    10ee:	00 00       	nop
    10f0:	2f 96       	adiw	r28, 0x0f	; 15
    10f2:	0f b6       	in	r0, 0x3f	; 63
    10f4:	f8 94       	cli
    10f6:	de bf       	out	0x3e, r29	; 62
    10f8:	0f be       	out	0x3f, r0	; 63
    10fa:	cd bf       	out	0x3d, r28	; 61
    10fc:	df 91       	pop	r29
    10fe:	cf 91       	pop	r28
    1100:	08 95       	ret

00001102 <LCD_writeLowNibble>:

static void LCD_writeLowNibble(u8 Data){
    1102:	cf 93       	push	r28
    1104:	df 93       	push	r29
    1106:	cd b7       	in	r28, 0x3d	; 61
    1108:	de b7       	in	r29, 0x3e	; 62
    110a:	2f 97       	sbiw	r28, 0x0f	; 15
    110c:	0f b6       	in	r0, 0x3f	; 63
    110e:	f8 94       	cli
    1110:	de bf       	out	0x3e, r29	; 62
    1112:	0f be       	out	0x3f, r0	; 63
    1114:	cd bf       	out	0x3d, r28	; 61
    1116:	8f 87       	std	Y+15, r24	; 0x0f

	DIO_voidSetPin(LCD_D7_PIN,GETBIT(Data,3));
    1118:	8f 85       	ldd	r24, Y+15	; 0x0f
    111a:	86 95       	lsr	r24
    111c:	86 95       	lsr	r24
    111e:	86 95       	lsr	r24
    1120:	81 70       	andi	r24, 0x01	; 1
    1122:	68 2f       	mov	r22, r24
    1124:	86 e1       	ldi	r24, 0x16	; 22
    1126:	0e 94 5d 00 	call	0xba	; 0xba <DIO_voidSetPin>
	DIO_voidSetPin(LCD_D6_PIN,GETBIT(Data,2));
    112a:	8f 85       	ldd	r24, Y+15	; 0x0f
    112c:	86 95       	lsr	r24
    112e:	86 95       	lsr	r24
    1130:	81 70       	andi	r24, 0x01	; 1
    1132:	68 2f       	mov	r22, r24
    1134:	85 e1       	ldi	r24, 0x15	; 21
    1136:	0e 94 5d 00 	call	0xba	; 0xba <DIO_voidSetPin>
	DIO_voidSetPin(LCD_D5_PIN,GETBIT(Data,1));
    113a:	8f 85       	ldd	r24, Y+15	; 0x0f
    113c:	86 95       	lsr	r24
    113e:	81 70       	andi	r24, 0x01	; 1
    1140:	68 2f       	mov	r22, r24
    1142:	84 e1       	ldi	r24, 0x14	; 20
    1144:	0e 94 5d 00 	call	0xba	; 0xba <DIO_voidSetPin>
	DIO_voidSetPin(LCD_D4_PIN,GETBIT(Data,0));
    1148:	8f 85       	ldd	r24, Y+15	; 0x0f
    114a:	81 70       	andi	r24, 0x01	; 1
    114c:	68 2f       	mov	r22, r24
    114e:	83 e1       	ldi	r24, 0x13	; 19
    1150:	0e 94 5d 00 	call	0xba	; 0xba <DIO_voidSetPin>
	DIO_voidSetPin(LCD_RS_PIN,HIGH);
    1154:	61 e0       	ldi	r22, 0x01	; 1
    1156:	80 e1       	ldi	r24, 0x10	; 16
    1158:	0e 94 5d 00 	call	0xba	; 0xba <DIO_voidSetPin>
    115c:	80 e0       	ldi	r24, 0x00	; 0
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	a0 e8       	ldi	r26, 0x80	; 128
    1162:	bf e3       	ldi	r27, 0x3F	; 63
    1164:	89 83       	std	Y+1, r24	; 0x01
    1166:	9a 83       	std	Y+2, r25	; 0x02
    1168:	ab 83       	std	Y+3, r26	; 0x03
    116a:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    116c:	20 e0       	ldi	r18, 0x00	; 0
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	4a ef       	ldi	r20, 0xFA	; 250
    1172:	54 e4       	ldi	r21, 0x44	; 68
    1174:	69 81       	ldd	r22, Y+1	; 0x01
    1176:	7a 81       	ldd	r23, Y+2	; 0x02
    1178:	8b 81       	ldd	r24, Y+3	; 0x03
    117a:	9c 81       	ldd	r25, Y+4	; 0x04
    117c:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <__mulsf3>
    1180:	dc 01       	movw	r26, r24
    1182:	cb 01       	movw	r24, r22
    1184:	8d 83       	std	Y+5, r24	; 0x05
    1186:	9e 83       	std	Y+6, r25	; 0x06
    1188:	af 83       	std	Y+7, r26	; 0x07
    118a:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    118c:	20 e0       	ldi	r18, 0x00	; 0
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	40 e8       	ldi	r20, 0x80	; 128
    1192:	5f e3       	ldi	r21, 0x3F	; 63
    1194:	6d 81       	ldd	r22, Y+5	; 0x05
    1196:	7e 81       	ldd	r23, Y+6	; 0x06
    1198:	8f 81       	ldd	r24, Y+7	; 0x07
    119a:	98 85       	ldd	r25, Y+8	; 0x08
    119c:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <__cmpsf2>
    11a0:	88 23       	and	r24, r24
    11a2:	2c f4       	brge	.+10     	; 0x11ae <LCD_writeLowNibble+0xac>
		__ticks = 1;
    11a4:	81 e0       	ldi	r24, 0x01	; 1
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	9a 87       	std	Y+10, r25	; 0x0a
    11aa:	89 87       	std	Y+9, r24	; 0x09
    11ac:	3f c0       	rjmp	.+126    	; 0x122c <LCD_writeLowNibble+0x12a>
	else if (__tmp > 65535)
    11ae:	20 e0       	ldi	r18, 0x00	; 0
    11b0:	3f ef       	ldi	r19, 0xFF	; 255
    11b2:	4f e7       	ldi	r20, 0x7F	; 127
    11b4:	57 e4       	ldi	r21, 0x47	; 71
    11b6:	6d 81       	ldd	r22, Y+5	; 0x05
    11b8:	7e 81       	ldd	r23, Y+6	; 0x06
    11ba:	8f 81       	ldd	r24, Y+7	; 0x07
    11bc:	98 85       	ldd	r25, Y+8	; 0x08
    11be:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <__gesf2>
    11c2:	18 16       	cp	r1, r24
    11c4:	4c f5       	brge	.+82     	; 0x1218 <LCD_writeLowNibble+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11c6:	20 e0       	ldi	r18, 0x00	; 0
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	40 e2       	ldi	r20, 0x20	; 32
    11cc:	51 e4       	ldi	r21, 0x41	; 65
    11ce:	69 81       	ldd	r22, Y+1	; 0x01
    11d0:	7a 81       	ldd	r23, Y+2	; 0x02
    11d2:	8b 81       	ldd	r24, Y+3	; 0x03
    11d4:	9c 81       	ldd	r25, Y+4	; 0x04
    11d6:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <__mulsf3>
    11da:	dc 01       	movw	r26, r24
    11dc:	cb 01       	movw	r24, r22
    11de:	bc 01       	movw	r22, r24
    11e0:	cd 01       	movw	r24, r26
    11e2:	0e 94 c7 0a 	call	0x158e	; 0x158e <__fixunssfsi>
    11e6:	dc 01       	movw	r26, r24
    11e8:	cb 01       	movw	r24, r22
    11ea:	9a 87       	std	Y+10, r25	; 0x0a
    11ec:	89 87       	std	Y+9, r24	; 0x09
    11ee:	0f c0       	rjmp	.+30     	; 0x120e <LCD_writeLowNibble+0x10c>
    11f0:	88 ec       	ldi	r24, 0xC8	; 200
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	9c 87       	std	Y+12, r25	; 0x0c
    11f6:	8b 87       	std	Y+11, r24	; 0x0b
    11f8:	8b 85       	ldd	r24, Y+11	; 0x0b
    11fa:	9c 85       	ldd	r25, Y+12	; 0x0c
    11fc:	01 97       	sbiw	r24, 0x01	; 1
    11fe:	f1 f7       	brne	.-4      	; 0x11fc <LCD_writeLowNibble+0xfa>
    1200:	9c 87       	std	Y+12, r25	; 0x0c
    1202:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1204:	89 85       	ldd	r24, Y+9	; 0x09
    1206:	9a 85       	ldd	r25, Y+10	; 0x0a
    1208:	01 97       	sbiw	r24, 0x01	; 1
    120a:	9a 87       	std	Y+10, r25	; 0x0a
    120c:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    120e:	89 85       	ldd	r24, Y+9	; 0x09
    1210:	9a 85       	ldd	r25, Y+10	; 0x0a
    1212:	89 2b       	or	r24, r25
    1214:	69 f7       	brne	.-38     	; 0x11f0 <LCD_writeLowNibble+0xee>
    1216:	14 c0       	rjmp	.+40     	; 0x1240 <LCD_writeLowNibble+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1218:	6d 81       	ldd	r22, Y+5	; 0x05
    121a:	7e 81       	ldd	r23, Y+6	; 0x06
    121c:	8f 81       	ldd	r24, Y+7	; 0x07
    121e:	98 85       	ldd	r25, Y+8	; 0x08
    1220:	0e 94 c7 0a 	call	0x158e	; 0x158e <__fixunssfsi>
    1224:	dc 01       	movw	r26, r24
    1226:	cb 01       	movw	r24, r22
    1228:	9a 87       	std	Y+10, r25	; 0x0a
    122a:	89 87       	std	Y+9, r24	; 0x09
    122c:	89 85       	ldd	r24, Y+9	; 0x09
    122e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1230:	9e 87       	std	Y+14, r25	; 0x0e
    1232:	8d 87       	std	Y+13, r24	; 0x0d
    1234:	8d 85       	ldd	r24, Y+13	; 0x0d
    1236:	9e 85       	ldd	r25, Y+14	; 0x0e
    1238:	01 97       	sbiw	r24, 0x01	; 1
    123a:	f1 f7       	brne	.-4      	; 0x1238 <LCD_writeLowNibble+0x136>
    123c:	9e 87       	std	Y+14, r25	; 0x0e
    123e:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(1);
	DIO_voidSetPin(LCD_E_PIN,LOW);
    1240:	60 e0       	ldi	r22, 0x00	; 0
    1242:	82 e1       	ldi	r24, 0x12	; 18
    1244:	0e 94 5d 00 	call	0xba	; 0xba <DIO_voidSetPin>



}
    1248:	00 00       	nop
    124a:	2f 96       	adiw	r28, 0x0f	; 15
    124c:	0f b6       	in	r0, 0x3f	; 63
    124e:	f8 94       	cli
    1250:	de bf       	out	0x3e, r29	; 62
    1252:	0f be       	out	0x3f, r0	; 63
    1254:	cd bf       	out	0x3d, r28	; 61
    1256:	df 91       	pop	r29
    1258:	cf 91       	pop	r28
    125a:	08 95       	ret

0000125c <LCD_voidWriteString>:
void LCD_voidWriteString(u8 *x){
    125c:	cf 93       	push	r28
    125e:	df 93       	push	r29
    1260:	00 d0       	rcall	.+0      	; 0x1262 <LCD_voidWriteString+0x6>
    1262:	1f 92       	push	r1
    1264:	cd b7       	in	r28, 0x3d	; 61
    1266:	de b7       	in	r29, 0x3e	; 62
    1268:	9b 83       	std	Y+3, r25	; 0x03
    126a:	8a 83       	std	Y+2, r24	; 0x02

	u8 i =0 ;
    126c:	19 82       	std	Y+1, r1	; 0x01
	while(x[i]!='\0'){
    126e:	0e c0       	rjmp	.+28     	; 0x128c <LCD_voidWriteString+0x30>
		LCD_voidWriteData(x[i]);
    1270:	89 81       	ldd	r24, Y+1	; 0x01
    1272:	88 2f       	mov	r24, r24
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	2a 81       	ldd	r18, Y+2	; 0x02
    1278:	3b 81       	ldd	r19, Y+3	; 0x03
    127a:	82 0f       	add	r24, r18
    127c:	93 1f       	adc	r25, r19
    127e:	fc 01       	movw	r30, r24
    1280:	80 81       	ld	r24, Z
    1282:	0e 94 85 07 	call	0xf0a	; 0xf0a <LCD_voidWriteData>
		i++;
    1286:	89 81       	ldd	r24, Y+1	; 0x01
    1288:	8f 5f       	subi	r24, 0xFF	; 255
    128a:	89 83       	std	Y+1, r24	; 0x01

}
void LCD_voidWriteString(u8 *x){

	u8 i =0 ;
	while(x[i]!='\0'){
    128c:	89 81       	ldd	r24, Y+1	; 0x01
    128e:	88 2f       	mov	r24, r24
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	2a 81       	ldd	r18, Y+2	; 0x02
    1294:	3b 81       	ldd	r19, Y+3	; 0x03
    1296:	82 0f       	add	r24, r18
    1298:	93 1f       	adc	r25, r19
    129a:	fc 01       	movw	r30, r24
    129c:	80 81       	ld	r24, Z
    129e:	88 23       	and	r24, r24
    12a0:	39 f7       	brne	.-50     	; 0x1270 <LCD_voidWriteString+0x14>
		LCD_voidWriteData(x[i]);
		i++;
	}


}
    12a2:	00 00       	nop
    12a4:	0f 90       	pop	r0
    12a6:	0f 90       	pop	r0
    12a8:	0f 90       	pop	r0
    12aa:	df 91       	pop	r29
    12ac:	cf 91       	pop	r28
    12ae:	08 95       	ret

000012b0 <main>:
#include "BIT_MATH.h"
#include "DIO_int.h"
#include "LCD_int.h"
#include "avr/delay.h"

int main(void){
    12b0:	cf 93       	push	r28
    12b2:	df 93       	push	r29
    12b4:	cd b7       	in	r28, 0x3d	; 61
    12b6:	de b7       	in	r29, 0x3e	; 62
    12b8:	66 97       	sbiw	r28, 0x16	; 22
    12ba:	0f b6       	in	r0, 0x3f	; 63
    12bc:	f8 94       	cli
    12be:	de bf       	out	0x3e, r29	; 62
    12c0:	0f be       	out	0x3f, r0	; 63
    12c2:	cd bf       	out	0x3d, r28	; 61

	LCD_voidInitialize();
    12c4:	0e 94 43 02 	call	0x486	; 0x486 <LCD_voidInitialize>
	u8 test[] = "TESTING";
    12c8:	88 e0       	ldi	r24, 0x08	; 8
    12ca:	e0 e6       	ldi	r30, 0x60	; 96
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	de 01       	movw	r26, r28
    12d0:	1f 96       	adiw	r26, 0x0f	; 15
    12d2:	01 90       	ld	r0, Z+
    12d4:	0d 92       	st	X+, r0
    12d6:	8a 95       	dec	r24
    12d8:	e1 f7       	brne	.-8      	; 0x12d2 <main+0x22>

	while(1){
		LCD_voidWriteData('m');
    12da:	8d e6       	ldi	r24, 0x6D	; 109
    12dc:	0e 94 85 07 	call	0xf0a	; 0xf0a <LCD_voidWriteData>
    12e0:	80 e0       	ldi	r24, 0x00	; 0
    12e2:	90 e4       	ldi	r25, 0x40	; 64
    12e4:	ac e9       	ldi	r26, 0x9C	; 156
    12e6:	b5 e4       	ldi	r27, 0x45	; 69
    12e8:	89 83       	std	Y+1, r24	; 0x01
    12ea:	9a 83       	std	Y+2, r25	; 0x02
    12ec:	ab 83       	std	Y+3, r26	; 0x03
    12ee:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    12f0:	20 e0       	ldi	r18, 0x00	; 0
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	4a ef       	ldi	r20, 0xFA	; 250
    12f6:	54 e4       	ldi	r21, 0x44	; 68
    12f8:	69 81       	ldd	r22, Y+1	; 0x01
    12fa:	7a 81       	ldd	r23, Y+2	; 0x02
    12fc:	8b 81       	ldd	r24, Y+3	; 0x03
    12fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1300:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <__mulsf3>
    1304:	dc 01       	movw	r26, r24
    1306:	cb 01       	movw	r24, r22
    1308:	8d 83       	std	Y+5, r24	; 0x05
    130a:	9e 83       	std	Y+6, r25	; 0x06
    130c:	af 83       	std	Y+7, r26	; 0x07
    130e:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1310:	20 e0       	ldi	r18, 0x00	; 0
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	40 e8       	ldi	r20, 0x80	; 128
    1316:	5f e3       	ldi	r21, 0x3F	; 63
    1318:	6d 81       	ldd	r22, Y+5	; 0x05
    131a:	7e 81       	ldd	r23, Y+6	; 0x06
    131c:	8f 81       	ldd	r24, Y+7	; 0x07
    131e:	98 85       	ldd	r25, Y+8	; 0x08
    1320:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <__cmpsf2>
    1324:	88 23       	and	r24, r24
    1326:	2c f4       	brge	.+10     	; 0x1332 <main+0x82>
		__ticks = 1;
    1328:	81 e0       	ldi	r24, 0x01	; 1
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	9a 87       	std	Y+10, r25	; 0x0a
    132e:	89 87       	std	Y+9, r24	; 0x09
    1330:	3f c0       	rjmp	.+126    	; 0x13b0 <main+0x100>
	else if (__tmp > 65535)
    1332:	20 e0       	ldi	r18, 0x00	; 0
    1334:	3f ef       	ldi	r19, 0xFF	; 255
    1336:	4f e7       	ldi	r20, 0x7F	; 127
    1338:	57 e4       	ldi	r21, 0x47	; 71
    133a:	6d 81       	ldd	r22, Y+5	; 0x05
    133c:	7e 81       	ldd	r23, Y+6	; 0x06
    133e:	8f 81       	ldd	r24, Y+7	; 0x07
    1340:	98 85       	ldd	r25, Y+8	; 0x08
    1342:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <__gesf2>
    1346:	18 16       	cp	r1, r24
    1348:	4c f5       	brge	.+82     	; 0x139c <main+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    134a:	20 e0       	ldi	r18, 0x00	; 0
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	40 e2       	ldi	r20, 0x20	; 32
    1350:	51 e4       	ldi	r21, 0x41	; 65
    1352:	69 81       	ldd	r22, Y+1	; 0x01
    1354:	7a 81       	ldd	r23, Y+2	; 0x02
    1356:	8b 81       	ldd	r24, Y+3	; 0x03
    1358:	9c 81       	ldd	r25, Y+4	; 0x04
    135a:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <__mulsf3>
    135e:	dc 01       	movw	r26, r24
    1360:	cb 01       	movw	r24, r22
    1362:	bc 01       	movw	r22, r24
    1364:	cd 01       	movw	r24, r26
    1366:	0e 94 c7 0a 	call	0x158e	; 0x158e <__fixunssfsi>
    136a:	dc 01       	movw	r26, r24
    136c:	cb 01       	movw	r24, r22
    136e:	9a 87       	std	Y+10, r25	; 0x0a
    1370:	89 87       	std	Y+9, r24	; 0x09
    1372:	0f c0       	rjmp	.+30     	; 0x1392 <main+0xe2>
    1374:	88 ec       	ldi	r24, 0xC8	; 200
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	9c 87       	std	Y+12, r25	; 0x0c
    137a:	8b 87       	std	Y+11, r24	; 0x0b
    137c:	8b 85       	ldd	r24, Y+11	; 0x0b
    137e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1380:	01 97       	sbiw	r24, 0x01	; 1
    1382:	f1 f7       	brne	.-4      	; 0x1380 <main+0xd0>
    1384:	9c 87       	std	Y+12, r25	; 0x0c
    1386:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1388:	89 85       	ldd	r24, Y+9	; 0x09
    138a:	9a 85       	ldd	r25, Y+10	; 0x0a
    138c:	01 97       	sbiw	r24, 0x01	; 1
    138e:	9a 87       	std	Y+10, r25	; 0x0a
    1390:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1392:	89 85       	ldd	r24, Y+9	; 0x09
    1394:	9a 85       	ldd	r25, Y+10	; 0x0a
    1396:	89 2b       	or	r24, r25
    1398:	69 f7       	brne	.-38     	; 0x1374 <main+0xc4>
    139a:	14 c0       	rjmp	.+40     	; 0x13c4 <main+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    139c:	6d 81       	ldd	r22, Y+5	; 0x05
    139e:	7e 81       	ldd	r23, Y+6	; 0x06
    13a0:	8f 81       	ldd	r24, Y+7	; 0x07
    13a2:	98 85       	ldd	r25, Y+8	; 0x08
    13a4:	0e 94 c7 0a 	call	0x158e	; 0x158e <__fixunssfsi>
    13a8:	dc 01       	movw	r26, r24
    13aa:	cb 01       	movw	r24, r22
    13ac:	9a 87       	std	Y+10, r25	; 0x0a
    13ae:	89 87       	std	Y+9, r24	; 0x09
    13b0:	89 85       	ldd	r24, Y+9	; 0x09
    13b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    13b4:	9e 87       	std	Y+14, r25	; 0x0e
    13b6:	8d 87       	std	Y+13, r24	; 0x0d
    13b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    13ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    13bc:	01 97       	sbiw	r24, 0x01	; 1
    13be:	f1 f7       	brne	.-4      	; 0x13bc <main+0x10c>
    13c0:	9e 87       	std	Y+14, r25	; 0x0e
    13c2:	8d 87       	std	Y+13, r24	; 0x0d
		_delay_ms(5000);
		//

	}
    13c4:	8a cf       	rjmp	.-236    	; 0x12da <main+0x2a>

000013c6 <__subsf3>:
    13c6:	50 58       	subi	r21, 0x80	; 128

000013c8 <__addsf3>:
    13c8:	bb 27       	eor	r27, r27
    13ca:	aa 27       	eor	r26, r26
    13cc:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <__addsf3x>
    13d0:	0c 94 31 0b 	jmp	0x1662	; 0x1662 <__fp_round>
    13d4:	0e 94 23 0b 	call	0x1646	; 0x1646 <__fp_pscA>
    13d8:	38 f0       	brcs	.+14     	; 0x13e8 <__addsf3+0x20>
    13da:	0e 94 2a 0b 	call	0x1654	; 0x1654 <__fp_pscB>
    13de:	20 f0       	brcs	.+8      	; 0x13e8 <__addsf3+0x20>
    13e0:	39 f4       	brne	.+14     	; 0x13f0 <__addsf3+0x28>
    13e2:	9f 3f       	cpi	r25, 0xFF	; 255
    13e4:	19 f4       	brne	.+6      	; 0x13ec <__addsf3+0x24>
    13e6:	26 f4       	brtc	.+8      	; 0x13f0 <__addsf3+0x28>
    13e8:	0c 94 20 0b 	jmp	0x1640	; 0x1640 <__fp_nan>
    13ec:	0e f4       	brtc	.+2      	; 0x13f0 <__addsf3+0x28>
    13ee:	e0 95       	com	r30
    13f0:	e7 fb       	bst	r30, 7
    13f2:	0c 94 1a 0b 	jmp	0x1634	; 0x1634 <__fp_inf>

000013f6 <__addsf3x>:
    13f6:	e9 2f       	mov	r30, r25
    13f8:	0e 94 42 0b 	call	0x1684	; 0x1684 <__fp_split3>
    13fc:	58 f3       	brcs	.-42     	; 0x13d4 <__addsf3+0xc>
    13fe:	ba 17       	cp	r27, r26
    1400:	62 07       	cpc	r22, r18
    1402:	73 07       	cpc	r23, r19
    1404:	84 07       	cpc	r24, r20
    1406:	95 07       	cpc	r25, r21
    1408:	20 f0       	brcs	.+8      	; 0x1412 <__addsf3x+0x1c>
    140a:	79 f4       	brne	.+30     	; 0x142a <__addsf3x+0x34>
    140c:	a6 f5       	brtc	.+104    	; 0x1476 <__addsf3x+0x80>
    140e:	0c 94 64 0b 	jmp	0x16c8	; 0x16c8 <__fp_zero>
    1412:	0e f4       	brtc	.+2      	; 0x1416 <__addsf3x+0x20>
    1414:	e0 95       	com	r30
    1416:	0b 2e       	mov	r0, r27
    1418:	ba 2f       	mov	r27, r26
    141a:	a0 2d       	mov	r26, r0
    141c:	0b 01       	movw	r0, r22
    141e:	b9 01       	movw	r22, r18
    1420:	90 01       	movw	r18, r0
    1422:	0c 01       	movw	r0, r24
    1424:	ca 01       	movw	r24, r20
    1426:	a0 01       	movw	r20, r0
    1428:	11 24       	eor	r1, r1
    142a:	ff 27       	eor	r31, r31
    142c:	59 1b       	sub	r21, r25
    142e:	99 f0       	breq	.+38     	; 0x1456 <__addsf3x+0x60>
    1430:	59 3f       	cpi	r21, 0xF9	; 249
    1432:	50 f4       	brcc	.+20     	; 0x1448 <__addsf3x+0x52>
    1434:	50 3e       	cpi	r21, 0xE0	; 224
    1436:	68 f1       	brcs	.+90     	; 0x1492 <__addsf3x+0x9c>
    1438:	1a 16       	cp	r1, r26
    143a:	f0 40       	sbci	r31, 0x00	; 0
    143c:	a2 2f       	mov	r26, r18
    143e:	23 2f       	mov	r18, r19
    1440:	34 2f       	mov	r19, r20
    1442:	44 27       	eor	r20, r20
    1444:	58 5f       	subi	r21, 0xF8	; 248
    1446:	f3 cf       	rjmp	.-26     	; 0x142e <__addsf3x+0x38>
    1448:	46 95       	lsr	r20
    144a:	37 95       	ror	r19
    144c:	27 95       	ror	r18
    144e:	a7 95       	ror	r26
    1450:	f0 40       	sbci	r31, 0x00	; 0
    1452:	53 95       	inc	r21
    1454:	c9 f7       	brne	.-14     	; 0x1448 <__addsf3x+0x52>
    1456:	7e f4       	brtc	.+30     	; 0x1476 <__addsf3x+0x80>
    1458:	1f 16       	cp	r1, r31
    145a:	ba 0b       	sbc	r27, r26
    145c:	62 0b       	sbc	r22, r18
    145e:	73 0b       	sbc	r23, r19
    1460:	84 0b       	sbc	r24, r20
    1462:	ba f0       	brmi	.+46     	; 0x1492 <__addsf3x+0x9c>
    1464:	91 50       	subi	r25, 0x01	; 1
    1466:	a1 f0       	breq	.+40     	; 0x1490 <__addsf3x+0x9a>
    1468:	ff 0f       	add	r31, r31
    146a:	bb 1f       	adc	r27, r27
    146c:	66 1f       	adc	r22, r22
    146e:	77 1f       	adc	r23, r23
    1470:	88 1f       	adc	r24, r24
    1472:	c2 f7       	brpl	.-16     	; 0x1464 <__addsf3x+0x6e>
    1474:	0e c0       	rjmp	.+28     	; 0x1492 <__addsf3x+0x9c>
    1476:	ba 0f       	add	r27, r26
    1478:	62 1f       	adc	r22, r18
    147a:	73 1f       	adc	r23, r19
    147c:	84 1f       	adc	r24, r20
    147e:	48 f4       	brcc	.+18     	; 0x1492 <__addsf3x+0x9c>
    1480:	87 95       	ror	r24
    1482:	77 95       	ror	r23
    1484:	67 95       	ror	r22
    1486:	b7 95       	ror	r27
    1488:	f7 95       	ror	r31
    148a:	9e 3f       	cpi	r25, 0xFE	; 254
    148c:	08 f0       	brcs	.+2      	; 0x1490 <__addsf3x+0x9a>
    148e:	b0 cf       	rjmp	.-160    	; 0x13f0 <__addsf3+0x28>
    1490:	93 95       	inc	r25
    1492:	88 0f       	add	r24, r24
    1494:	08 f0       	brcs	.+2      	; 0x1498 <__addsf3x+0xa2>
    1496:	99 27       	eor	r25, r25
    1498:	ee 0f       	add	r30, r30
    149a:	97 95       	ror	r25
    149c:	87 95       	ror	r24
    149e:	08 95       	ret

000014a0 <__cmpsf2>:
    14a0:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <__fp_cmp>
    14a4:	08 f4       	brcc	.+2      	; 0x14a8 <__cmpsf2+0x8>
    14a6:	81 e0       	ldi	r24, 0x01	; 1
    14a8:	08 95       	ret

000014aa <__divsf3>:
    14aa:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <__divsf3x>
    14ae:	0c 94 31 0b 	jmp	0x1662	; 0x1662 <__fp_round>
    14b2:	0e 94 2a 0b 	call	0x1654	; 0x1654 <__fp_pscB>
    14b6:	58 f0       	brcs	.+22     	; 0x14ce <__divsf3+0x24>
    14b8:	0e 94 23 0b 	call	0x1646	; 0x1646 <__fp_pscA>
    14bc:	40 f0       	brcs	.+16     	; 0x14ce <__divsf3+0x24>
    14be:	29 f4       	brne	.+10     	; 0x14ca <__divsf3+0x20>
    14c0:	5f 3f       	cpi	r21, 0xFF	; 255
    14c2:	29 f0       	breq	.+10     	; 0x14ce <__divsf3+0x24>
    14c4:	0c 94 1a 0b 	jmp	0x1634	; 0x1634 <__fp_inf>
    14c8:	51 11       	cpse	r21, r1
    14ca:	0c 94 65 0b 	jmp	0x16ca	; 0x16ca <__fp_szero>
    14ce:	0c 94 20 0b 	jmp	0x1640	; 0x1640 <__fp_nan>

000014d2 <__divsf3x>:
    14d2:	0e 94 42 0b 	call	0x1684	; 0x1684 <__fp_split3>
    14d6:	68 f3       	brcs	.-38     	; 0x14b2 <__divsf3+0x8>

000014d8 <__divsf3_pse>:
    14d8:	99 23       	and	r25, r25
    14da:	b1 f3       	breq	.-20     	; 0x14c8 <__divsf3+0x1e>
    14dc:	55 23       	and	r21, r21
    14de:	91 f3       	breq	.-28     	; 0x14c4 <__divsf3+0x1a>
    14e0:	95 1b       	sub	r25, r21
    14e2:	55 0b       	sbc	r21, r21
    14e4:	bb 27       	eor	r27, r27
    14e6:	aa 27       	eor	r26, r26
    14e8:	62 17       	cp	r22, r18
    14ea:	73 07       	cpc	r23, r19
    14ec:	84 07       	cpc	r24, r20
    14ee:	38 f0       	brcs	.+14     	; 0x14fe <__divsf3_pse+0x26>
    14f0:	9f 5f       	subi	r25, 0xFF	; 255
    14f2:	5f 4f       	sbci	r21, 0xFF	; 255
    14f4:	22 0f       	add	r18, r18
    14f6:	33 1f       	adc	r19, r19
    14f8:	44 1f       	adc	r20, r20
    14fa:	aa 1f       	adc	r26, r26
    14fc:	a9 f3       	breq	.-22     	; 0x14e8 <__divsf3_pse+0x10>
    14fe:	35 d0       	rcall	.+106    	; 0x156a <__divsf3_pse+0x92>
    1500:	0e 2e       	mov	r0, r30
    1502:	3a f0       	brmi	.+14     	; 0x1512 <__divsf3_pse+0x3a>
    1504:	e0 e8       	ldi	r30, 0x80	; 128
    1506:	32 d0       	rcall	.+100    	; 0x156c <__divsf3_pse+0x94>
    1508:	91 50       	subi	r25, 0x01	; 1
    150a:	50 40       	sbci	r21, 0x00	; 0
    150c:	e6 95       	lsr	r30
    150e:	00 1c       	adc	r0, r0
    1510:	ca f7       	brpl	.-14     	; 0x1504 <__divsf3_pse+0x2c>
    1512:	2b d0       	rcall	.+86     	; 0x156a <__divsf3_pse+0x92>
    1514:	fe 2f       	mov	r31, r30
    1516:	29 d0       	rcall	.+82     	; 0x156a <__divsf3_pse+0x92>
    1518:	66 0f       	add	r22, r22
    151a:	77 1f       	adc	r23, r23
    151c:	88 1f       	adc	r24, r24
    151e:	bb 1f       	adc	r27, r27
    1520:	26 17       	cp	r18, r22
    1522:	37 07       	cpc	r19, r23
    1524:	48 07       	cpc	r20, r24
    1526:	ab 07       	cpc	r26, r27
    1528:	b0 e8       	ldi	r27, 0x80	; 128
    152a:	09 f0       	breq	.+2      	; 0x152e <__divsf3_pse+0x56>
    152c:	bb 0b       	sbc	r27, r27
    152e:	80 2d       	mov	r24, r0
    1530:	bf 01       	movw	r22, r30
    1532:	ff 27       	eor	r31, r31
    1534:	93 58       	subi	r25, 0x83	; 131
    1536:	5f 4f       	sbci	r21, 0xFF	; 255
    1538:	3a f0       	brmi	.+14     	; 0x1548 <__divsf3_pse+0x70>
    153a:	9e 3f       	cpi	r25, 0xFE	; 254
    153c:	51 05       	cpc	r21, r1
    153e:	78 f0       	brcs	.+30     	; 0x155e <__divsf3_pse+0x86>
    1540:	0c 94 1a 0b 	jmp	0x1634	; 0x1634 <__fp_inf>
    1544:	0c 94 65 0b 	jmp	0x16ca	; 0x16ca <__fp_szero>
    1548:	5f 3f       	cpi	r21, 0xFF	; 255
    154a:	e4 f3       	brlt	.-8      	; 0x1544 <__divsf3_pse+0x6c>
    154c:	98 3e       	cpi	r25, 0xE8	; 232
    154e:	d4 f3       	brlt	.-12     	; 0x1544 <__divsf3_pse+0x6c>
    1550:	86 95       	lsr	r24
    1552:	77 95       	ror	r23
    1554:	67 95       	ror	r22
    1556:	b7 95       	ror	r27
    1558:	f7 95       	ror	r31
    155a:	9f 5f       	subi	r25, 0xFF	; 255
    155c:	c9 f7       	brne	.-14     	; 0x1550 <__divsf3_pse+0x78>
    155e:	88 0f       	add	r24, r24
    1560:	91 1d       	adc	r25, r1
    1562:	96 95       	lsr	r25
    1564:	87 95       	ror	r24
    1566:	97 f9       	bld	r25, 7
    1568:	08 95       	ret
    156a:	e1 e0       	ldi	r30, 0x01	; 1
    156c:	66 0f       	add	r22, r22
    156e:	77 1f       	adc	r23, r23
    1570:	88 1f       	adc	r24, r24
    1572:	bb 1f       	adc	r27, r27
    1574:	62 17       	cp	r22, r18
    1576:	73 07       	cpc	r23, r19
    1578:	84 07       	cpc	r24, r20
    157a:	ba 07       	cpc	r27, r26
    157c:	20 f0       	brcs	.+8      	; 0x1586 <__divsf3_pse+0xae>
    157e:	62 1b       	sub	r22, r18
    1580:	73 0b       	sbc	r23, r19
    1582:	84 0b       	sbc	r24, r20
    1584:	ba 0b       	sbc	r27, r26
    1586:	ee 1f       	adc	r30, r30
    1588:	88 f7       	brcc	.-30     	; 0x156c <__divsf3_pse+0x94>
    158a:	e0 95       	com	r30
    158c:	08 95       	ret

0000158e <__fixunssfsi>:
    158e:	0e 94 4a 0b 	call	0x1694	; 0x1694 <__fp_splitA>
    1592:	88 f0       	brcs	.+34     	; 0x15b6 <__fixunssfsi+0x28>
    1594:	9f 57       	subi	r25, 0x7F	; 127
    1596:	98 f0       	brcs	.+38     	; 0x15be <__fixunssfsi+0x30>
    1598:	b9 2f       	mov	r27, r25
    159a:	99 27       	eor	r25, r25
    159c:	b7 51       	subi	r27, 0x17	; 23
    159e:	b0 f0       	brcs	.+44     	; 0x15cc <__fixunssfsi+0x3e>
    15a0:	e1 f0       	breq	.+56     	; 0x15da <__fixunssfsi+0x4c>
    15a2:	66 0f       	add	r22, r22
    15a4:	77 1f       	adc	r23, r23
    15a6:	88 1f       	adc	r24, r24
    15a8:	99 1f       	adc	r25, r25
    15aa:	1a f0       	brmi	.+6      	; 0x15b2 <__fixunssfsi+0x24>
    15ac:	ba 95       	dec	r27
    15ae:	c9 f7       	brne	.-14     	; 0x15a2 <__fixunssfsi+0x14>
    15b0:	14 c0       	rjmp	.+40     	; 0x15da <__fixunssfsi+0x4c>
    15b2:	b1 30       	cpi	r27, 0x01	; 1
    15b4:	91 f0       	breq	.+36     	; 0x15da <__fixunssfsi+0x4c>
    15b6:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <__fp_zero>
    15ba:	b1 e0       	ldi	r27, 0x01	; 1
    15bc:	08 95       	ret
    15be:	0c 94 64 0b 	jmp	0x16c8	; 0x16c8 <__fp_zero>
    15c2:	67 2f       	mov	r22, r23
    15c4:	78 2f       	mov	r23, r24
    15c6:	88 27       	eor	r24, r24
    15c8:	b8 5f       	subi	r27, 0xF8	; 248
    15ca:	39 f0       	breq	.+14     	; 0x15da <__fixunssfsi+0x4c>
    15cc:	b9 3f       	cpi	r27, 0xF9	; 249
    15ce:	cc f3       	brlt	.-14     	; 0x15c2 <__fixunssfsi+0x34>
    15d0:	86 95       	lsr	r24
    15d2:	77 95       	ror	r23
    15d4:	67 95       	ror	r22
    15d6:	b3 95       	inc	r27
    15d8:	d9 f7       	brne	.-10     	; 0x15d0 <__fixunssfsi+0x42>
    15da:	3e f4       	brtc	.+14     	; 0x15ea <__fixunssfsi+0x5c>
    15dc:	90 95       	com	r25
    15de:	80 95       	com	r24
    15e0:	70 95       	com	r23
    15e2:	61 95       	neg	r22
    15e4:	7f 4f       	sbci	r23, 0xFF	; 255
    15e6:	8f 4f       	sbci	r24, 0xFF	; 255
    15e8:	9f 4f       	sbci	r25, 0xFF	; 255
    15ea:	08 95       	ret

000015ec <__fp_cmp>:
    15ec:	99 0f       	add	r25, r25
    15ee:	00 08       	sbc	r0, r0
    15f0:	55 0f       	add	r21, r21
    15f2:	aa 0b       	sbc	r26, r26
    15f4:	e0 e8       	ldi	r30, 0x80	; 128
    15f6:	fe ef       	ldi	r31, 0xFE	; 254
    15f8:	16 16       	cp	r1, r22
    15fa:	17 06       	cpc	r1, r23
    15fc:	e8 07       	cpc	r30, r24
    15fe:	f9 07       	cpc	r31, r25
    1600:	c0 f0       	brcs	.+48     	; 0x1632 <__fp_cmp+0x46>
    1602:	12 16       	cp	r1, r18
    1604:	13 06       	cpc	r1, r19
    1606:	e4 07       	cpc	r30, r20
    1608:	f5 07       	cpc	r31, r21
    160a:	98 f0       	brcs	.+38     	; 0x1632 <__fp_cmp+0x46>
    160c:	62 1b       	sub	r22, r18
    160e:	73 0b       	sbc	r23, r19
    1610:	84 0b       	sbc	r24, r20
    1612:	95 0b       	sbc	r25, r21
    1614:	39 f4       	brne	.+14     	; 0x1624 <__fp_cmp+0x38>
    1616:	0a 26       	eor	r0, r26
    1618:	61 f0       	breq	.+24     	; 0x1632 <__fp_cmp+0x46>
    161a:	23 2b       	or	r18, r19
    161c:	24 2b       	or	r18, r20
    161e:	25 2b       	or	r18, r21
    1620:	21 f4       	brne	.+8      	; 0x162a <__fp_cmp+0x3e>
    1622:	08 95       	ret
    1624:	0a 26       	eor	r0, r26
    1626:	09 f4       	brne	.+2      	; 0x162a <__fp_cmp+0x3e>
    1628:	a1 40       	sbci	r26, 0x01	; 1
    162a:	a6 95       	lsr	r26
    162c:	8f ef       	ldi	r24, 0xFF	; 255
    162e:	81 1d       	adc	r24, r1
    1630:	81 1d       	adc	r24, r1
    1632:	08 95       	ret

00001634 <__fp_inf>:
    1634:	97 f9       	bld	r25, 7
    1636:	9f 67       	ori	r25, 0x7F	; 127
    1638:	80 e8       	ldi	r24, 0x80	; 128
    163a:	70 e0       	ldi	r23, 0x00	; 0
    163c:	60 e0       	ldi	r22, 0x00	; 0
    163e:	08 95       	ret

00001640 <__fp_nan>:
    1640:	9f ef       	ldi	r25, 0xFF	; 255
    1642:	80 ec       	ldi	r24, 0xC0	; 192
    1644:	08 95       	ret

00001646 <__fp_pscA>:
    1646:	00 24       	eor	r0, r0
    1648:	0a 94       	dec	r0
    164a:	16 16       	cp	r1, r22
    164c:	17 06       	cpc	r1, r23
    164e:	18 06       	cpc	r1, r24
    1650:	09 06       	cpc	r0, r25
    1652:	08 95       	ret

00001654 <__fp_pscB>:
    1654:	00 24       	eor	r0, r0
    1656:	0a 94       	dec	r0
    1658:	12 16       	cp	r1, r18
    165a:	13 06       	cpc	r1, r19
    165c:	14 06       	cpc	r1, r20
    165e:	05 06       	cpc	r0, r21
    1660:	08 95       	ret

00001662 <__fp_round>:
    1662:	09 2e       	mov	r0, r25
    1664:	03 94       	inc	r0
    1666:	00 0c       	add	r0, r0
    1668:	11 f4       	brne	.+4      	; 0x166e <__fp_round+0xc>
    166a:	88 23       	and	r24, r24
    166c:	52 f0       	brmi	.+20     	; 0x1682 <__fp_round+0x20>
    166e:	bb 0f       	add	r27, r27
    1670:	40 f4       	brcc	.+16     	; 0x1682 <__fp_round+0x20>
    1672:	bf 2b       	or	r27, r31
    1674:	11 f4       	brne	.+4      	; 0x167a <__fp_round+0x18>
    1676:	60 ff       	sbrs	r22, 0
    1678:	04 c0       	rjmp	.+8      	; 0x1682 <__fp_round+0x20>
    167a:	6f 5f       	subi	r22, 0xFF	; 255
    167c:	7f 4f       	sbci	r23, 0xFF	; 255
    167e:	8f 4f       	sbci	r24, 0xFF	; 255
    1680:	9f 4f       	sbci	r25, 0xFF	; 255
    1682:	08 95       	ret

00001684 <__fp_split3>:
    1684:	57 fd       	sbrc	r21, 7
    1686:	90 58       	subi	r25, 0x80	; 128
    1688:	44 0f       	add	r20, r20
    168a:	55 1f       	adc	r21, r21
    168c:	59 f0       	breq	.+22     	; 0x16a4 <__fp_splitA+0x10>
    168e:	5f 3f       	cpi	r21, 0xFF	; 255
    1690:	71 f0       	breq	.+28     	; 0x16ae <__fp_splitA+0x1a>
    1692:	47 95       	ror	r20

00001694 <__fp_splitA>:
    1694:	88 0f       	add	r24, r24
    1696:	97 fb       	bst	r25, 7
    1698:	99 1f       	adc	r25, r25
    169a:	61 f0       	breq	.+24     	; 0x16b4 <__fp_splitA+0x20>
    169c:	9f 3f       	cpi	r25, 0xFF	; 255
    169e:	79 f0       	breq	.+30     	; 0x16be <__fp_splitA+0x2a>
    16a0:	87 95       	ror	r24
    16a2:	08 95       	ret
    16a4:	12 16       	cp	r1, r18
    16a6:	13 06       	cpc	r1, r19
    16a8:	14 06       	cpc	r1, r20
    16aa:	55 1f       	adc	r21, r21
    16ac:	f2 cf       	rjmp	.-28     	; 0x1692 <__fp_split3+0xe>
    16ae:	46 95       	lsr	r20
    16b0:	f1 df       	rcall	.-30     	; 0x1694 <__fp_splitA>
    16b2:	08 c0       	rjmp	.+16     	; 0x16c4 <__fp_splitA+0x30>
    16b4:	16 16       	cp	r1, r22
    16b6:	17 06       	cpc	r1, r23
    16b8:	18 06       	cpc	r1, r24
    16ba:	99 1f       	adc	r25, r25
    16bc:	f1 cf       	rjmp	.-30     	; 0x16a0 <__fp_splitA+0xc>
    16be:	86 95       	lsr	r24
    16c0:	71 05       	cpc	r23, r1
    16c2:	61 05       	cpc	r22, r1
    16c4:	08 94       	sec
    16c6:	08 95       	ret

000016c8 <__fp_zero>:
    16c8:	e8 94       	clt

000016ca <__fp_szero>:
    16ca:	bb 27       	eor	r27, r27
    16cc:	66 27       	eor	r22, r22
    16ce:	77 27       	eor	r23, r23
    16d0:	cb 01       	movw	r24, r22
    16d2:	97 f9       	bld	r25, 7
    16d4:	08 95       	ret

000016d6 <__gesf2>:
    16d6:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <__fp_cmp>
    16da:	08 f4       	brcc	.+2      	; 0x16de <__gesf2+0x8>
    16dc:	8f ef       	ldi	r24, 0xFF	; 255
    16de:	08 95       	ret

000016e0 <__mulsf3>:
    16e0:	0e 94 83 0b 	call	0x1706	; 0x1706 <__mulsf3x>
    16e4:	0c 94 31 0b 	jmp	0x1662	; 0x1662 <__fp_round>
    16e8:	0e 94 23 0b 	call	0x1646	; 0x1646 <__fp_pscA>
    16ec:	38 f0       	brcs	.+14     	; 0x16fc <__mulsf3+0x1c>
    16ee:	0e 94 2a 0b 	call	0x1654	; 0x1654 <__fp_pscB>
    16f2:	20 f0       	brcs	.+8      	; 0x16fc <__mulsf3+0x1c>
    16f4:	95 23       	and	r25, r21
    16f6:	11 f0       	breq	.+4      	; 0x16fc <__mulsf3+0x1c>
    16f8:	0c 94 1a 0b 	jmp	0x1634	; 0x1634 <__fp_inf>
    16fc:	0c 94 20 0b 	jmp	0x1640	; 0x1640 <__fp_nan>
    1700:	11 24       	eor	r1, r1
    1702:	0c 94 65 0b 	jmp	0x16ca	; 0x16ca <__fp_szero>

00001706 <__mulsf3x>:
    1706:	0e 94 42 0b 	call	0x1684	; 0x1684 <__fp_split3>
    170a:	70 f3       	brcs	.-36     	; 0x16e8 <__mulsf3+0x8>

0000170c <__mulsf3_pse>:
    170c:	95 9f       	mul	r25, r21
    170e:	c1 f3       	breq	.-16     	; 0x1700 <__mulsf3+0x20>
    1710:	95 0f       	add	r25, r21
    1712:	50 e0       	ldi	r21, 0x00	; 0
    1714:	55 1f       	adc	r21, r21
    1716:	62 9f       	mul	r22, r18
    1718:	f0 01       	movw	r30, r0
    171a:	72 9f       	mul	r23, r18
    171c:	bb 27       	eor	r27, r27
    171e:	f0 0d       	add	r31, r0
    1720:	b1 1d       	adc	r27, r1
    1722:	63 9f       	mul	r22, r19
    1724:	aa 27       	eor	r26, r26
    1726:	f0 0d       	add	r31, r0
    1728:	b1 1d       	adc	r27, r1
    172a:	aa 1f       	adc	r26, r26
    172c:	64 9f       	mul	r22, r20
    172e:	66 27       	eor	r22, r22
    1730:	b0 0d       	add	r27, r0
    1732:	a1 1d       	adc	r26, r1
    1734:	66 1f       	adc	r22, r22
    1736:	82 9f       	mul	r24, r18
    1738:	22 27       	eor	r18, r18
    173a:	b0 0d       	add	r27, r0
    173c:	a1 1d       	adc	r26, r1
    173e:	62 1f       	adc	r22, r18
    1740:	73 9f       	mul	r23, r19
    1742:	b0 0d       	add	r27, r0
    1744:	a1 1d       	adc	r26, r1
    1746:	62 1f       	adc	r22, r18
    1748:	83 9f       	mul	r24, r19
    174a:	a0 0d       	add	r26, r0
    174c:	61 1d       	adc	r22, r1
    174e:	22 1f       	adc	r18, r18
    1750:	74 9f       	mul	r23, r20
    1752:	33 27       	eor	r19, r19
    1754:	a0 0d       	add	r26, r0
    1756:	61 1d       	adc	r22, r1
    1758:	23 1f       	adc	r18, r19
    175a:	84 9f       	mul	r24, r20
    175c:	60 0d       	add	r22, r0
    175e:	21 1d       	adc	r18, r1
    1760:	82 2f       	mov	r24, r18
    1762:	76 2f       	mov	r23, r22
    1764:	6a 2f       	mov	r22, r26
    1766:	11 24       	eor	r1, r1
    1768:	9f 57       	subi	r25, 0x7F	; 127
    176a:	50 40       	sbci	r21, 0x00	; 0
    176c:	9a f0       	brmi	.+38     	; 0x1794 <__mulsf3_pse+0x88>
    176e:	f1 f0       	breq	.+60     	; 0x17ac <__mulsf3_pse+0xa0>
    1770:	88 23       	and	r24, r24
    1772:	4a f0       	brmi	.+18     	; 0x1786 <__mulsf3_pse+0x7a>
    1774:	ee 0f       	add	r30, r30
    1776:	ff 1f       	adc	r31, r31
    1778:	bb 1f       	adc	r27, r27
    177a:	66 1f       	adc	r22, r22
    177c:	77 1f       	adc	r23, r23
    177e:	88 1f       	adc	r24, r24
    1780:	91 50       	subi	r25, 0x01	; 1
    1782:	50 40       	sbci	r21, 0x00	; 0
    1784:	a9 f7       	brne	.-22     	; 0x1770 <__mulsf3_pse+0x64>
    1786:	9e 3f       	cpi	r25, 0xFE	; 254
    1788:	51 05       	cpc	r21, r1
    178a:	80 f0       	brcs	.+32     	; 0x17ac <__mulsf3_pse+0xa0>
    178c:	0c 94 1a 0b 	jmp	0x1634	; 0x1634 <__fp_inf>
    1790:	0c 94 65 0b 	jmp	0x16ca	; 0x16ca <__fp_szero>
    1794:	5f 3f       	cpi	r21, 0xFF	; 255
    1796:	e4 f3       	brlt	.-8      	; 0x1790 <__mulsf3_pse+0x84>
    1798:	98 3e       	cpi	r25, 0xE8	; 232
    179a:	d4 f3       	brlt	.-12     	; 0x1790 <__mulsf3_pse+0x84>
    179c:	86 95       	lsr	r24
    179e:	77 95       	ror	r23
    17a0:	67 95       	ror	r22
    17a2:	b7 95       	ror	r27
    17a4:	f7 95       	ror	r31
    17a6:	e7 95       	ror	r30
    17a8:	9f 5f       	subi	r25, 0xFF	; 255
    17aa:	c1 f7       	brne	.-16     	; 0x179c <__mulsf3_pse+0x90>
    17ac:	fe 2b       	or	r31, r30
    17ae:	88 0f       	add	r24, r24
    17b0:	91 1d       	adc	r25, r1
    17b2:	96 95       	lsr	r25
    17b4:	87 95       	ror	r24
    17b6:	97 f9       	bld	r25, 7
    17b8:	08 95       	ret

000017ba <_exit>:
    17ba:	f8 94       	cli

000017bc <__stop_program>:
    17bc:	ff cf       	rjmp	.-2      	; 0x17bc <__stop_program>
