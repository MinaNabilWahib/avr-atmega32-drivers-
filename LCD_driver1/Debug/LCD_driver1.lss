
LCD_driver1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f6e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000f6e  00000fe2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001710  00000000  00000000  00000fec  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001004  00000000  00000000  000026fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00003700  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003714  2**2
                  CONTENTS, READONLY
  6 .debug_info   000004e6  00000000  00000000  00003750  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004a3  00000000  00000000  00003c36  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001a  00000000  00000000  000040d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000196  00000000  00000000  000040f3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e6       	ldi	r30, 0x6E	; 110
  68:	ff e0       	ldi	r31, 0x0F	; 15
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 0a 06 	call	0xc14	; 0xc14 <main>
  7a:	0c 94 b5 07 	jmp	0xf6a	; 0xf6a <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_voidInitialize>:
#include "BIT_MATH.h"
#include "DIO_priv.h"
#include "DIO_config.h"
#include "DIO_int.h"

void DIO_voidInitialize(void){
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62

	DDRA = CONCBIT(PIN_7DIR,PIN_6DIR,PIN_5DIR,PIN_4DIR,PIN_3DIR,PIN_2DIR,PIN_1DIR,PIN_0DIR);
  8a:	8a e3       	ldi	r24, 0x3A	; 58
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	2f ef       	ldi	r18, 0xFF	; 255
  90:	fc 01       	movw	r30, r24
  92:	20 83       	st	Z, r18
	DDRB = CONCBIT(PIN_15DIR,PIN_14DIR,PIN_13DIR,PIN_12DIR,PIN_11DIR,PIN_10DIR,PIN_9DIR,PIN_8DIR);
  94:	87 e3       	ldi	r24, 0x37	; 55
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	2f e7       	ldi	r18, 0x7F	; 127
  9a:	fc 01       	movw	r30, r24
  9c:	20 83       	st	Z, r18
	DDRC = CONCBIT(PIN_23DIR,PIN_22DIR,PIN_21DIR,PIN_20DIR,PIN_19DIR,PIN_18DIR,PIN_17DIR,PIN_16DIR);
  9e:	84 e3       	ldi	r24, 0x34	; 52
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	2f ef       	ldi	r18, 0xFF	; 255
  a4:	fc 01       	movw	r30, r24
  a6:	20 83       	st	Z, r18
	DDRD = CONCBIT(PIN_31DIR,PIN_30DIR,PIN_29DIR,PIN_28DIR,PIN_27DIR,PIN_26DIR,PIN_25DIR,PIN_24DIR);
  a8:	81 e3       	ldi	r24, 0x31	; 49
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	2f ef       	ldi	r18, 0xFF	; 255
  ae:	fc 01       	movw	r30, r24
  b0:	20 83       	st	Z, r18

}
  b2:	00 00       	nop
  b4:	df 91       	pop	r29
  b6:	cf 91       	pop	r28
  b8:	08 95       	ret

000000ba <DIO_voidSetPin>:

void DIO_voidSetPin(u8 PinNum,u8 Value){
  ba:	cf 93       	push	r28
  bc:	df 93       	push	r29
  be:	00 d0       	rcall	.+0      	; 0xc0 <DIO_voidSetPin+0x6>
  c0:	cd b7       	in	r28, 0x3d	; 61
  c2:	de b7       	in	r29, 0x3e	; 62
  c4:	89 83       	std	Y+1, r24	; 0x01
  c6:	6a 83       	std	Y+2, r22	; 0x02
    if (Value==HIGH){
  c8:	8a 81       	ldd	r24, Y+2	; 0x02
  ca:	81 30       	cpi	r24, 0x01	; 1
  cc:	09 f0       	breq	.+2      	; 0xd0 <DIO_voidSetPin+0x16>
  ce:	74 c0       	rjmp	.+232    	; 0x1b8 <DIO_voidSetPin+0xfe>

        if((PinNum>=0 && PinNum<8)){
  d0:	89 81       	ldd	r24, Y+1	; 0x01
  d2:	88 30       	cpi	r24, 0x08	; 8
  d4:	a8 f4       	brcc	.+42     	; 0x100 <DIO_voidSetPin+0x46>
            SETBIT(PORTA,PinNum);
  d6:	8b e3       	ldi	r24, 0x3B	; 59
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	2b e3       	ldi	r18, 0x3B	; 59
  dc:	30 e0       	ldi	r19, 0x00	; 0
  de:	f9 01       	movw	r30, r18
  e0:	20 81       	ld	r18, Z
  e2:	62 2f       	mov	r22, r18
  e4:	29 81       	ldd	r18, Y+1	; 0x01
  e6:	42 2f       	mov	r20, r18
  e8:	50 e0       	ldi	r21, 0x00	; 0
  ea:	21 e0       	ldi	r18, 0x01	; 1
  ec:	30 e0       	ldi	r19, 0x00	; 0
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <DIO_voidSetPin+0x3a>
  f0:	22 0f       	add	r18, r18
  f2:	33 1f       	adc	r19, r19
  f4:	4a 95       	dec	r20
  f6:	e2 f7       	brpl	.-8      	; 0xf0 <DIO_voidSetPin+0x36>
  f8:	26 2b       	or	r18, r22
  fa:	fc 01       	movw	r30, r24
  fc:	20 83       	st	Z, r18
    	    CLRBIT(PORTD,PinNum-16);
    	}

    }

}
  fe:	d6 c0       	rjmp	.+428    	; 0x2ac <DIO_voidSetPin+0x1f2>
void DIO_voidSetPin(u8 PinNum,u8 Value){
    if (Value==HIGH){

        if((PinNum>=0 && PinNum<8)){
            SETBIT(PORTA,PinNum);
        }else if((PinNum>=8) && (PinNum<16)){
 100:	89 81       	ldd	r24, Y+1	; 0x01
 102:	88 30       	cpi	r24, 0x08	; 8
 104:	d8 f0       	brcs	.+54     	; 0x13c <DIO_voidSetPin+0x82>
 106:	89 81       	ldd	r24, Y+1	; 0x01
 108:	80 31       	cpi	r24, 0x10	; 16
 10a:	c0 f4       	brcc	.+48     	; 0x13c <DIO_voidSetPin+0x82>
        	SETBIT(PORTB,PinNum-8);
 10c:	88 e3       	ldi	r24, 0x38	; 56
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	28 e3       	ldi	r18, 0x38	; 56
 112:	30 e0       	ldi	r19, 0x00	; 0
 114:	f9 01       	movw	r30, r18
 116:	20 81       	ld	r18, Z
 118:	62 2f       	mov	r22, r18
 11a:	29 81       	ldd	r18, Y+1	; 0x01
 11c:	22 2f       	mov	r18, r18
 11e:	30 e0       	ldi	r19, 0x00	; 0
 120:	a9 01       	movw	r20, r18
 122:	48 50       	subi	r20, 0x08	; 8
 124:	51 09       	sbc	r21, r1
 126:	21 e0       	ldi	r18, 0x01	; 1
 128:	30 e0       	ldi	r19, 0x00	; 0
 12a:	02 c0       	rjmp	.+4      	; 0x130 <DIO_voidSetPin+0x76>
 12c:	22 0f       	add	r18, r18
 12e:	33 1f       	adc	r19, r19
 130:	4a 95       	dec	r20
 132:	e2 f7       	brpl	.-8      	; 0x12c <DIO_voidSetPin+0x72>
 134:	26 2b       	or	r18, r22
 136:	fc 01       	movw	r30, r24
 138:	20 83       	st	Z, r18
 13a:	b8 c0       	rjmp	.+368    	; 0x2ac <DIO_voidSetPin+0x1f2>
        }else if((PinNum>=16) && (PinNum<24)){
 13c:	89 81       	ldd	r24, Y+1	; 0x01
 13e:	80 31       	cpi	r24, 0x10	; 16
 140:	d8 f0       	brcs	.+54     	; 0x178 <DIO_voidSetPin+0xbe>
 142:	89 81       	ldd	r24, Y+1	; 0x01
 144:	88 31       	cpi	r24, 0x18	; 24
 146:	c0 f4       	brcc	.+48     	; 0x178 <DIO_voidSetPin+0xbe>
        	SETBIT(PORTC,PinNum-16);
 148:	85 e3       	ldi	r24, 0x35	; 53
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	25 e3       	ldi	r18, 0x35	; 53
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	f9 01       	movw	r30, r18
 152:	20 81       	ld	r18, Z
 154:	62 2f       	mov	r22, r18
 156:	29 81       	ldd	r18, Y+1	; 0x01
 158:	22 2f       	mov	r18, r18
 15a:	30 e0       	ldi	r19, 0x00	; 0
 15c:	a9 01       	movw	r20, r18
 15e:	40 51       	subi	r20, 0x10	; 16
 160:	51 09       	sbc	r21, r1
 162:	21 e0       	ldi	r18, 0x01	; 1
 164:	30 e0       	ldi	r19, 0x00	; 0
 166:	02 c0       	rjmp	.+4      	; 0x16c <DIO_voidSetPin+0xb2>
 168:	22 0f       	add	r18, r18
 16a:	33 1f       	adc	r19, r19
 16c:	4a 95       	dec	r20
 16e:	e2 f7       	brpl	.-8      	; 0x168 <DIO_voidSetPin+0xae>
 170:	26 2b       	or	r18, r22
 172:	fc 01       	movw	r30, r24
 174:	20 83       	st	Z, r18
 176:	9a c0       	rjmp	.+308    	; 0x2ac <DIO_voidSetPin+0x1f2>
        }else if((PinNum>=24) && (PinNum<32)){
 178:	89 81       	ldd	r24, Y+1	; 0x01
 17a:	88 31       	cpi	r24, 0x18	; 24
 17c:	08 f4       	brcc	.+2      	; 0x180 <DIO_voidSetPin+0xc6>
 17e:	96 c0       	rjmp	.+300    	; 0x2ac <DIO_voidSetPin+0x1f2>
 180:	89 81       	ldd	r24, Y+1	; 0x01
 182:	80 32       	cpi	r24, 0x20	; 32
 184:	08 f0       	brcs	.+2      	; 0x188 <DIO_voidSetPin+0xce>
 186:	92 c0       	rjmp	.+292    	; 0x2ac <DIO_voidSetPin+0x1f2>
        	SETBIT(PORTD,PinNum-16);
 188:	82 e3       	ldi	r24, 0x32	; 50
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	22 e3       	ldi	r18, 0x32	; 50
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	f9 01       	movw	r30, r18
 192:	20 81       	ld	r18, Z
 194:	62 2f       	mov	r22, r18
 196:	29 81       	ldd	r18, Y+1	; 0x01
 198:	22 2f       	mov	r18, r18
 19a:	30 e0       	ldi	r19, 0x00	; 0
 19c:	a9 01       	movw	r20, r18
 19e:	40 51       	subi	r20, 0x10	; 16
 1a0:	51 09       	sbc	r21, r1
 1a2:	21 e0       	ldi	r18, 0x01	; 1
 1a4:	30 e0       	ldi	r19, 0x00	; 0
 1a6:	02 c0       	rjmp	.+4      	; 0x1ac <DIO_voidSetPin+0xf2>
 1a8:	22 0f       	add	r18, r18
 1aa:	33 1f       	adc	r19, r19
 1ac:	4a 95       	dec	r20
 1ae:	e2 f7       	brpl	.-8      	; 0x1a8 <DIO_voidSetPin+0xee>
 1b0:	26 2b       	or	r18, r22
 1b2:	fc 01       	movw	r30, r24
 1b4:	20 83       	st	Z, r18
    	    CLRBIT(PORTD,PinNum-16);
    	}

    }

}
 1b6:	7a c0       	rjmp	.+244    	; 0x2ac <DIO_voidSetPin+0x1f2>
        	SETBIT(PORTC,PinNum-16);
        }else if((PinNum>=24) && (PinNum<32)){
        	SETBIT(PORTD,PinNum-16);
        }

    }else if (Value==LOW){
 1b8:	8a 81       	ldd	r24, Y+2	; 0x02
 1ba:	88 23       	and	r24, r24
 1bc:	09 f0       	breq	.+2      	; 0x1c0 <DIO_voidSetPin+0x106>
 1be:	76 c0       	rjmp	.+236    	; 0x2ac <DIO_voidSetPin+0x1f2>

    	if((PinNum>=0 && PinNum<8)){
 1c0:	89 81       	ldd	r24, Y+1	; 0x01
 1c2:	88 30       	cpi	r24, 0x08	; 8
 1c4:	b0 f4       	brcc	.+44     	; 0x1f2 <DIO_voidSetPin+0x138>
    	    CLRBIT(PORTA,PinNum);
 1c6:	8b e3       	ldi	r24, 0x3B	; 59
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	2b e3       	ldi	r18, 0x3B	; 59
 1cc:	30 e0       	ldi	r19, 0x00	; 0
 1ce:	f9 01       	movw	r30, r18
 1d0:	20 81       	ld	r18, Z
 1d2:	62 2f       	mov	r22, r18
 1d4:	29 81       	ldd	r18, Y+1	; 0x01
 1d6:	42 2f       	mov	r20, r18
 1d8:	50 e0       	ldi	r21, 0x00	; 0
 1da:	21 e0       	ldi	r18, 0x01	; 1
 1dc:	30 e0       	ldi	r19, 0x00	; 0
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <DIO_voidSetPin+0x12a>
 1e0:	22 0f       	add	r18, r18
 1e2:	33 1f       	adc	r19, r19
 1e4:	4a 95       	dec	r20
 1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <DIO_voidSetPin+0x126>
 1e8:	20 95       	com	r18
 1ea:	26 23       	and	r18, r22
 1ec:	fc 01       	movw	r30, r24
 1ee:	20 83       	st	Z, r18
    	    CLRBIT(PORTD,PinNum-16);
    	}

    }

}
 1f0:	5d c0       	rjmp	.+186    	; 0x2ac <DIO_voidSetPin+0x1f2>

    }else if (Value==LOW){

    	if((PinNum>=0 && PinNum<8)){
    	    CLRBIT(PORTA,PinNum);
    	}else if((PinNum>=8) && (PinNum<16)){
 1f2:	89 81       	ldd	r24, Y+1	; 0x01
 1f4:	88 30       	cpi	r24, 0x08	; 8
 1f6:	e0 f0       	brcs	.+56     	; 0x230 <DIO_voidSetPin+0x176>
 1f8:	89 81       	ldd	r24, Y+1	; 0x01
 1fa:	80 31       	cpi	r24, 0x10	; 16
 1fc:	c8 f4       	brcc	.+50     	; 0x230 <DIO_voidSetPin+0x176>
    	    CLRBIT(PORTB,PinNum-8);
 1fe:	88 e3       	ldi	r24, 0x38	; 56
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	28 e3       	ldi	r18, 0x38	; 56
 204:	30 e0       	ldi	r19, 0x00	; 0
 206:	f9 01       	movw	r30, r18
 208:	20 81       	ld	r18, Z
 20a:	62 2f       	mov	r22, r18
 20c:	29 81       	ldd	r18, Y+1	; 0x01
 20e:	22 2f       	mov	r18, r18
 210:	30 e0       	ldi	r19, 0x00	; 0
 212:	a9 01       	movw	r20, r18
 214:	48 50       	subi	r20, 0x08	; 8
 216:	51 09       	sbc	r21, r1
 218:	21 e0       	ldi	r18, 0x01	; 1
 21a:	30 e0       	ldi	r19, 0x00	; 0
 21c:	02 c0       	rjmp	.+4      	; 0x222 <DIO_voidSetPin+0x168>
 21e:	22 0f       	add	r18, r18
 220:	33 1f       	adc	r19, r19
 222:	4a 95       	dec	r20
 224:	e2 f7       	brpl	.-8      	; 0x21e <DIO_voidSetPin+0x164>
 226:	20 95       	com	r18
 228:	26 23       	and	r18, r22
 22a:	fc 01       	movw	r30, r24
 22c:	20 83       	st	Z, r18
 22e:	3e c0       	rjmp	.+124    	; 0x2ac <DIO_voidSetPin+0x1f2>
    	}else if((PinNum>=16) && (PinNum<24)){
 230:	89 81       	ldd	r24, Y+1	; 0x01
 232:	80 31       	cpi	r24, 0x10	; 16
 234:	e0 f0       	brcs	.+56     	; 0x26e <DIO_voidSetPin+0x1b4>
 236:	89 81       	ldd	r24, Y+1	; 0x01
 238:	88 31       	cpi	r24, 0x18	; 24
 23a:	c8 f4       	brcc	.+50     	; 0x26e <DIO_voidSetPin+0x1b4>
    	    CLRBIT(PORTC,PinNum-16);
 23c:	85 e3       	ldi	r24, 0x35	; 53
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	25 e3       	ldi	r18, 0x35	; 53
 242:	30 e0       	ldi	r19, 0x00	; 0
 244:	f9 01       	movw	r30, r18
 246:	20 81       	ld	r18, Z
 248:	62 2f       	mov	r22, r18
 24a:	29 81       	ldd	r18, Y+1	; 0x01
 24c:	22 2f       	mov	r18, r18
 24e:	30 e0       	ldi	r19, 0x00	; 0
 250:	a9 01       	movw	r20, r18
 252:	40 51       	subi	r20, 0x10	; 16
 254:	51 09       	sbc	r21, r1
 256:	21 e0       	ldi	r18, 0x01	; 1
 258:	30 e0       	ldi	r19, 0x00	; 0
 25a:	02 c0       	rjmp	.+4      	; 0x260 <DIO_voidSetPin+0x1a6>
 25c:	22 0f       	add	r18, r18
 25e:	33 1f       	adc	r19, r19
 260:	4a 95       	dec	r20
 262:	e2 f7       	brpl	.-8      	; 0x25c <DIO_voidSetPin+0x1a2>
 264:	20 95       	com	r18
 266:	26 23       	and	r18, r22
 268:	fc 01       	movw	r30, r24
 26a:	20 83       	st	Z, r18
 26c:	1f c0       	rjmp	.+62     	; 0x2ac <DIO_voidSetPin+0x1f2>
    	}else if((PinNum>=24) && (PinNum<32)){
 26e:	89 81       	ldd	r24, Y+1	; 0x01
 270:	88 31       	cpi	r24, 0x18	; 24
 272:	e0 f0       	brcs	.+56     	; 0x2ac <DIO_voidSetPin+0x1f2>
 274:	89 81       	ldd	r24, Y+1	; 0x01
 276:	80 32       	cpi	r24, 0x20	; 32
 278:	c8 f4       	brcc	.+50     	; 0x2ac <DIO_voidSetPin+0x1f2>
    	    CLRBIT(PORTD,PinNum-16);
 27a:	82 e3       	ldi	r24, 0x32	; 50
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	22 e3       	ldi	r18, 0x32	; 50
 280:	30 e0       	ldi	r19, 0x00	; 0
 282:	f9 01       	movw	r30, r18
 284:	20 81       	ld	r18, Z
 286:	62 2f       	mov	r22, r18
 288:	29 81       	ldd	r18, Y+1	; 0x01
 28a:	22 2f       	mov	r18, r18
 28c:	30 e0       	ldi	r19, 0x00	; 0
 28e:	a9 01       	movw	r20, r18
 290:	40 51       	subi	r20, 0x10	; 16
 292:	51 09       	sbc	r21, r1
 294:	21 e0       	ldi	r18, 0x01	; 1
 296:	30 e0       	ldi	r19, 0x00	; 0
 298:	02 c0       	rjmp	.+4      	; 0x29e <DIO_voidSetPin+0x1e4>
 29a:	22 0f       	add	r18, r18
 29c:	33 1f       	adc	r19, r19
 29e:	4a 95       	dec	r20
 2a0:	e2 f7       	brpl	.-8      	; 0x29a <DIO_voidSetPin+0x1e0>
 2a2:	20 95       	com	r18
 2a4:	26 23       	and	r18, r22
 2a6:	fc 01       	movw	r30, r24
 2a8:	20 83       	st	Z, r18
    	}

    }

}
 2aa:	00 c0       	rjmp	.+0      	; 0x2ac <DIO_voidSetPin+0x1f2>
 2ac:	00 00       	nop
 2ae:	0f 90       	pop	r0
 2b0:	0f 90       	pop	r0
 2b2:	df 91       	pop	r29
 2b4:	cf 91       	pop	r28
 2b6:	08 95       	ret

000002b8 <DIO_u8GetPin>:

u8 DIO_u8GetPin(u8 PinNum){
 2b8:	cf 93       	push	r28
 2ba:	df 93       	push	r29
 2bc:	00 d0       	rcall	.+0      	; 0x2be <DIO_u8GetPin+0x6>
 2be:	cd b7       	in	r28, 0x3d	; 61
 2c0:	de b7       	in	r29, 0x3e	; 62
 2c2:	8a 83       	std	Y+2, r24	; 0x02

	u8 ret;

	if((PinNum>=0 && PinNum<8)){
 2c4:	8a 81       	ldd	r24, Y+2	; 0x02
 2c6:	88 30       	cpi	r24, 0x08	; 8
 2c8:	88 f4       	brcc	.+34     	; 0x2ec <DIO_u8GetPin+0x34>
	     ret= GETBIT(PINA,PinNum);
 2ca:	89 e3       	ldi	r24, 0x39	; 57
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	fc 01       	movw	r30, r24
 2d0:	80 81       	ld	r24, Z
 2d2:	88 2f       	mov	r24, r24
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	2a 81       	ldd	r18, Y+2	; 0x02
 2d8:	22 2f       	mov	r18, r18
 2da:	30 e0       	ldi	r19, 0x00	; 0
 2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <DIO_u8GetPin+0x2a>
 2de:	95 95       	asr	r25
 2e0:	87 95       	ror	r24
 2e2:	2a 95       	dec	r18
 2e4:	e2 f7       	brpl	.-8      	; 0x2de <DIO_u8GetPin+0x26>
 2e6:	81 70       	andi	r24, 0x01	; 1
 2e8:	89 83       	std	Y+1, r24	; 0x01
 2ea:	4a c0       	rjmp	.+148    	; 0x380 <DIO_u8GetPin+0xc8>
	}else if((PinNum>=8) && (PinNum<16)){
 2ec:	8a 81       	ldd	r24, Y+2	; 0x02
 2ee:	88 30       	cpi	r24, 0x08	; 8
 2f0:	b0 f0       	brcs	.+44     	; 0x31e <DIO_u8GetPin+0x66>
 2f2:	8a 81       	ldd	r24, Y+2	; 0x02
 2f4:	80 31       	cpi	r24, 0x10	; 16
 2f6:	98 f4       	brcc	.+38     	; 0x31e <DIO_u8GetPin+0x66>
	     ret= GETBIT(PINB,PinNum-8);
 2f8:	86 e3       	ldi	r24, 0x36	; 54
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	fc 01       	movw	r30, r24
 2fe:	80 81       	ld	r24, Z
 300:	88 2f       	mov	r24, r24
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	2a 81       	ldd	r18, Y+2	; 0x02
 306:	22 2f       	mov	r18, r18
 308:	30 e0       	ldi	r19, 0x00	; 0
 30a:	28 50       	subi	r18, 0x08	; 8
 30c:	31 09       	sbc	r19, r1
 30e:	02 c0       	rjmp	.+4      	; 0x314 <DIO_u8GetPin+0x5c>
 310:	95 95       	asr	r25
 312:	87 95       	ror	r24
 314:	2a 95       	dec	r18
 316:	e2 f7       	brpl	.-8      	; 0x310 <DIO_u8GetPin+0x58>
 318:	81 70       	andi	r24, 0x01	; 1
 31a:	89 83       	std	Y+1, r24	; 0x01
 31c:	31 c0       	rjmp	.+98     	; 0x380 <DIO_u8GetPin+0xc8>
	}else if((PinNum>=16) && (PinNum<24)){
 31e:	8a 81       	ldd	r24, Y+2	; 0x02
 320:	80 31       	cpi	r24, 0x10	; 16
 322:	b0 f0       	brcs	.+44     	; 0x350 <DIO_u8GetPin+0x98>
 324:	8a 81       	ldd	r24, Y+2	; 0x02
 326:	88 31       	cpi	r24, 0x18	; 24
 328:	98 f4       	brcc	.+38     	; 0x350 <DIO_u8GetPin+0x98>
	     ret= GETBIT(PINC,PinNum-16);
 32a:	83 e3       	ldi	r24, 0x33	; 51
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	fc 01       	movw	r30, r24
 330:	80 81       	ld	r24, Z
 332:	88 2f       	mov	r24, r24
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	2a 81       	ldd	r18, Y+2	; 0x02
 338:	22 2f       	mov	r18, r18
 33a:	30 e0       	ldi	r19, 0x00	; 0
 33c:	20 51       	subi	r18, 0x10	; 16
 33e:	31 09       	sbc	r19, r1
 340:	02 c0       	rjmp	.+4      	; 0x346 <DIO_u8GetPin+0x8e>
 342:	95 95       	asr	r25
 344:	87 95       	ror	r24
 346:	2a 95       	dec	r18
 348:	e2 f7       	brpl	.-8      	; 0x342 <DIO_u8GetPin+0x8a>
 34a:	81 70       	andi	r24, 0x01	; 1
 34c:	89 83       	std	Y+1, r24	; 0x01
 34e:	18 c0       	rjmp	.+48     	; 0x380 <DIO_u8GetPin+0xc8>
	}else if((PinNum>=24) && (PinNum<32)){
 350:	8a 81       	ldd	r24, Y+2	; 0x02
 352:	88 31       	cpi	r24, 0x18	; 24
 354:	a8 f0       	brcs	.+42     	; 0x380 <DIO_u8GetPin+0xc8>
 356:	8a 81       	ldd	r24, Y+2	; 0x02
 358:	80 32       	cpi	r24, 0x20	; 32
 35a:	90 f4       	brcc	.+36     	; 0x380 <DIO_u8GetPin+0xc8>
	     ret= GETBIT(PIND,PinNum-16);
 35c:	80 e3       	ldi	r24, 0x30	; 48
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	fc 01       	movw	r30, r24
 362:	80 81       	ld	r24, Z
 364:	88 2f       	mov	r24, r24
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	2a 81       	ldd	r18, Y+2	; 0x02
 36a:	22 2f       	mov	r18, r18
 36c:	30 e0       	ldi	r19, 0x00	; 0
 36e:	20 51       	subi	r18, 0x10	; 16
 370:	31 09       	sbc	r19, r1
 372:	02 c0       	rjmp	.+4      	; 0x378 <DIO_u8GetPin+0xc0>
 374:	95 95       	asr	r25
 376:	87 95       	ror	r24
 378:	2a 95       	dec	r18
 37a:	e2 f7       	brpl	.-8      	; 0x374 <DIO_u8GetPin+0xbc>
 37c:	81 70       	andi	r24, 0x01	; 1
 37e:	89 83       	std	Y+1, r24	; 0x01
	}

	return ret;
 380:	89 81       	ldd	r24, Y+1	; 0x01

}
 382:	0f 90       	pop	r0
 384:	0f 90       	pop	r0
 386:	df 91       	pop	r29
 388:	cf 91       	pop	r28
 38a:	08 95       	ret

0000038c <DIO_voidTogglePin>:

void DIO_voidTogglePin(u8 PinNum){
 38c:	cf 93       	push	r28
 38e:	df 93       	push	r29
 390:	1f 92       	push	r1
 392:	cd b7       	in	r28, 0x3d	; 61
 394:	de b7       	in	r29, 0x3e	; 62
 396:	89 83       	std	Y+1, r24	; 0x01

	if((PinNum>=0 && PinNum<8)){
 398:	89 81       	ldd	r24, Y+1	; 0x01
 39a:	88 30       	cpi	r24, 0x08	; 8
 39c:	a8 f4       	brcc	.+42     	; 0x3c8 <DIO_voidTogglePin+0x3c>
		    TOGGLEBIT(PORTA,PinNum);
 39e:	8b e3       	ldi	r24, 0x3B	; 59
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	2b e3       	ldi	r18, 0x3B	; 59
 3a4:	30 e0       	ldi	r19, 0x00	; 0
 3a6:	f9 01       	movw	r30, r18
 3a8:	20 81       	ld	r18, Z
 3aa:	62 2f       	mov	r22, r18
 3ac:	29 81       	ldd	r18, Y+1	; 0x01
 3ae:	42 2f       	mov	r20, r18
 3b0:	50 e0       	ldi	r21, 0x00	; 0
 3b2:	21 e0       	ldi	r18, 0x01	; 1
 3b4:	30 e0       	ldi	r19, 0x00	; 0
 3b6:	02 c0       	rjmp	.+4      	; 0x3bc <DIO_voidTogglePin+0x30>
 3b8:	22 0f       	add	r18, r18
 3ba:	33 1f       	adc	r19, r19
 3bc:	4a 95       	dec	r20
 3be:	e2 f7       	brpl	.-8      	; 0x3b8 <DIO_voidTogglePin+0x2c>
 3c0:	26 27       	eor	r18, r22
 3c2:	fc 01       	movw	r30, r24
 3c4:	20 83       	st	Z, r18
		}else if((PinNum>=24) && (PinNum<32)){
		    TOGGLEBIT(PORTD,PinNum-16);
		}


}
 3c6:	5a c0       	rjmp	.+180    	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>

void DIO_voidTogglePin(u8 PinNum){

	if((PinNum>=0 && PinNum<8)){
		    TOGGLEBIT(PORTA,PinNum);
		}else if((PinNum>=8) && (PinNum<16)){
 3c8:	89 81       	ldd	r24, Y+1	; 0x01
 3ca:	88 30       	cpi	r24, 0x08	; 8
 3cc:	d8 f0       	brcs	.+54     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3ce:	89 81       	ldd	r24, Y+1	; 0x01
 3d0:	80 31       	cpi	r24, 0x10	; 16
 3d2:	c0 f4       	brcc	.+48     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
		    TOGGLEBIT(PORTB,PinNum-8);
 3d4:	88 e3       	ldi	r24, 0x38	; 56
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	28 e3       	ldi	r18, 0x38	; 56
 3da:	30 e0       	ldi	r19, 0x00	; 0
 3dc:	f9 01       	movw	r30, r18
 3de:	20 81       	ld	r18, Z
 3e0:	62 2f       	mov	r22, r18
 3e2:	29 81       	ldd	r18, Y+1	; 0x01
 3e4:	22 2f       	mov	r18, r18
 3e6:	30 e0       	ldi	r19, 0x00	; 0
 3e8:	a9 01       	movw	r20, r18
 3ea:	48 50       	subi	r20, 0x08	; 8
 3ec:	51 09       	sbc	r21, r1
 3ee:	21 e0       	ldi	r18, 0x01	; 1
 3f0:	30 e0       	ldi	r19, 0x00	; 0
 3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <DIO_voidTogglePin+0x6c>
 3f4:	22 0f       	add	r18, r18
 3f6:	33 1f       	adc	r19, r19
 3f8:	4a 95       	dec	r20
 3fa:	e2 f7       	brpl	.-8      	; 0x3f4 <DIO_voidTogglePin+0x68>
 3fc:	26 27       	eor	r18, r22
 3fe:	fc 01       	movw	r30, r24
 400:	20 83       	st	Z, r18
 402:	3c c0       	rjmp	.+120    	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
		}else if((PinNum>=16) && (PinNum<24)){
 404:	89 81       	ldd	r24, Y+1	; 0x01
 406:	80 31       	cpi	r24, 0x10	; 16
 408:	d8 f0       	brcs	.+54     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 40a:	89 81       	ldd	r24, Y+1	; 0x01
 40c:	88 31       	cpi	r24, 0x18	; 24
 40e:	c0 f4       	brcc	.+48     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
		    TOGGLEBIT(PORTC,PinNum-16);
 410:	85 e3       	ldi	r24, 0x35	; 53
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	25 e3       	ldi	r18, 0x35	; 53
 416:	30 e0       	ldi	r19, 0x00	; 0
 418:	f9 01       	movw	r30, r18
 41a:	20 81       	ld	r18, Z
 41c:	62 2f       	mov	r22, r18
 41e:	29 81       	ldd	r18, Y+1	; 0x01
 420:	22 2f       	mov	r18, r18
 422:	30 e0       	ldi	r19, 0x00	; 0
 424:	a9 01       	movw	r20, r18
 426:	40 51       	subi	r20, 0x10	; 16
 428:	51 09       	sbc	r21, r1
 42a:	21 e0       	ldi	r18, 0x01	; 1
 42c:	30 e0       	ldi	r19, 0x00	; 0
 42e:	02 c0       	rjmp	.+4      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 430:	22 0f       	add	r18, r18
 432:	33 1f       	adc	r19, r19
 434:	4a 95       	dec	r20
 436:	e2 f7       	brpl	.-8      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 438:	26 27       	eor	r18, r22
 43a:	fc 01       	movw	r30, r24
 43c:	20 83       	st	Z, r18
 43e:	1e c0       	rjmp	.+60     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
		}else if((PinNum>=24) && (PinNum<32)){
 440:	89 81       	ldd	r24, Y+1	; 0x01
 442:	88 31       	cpi	r24, 0x18	; 24
 444:	d8 f0       	brcs	.+54     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
 446:	89 81       	ldd	r24, Y+1	; 0x01
 448:	80 32       	cpi	r24, 0x20	; 32
 44a:	c0 f4       	brcc	.+48     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
		    TOGGLEBIT(PORTD,PinNum-16);
 44c:	82 e3       	ldi	r24, 0x32	; 50
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	22 e3       	ldi	r18, 0x32	; 50
 452:	30 e0       	ldi	r19, 0x00	; 0
 454:	f9 01       	movw	r30, r18
 456:	20 81       	ld	r18, Z
 458:	62 2f       	mov	r22, r18
 45a:	29 81       	ldd	r18, Y+1	; 0x01
 45c:	22 2f       	mov	r18, r18
 45e:	30 e0       	ldi	r19, 0x00	; 0
 460:	a9 01       	movw	r20, r18
 462:	40 51       	subi	r20, 0x10	; 16
 464:	51 09       	sbc	r21, r1
 466:	21 e0       	ldi	r18, 0x01	; 1
 468:	30 e0       	ldi	r19, 0x00	; 0
 46a:	02 c0       	rjmp	.+4      	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 46c:	22 0f       	add	r18, r18
 46e:	33 1f       	adc	r19, r19
 470:	4a 95       	dec	r20
 472:	e2 f7       	brpl	.-8      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 474:	26 27       	eor	r18, r22
 476:	fc 01       	movw	r30, r24
 478:	20 83       	st	Z, r18
		}


}
 47a:	00 c0       	rjmp	.+0      	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
 47c:	00 00       	nop
 47e:	0f 90       	pop	r0
 480:	df 91       	pop	r29
 482:	cf 91       	pop	r28
 484:	08 95       	ret

00000486 <LCD_voidInitialize>:
#include "LCD_Config.h"
#include "LCD_int.h"
//#include "avr\delay.h"
#include "avr/delay.h"
void LCD_voidInitialize()
{
 486:	cf 93       	push	r28
 488:	df 93       	push	r29
 48a:	cd b7       	in	r28, 0x3d	; 61
 48c:	de b7       	in	r29, 0x3e	; 62
 48e:	e8 97       	sbiw	r28, 0x38	; 56
 490:	0f b6       	in	r0, 0x3f	; 63
 492:	f8 94       	cli
 494:	de bf       	out	0x3e, r29	; 62
 496:	0f be       	out	0x3f, r0	; 63
 498:	cd bf       	out	0x3d, r28	; 61
 49a:	80 e0       	ldi	r24, 0x00	; 0
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	a0 ef       	ldi	r26, 0xF0	; 240
 4a0:	b1 e4       	ldi	r27, 0x41	; 65
 4a2:	89 83       	std	Y+1, r24	; 0x01
 4a4:	9a 83       	std	Y+2, r25	; 0x02
 4a6:	ab 83       	std	Y+3, r26	; 0x03
 4a8:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 4aa:	20 e0       	ldi	r18, 0x00	; 0
 4ac:	30 e0       	ldi	r19, 0x00	; 0
 4ae:	4a ef       	ldi	r20, 0xFA	; 250
 4b0:	54 e4       	ldi	r21, 0x44	; 68
 4b2:	69 81       	ldd	r22, Y+1	; 0x01
 4b4:	7a 81       	ldd	r23, Y+2	; 0x02
 4b6:	8b 81       	ldd	r24, Y+3	; 0x03
 4b8:	9c 81       	ldd	r25, Y+4	; 0x04
 4ba:	0e 94 20 07 	call	0xe40	; 0xe40 <__mulsf3>
 4be:	dc 01       	movw	r26, r24
 4c0:	cb 01       	movw	r24, r22
 4c2:	8f a7       	std	Y+47, r24	; 0x2f
 4c4:	98 ab       	std	Y+48, r25	; 0x30
 4c6:	a9 ab       	std	Y+49, r26	; 0x31
 4c8:	ba ab       	std	Y+50, r27	; 0x32
	if (__tmp < 1.0)
 4ca:	20 e0       	ldi	r18, 0x00	; 0
 4cc:	30 e0       	ldi	r19, 0x00	; 0
 4ce:	40 e8       	ldi	r20, 0x80	; 128
 4d0:	5f e3       	ldi	r21, 0x3F	; 63
 4d2:	6f a5       	ldd	r22, Y+47	; 0x2f
 4d4:	78 a9       	ldd	r23, Y+48	; 0x30
 4d6:	89 a9       	ldd	r24, Y+49	; 0x31
 4d8:	9a a9       	ldd	r25, Y+50	; 0x32
 4da:	0e 94 9a 06 	call	0xd34	; 0xd34 <__cmpsf2>
 4de:	88 23       	and	r24, r24
 4e0:	2c f4       	brge	.+10     	; 0x4ec <LCD_voidInitialize+0x66>
		__ticks = 1;
 4e2:	81 e0       	ldi	r24, 0x01	; 1
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	9c ab       	std	Y+52, r25	; 0x34
 4e8:	8b ab       	std	Y+51, r24	; 0x33
 4ea:	3f c0       	rjmp	.+126    	; 0x56a <LCD_voidInitialize+0xe4>
	else if (__tmp > 65535)
 4ec:	20 e0       	ldi	r18, 0x00	; 0
 4ee:	3f ef       	ldi	r19, 0xFF	; 255
 4f0:	4f e7       	ldi	r20, 0x7F	; 127
 4f2:	57 e4       	ldi	r21, 0x47	; 71
 4f4:	6f a5       	ldd	r22, Y+47	; 0x2f
 4f6:	78 a9       	ldd	r23, Y+48	; 0x30
 4f8:	89 a9       	ldd	r24, Y+49	; 0x31
 4fa:	9a a9       	ldd	r25, Y+50	; 0x32
 4fc:	0e 94 1b 07 	call	0xe36	; 0xe36 <__gesf2>
 500:	18 16       	cp	r1, r24
 502:	4c f5       	brge	.+82     	; 0x556 <LCD_voidInitialize+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 504:	20 e0       	ldi	r18, 0x00	; 0
 506:	30 e0       	ldi	r19, 0x00	; 0
 508:	40 e2       	ldi	r20, 0x20	; 32
 50a:	51 e4       	ldi	r21, 0x41	; 65
 50c:	69 81       	ldd	r22, Y+1	; 0x01
 50e:	7a 81       	ldd	r23, Y+2	; 0x02
 510:	8b 81       	ldd	r24, Y+3	; 0x03
 512:	9c 81       	ldd	r25, Y+4	; 0x04
 514:	0e 94 20 07 	call	0xe40	; 0xe40 <__mulsf3>
 518:	dc 01       	movw	r26, r24
 51a:	cb 01       	movw	r24, r22
 51c:	bc 01       	movw	r22, r24
 51e:	cd 01       	movw	r24, r26
 520:	0e 94 9f 06 	call	0xd3e	; 0xd3e <__fixunssfsi>
 524:	dc 01       	movw	r26, r24
 526:	cb 01       	movw	r24, r22
 528:	9c ab       	std	Y+52, r25	; 0x34
 52a:	8b ab       	std	Y+51, r24	; 0x33
 52c:	0f c0       	rjmp	.+30     	; 0x54c <LCD_voidInitialize+0xc6>
 52e:	88 ec       	ldi	r24, 0xC8	; 200
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	9e ab       	std	Y+54, r25	; 0x36
 534:	8d ab       	std	Y+53, r24	; 0x35
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 536:	8d a9       	ldd	r24, Y+53	; 0x35
 538:	9e a9       	ldd	r25, Y+54	; 0x36
 53a:	01 97       	sbiw	r24, 0x01	; 1
 53c:	f1 f7       	brne	.-4      	; 0x53a <LCD_voidInitialize+0xb4>
 53e:	9e ab       	std	Y+54, r25	; 0x36
 540:	8d ab       	std	Y+53, r24	; 0x35
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 542:	8b a9       	ldd	r24, Y+51	; 0x33
 544:	9c a9       	ldd	r25, Y+52	; 0x34
 546:	01 97       	sbiw	r24, 0x01	; 1
 548:	9c ab       	std	Y+52, r25	; 0x34
 54a:	8b ab       	std	Y+51, r24	; 0x33
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 54c:	8b a9       	ldd	r24, Y+51	; 0x33
 54e:	9c a9       	ldd	r25, Y+52	; 0x34
 550:	89 2b       	or	r24, r25
 552:	69 f7       	brne	.-38     	; 0x52e <LCD_voidInitialize+0xa8>
 554:	14 c0       	rjmp	.+40     	; 0x57e <LCD_voidInitialize+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 556:	6f a5       	ldd	r22, Y+47	; 0x2f
 558:	78 a9       	ldd	r23, Y+48	; 0x30
 55a:	89 a9       	ldd	r24, Y+49	; 0x31
 55c:	9a a9       	ldd	r25, Y+50	; 0x32
 55e:	0e 94 9f 06 	call	0xd3e	; 0xd3e <__fixunssfsi>
 562:	dc 01       	movw	r26, r24
 564:	cb 01       	movw	r24, r22
 566:	9c ab       	std	Y+52, r25	; 0x34
 568:	8b ab       	std	Y+51, r24	; 0x33
 56a:	8b a9       	ldd	r24, Y+51	; 0x33
 56c:	9c a9       	ldd	r25, Y+52	; 0x34
 56e:	98 af       	std	Y+56, r25	; 0x38
 570:	8f ab       	std	Y+55, r24	; 0x37
 572:	8f a9       	ldd	r24, Y+55	; 0x37
 574:	98 ad       	ldd	r25, Y+56	; 0x38
 576:	01 97       	sbiw	r24, 0x01	; 1
 578:	f1 f7       	brne	.-4      	; 0x576 <LCD_voidInitialize+0xf0>
 57a:	98 af       	std	Y+56, r25	; 0x38
 57c:	8f ab       	std	Y+55, r24	; 0x37
	_delay_ms(30);
	LCD_voidWriteCmd(0b00101000);
 57e:	88 e2       	ldi	r24, 0x28	; 40
 580:	0e 94 44 04 	call	0x888	; 0x888 <LCD_voidWriteCmd>
 584:	80 e0       	ldi	r24, 0x00	; 0
 586:	90 e0       	ldi	r25, 0x00	; 0
 588:	a0 e8       	ldi	r26, 0x80	; 128
 58a:	bf e3       	ldi	r27, 0x3F	; 63
 58c:	8d 83       	std	Y+5, r24	; 0x05
 58e:	9e 83       	std	Y+6, r25	; 0x06
 590:	af 83       	std	Y+7, r26	; 0x07
 592:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 594:	20 e0       	ldi	r18, 0x00	; 0
 596:	30 e0       	ldi	r19, 0x00	; 0
 598:	4a ef       	ldi	r20, 0xFA	; 250
 59a:	54 e4       	ldi	r21, 0x44	; 68
 59c:	6d 81       	ldd	r22, Y+5	; 0x05
 59e:	7e 81       	ldd	r23, Y+6	; 0x06
 5a0:	8f 81       	ldd	r24, Y+7	; 0x07
 5a2:	98 85       	ldd	r25, Y+8	; 0x08
 5a4:	0e 94 20 07 	call	0xe40	; 0xe40 <__mulsf3>
 5a8:	dc 01       	movw	r26, r24
 5aa:	cb 01       	movw	r24, r22
 5ac:	8d a3       	std	Y+37, r24	; 0x25
 5ae:	9e a3       	std	Y+38, r25	; 0x26
 5b0:	af a3       	std	Y+39, r26	; 0x27
 5b2:	b8 a7       	std	Y+40, r27	; 0x28
	if (__tmp < 1.0)
 5b4:	20 e0       	ldi	r18, 0x00	; 0
 5b6:	30 e0       	ldi	r19, 0x00	; 0
 5b8:	40 e8       	ldi	r20, 0x80	; 128
 5ba:	5f e3       	ldi	r21, 0x3F	; 63
 5bc:	6d a1       	ldd	r22, Y+37	; 0x25
 5be:	7e a1       	ldd	r23, Y+38	; 0x26
 5c0:	8f a1       	ldd	r24, Y+39	; 0x27
 5c2:	98 a5       	ldd	r25, Y+40	; 0x28
 5c4:	0e 94 9a 06 	call	0xd34	; 0xd34 <__cmpsf2>
 5c8:	88 23       	and	r24, r24
 5ca:	2c f4       	brge	.+10     	; 0x5d6 <LCD_voidInitialize+0x150>
		__ticks = 1;
 5cc:	81 e0       	ldi	r24, 0x01	; 1
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	9a a7       	std	Y+42, r25	; 0x2a
 5d2:	89 a7       	std	Y+41, r24	; 0x29
 5d4:	3f c0       	rjmp	.+126    	; 0x654 <LCD_voidInitialize+0x1ce>
	else if (__tmp > 65535)
 5d6:	20 e0       	ldi	r18, 0x00	; 0
 5d8:	3f ef       	ldi	r19, 0xFF	; 255
 5da:	4f e7       	ldi	r20, 0x7F	; 127
 5dc:	57 e4       	ldi	r21, 0x47	; 71
 5de:	6d a1       	ldd	r22, Y+37	; 0x25
 5e0:	7e a1       	ldd	r23, Y+38	; 0x26
 5e2:	8f a1       	ldd	r24, Y+39	; 0x27
 5e4:	98 a5       	ldd	r25, Y+40	; 0x28
 5e6:	0e 94 1b 07 	call	0xe36	; 0xe36 <__gesf2>
 5ea:	18 16       	cp	r1, r24
 5ec:	4c f5       	brge	.+82     	; 0x640 <LCD_voidInitialize+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 5ee:	20 e0       	ldi	r18, 0x00	; 0
 5f0:	30 e0       	ldi	r19, 0x00	; 0
 5f2:	40 e2       	ldi	r20, 0x20	; 32
 5f4:	51 e4       	ldi	r21, 0x41	; 65
 5f6:	6d 81       	ldd	r22, Y+5	; 0x05
 5f8:	7e 81       	ldd	r23, Y+6	; 0x06
 5fa:	8f 81       	ldd	r24, Y+7	; 0x07
 5fc:	98 85       	ldd	r25, Y+8	; 0x08
 5fe:	0e 94 20 07 	call	0xe40	; 0xe40 <__mulsf3>
 602:	dc 01       	movw	r26, r24
 604:	cb 01       	movw	r24, r22
 606:	bc 01       	movw	r22, r24
 608:	cd 01       	movw	r24, r26
 60a:	0e 94 9f 06 	call	0xd3e	; 0xd3e <__fixunssfsi>
 60e:	dc 01       	movw	r26, r24
 610:	cb 01       	movw	r24, r22
 612:	9a a7       	std	Y+42, r25	; 0x2a
 614:	89 a7       	std	Y+41, r24	; 0x29
 616:	0f c0       	rjmp	.+30     	; 0x636 <LCD_voidInitialize+0x1b0>
 618:	88 ec       	ldi	r24, 0xC8	; 200
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	9c a7       	std	Y+44, r25	; 0x2c
 61e:	8b a7       	std	Y+43, r24	; 0x2b
 620:	8b a5       	ldd	r24, Y+43	; 0x2b
 622:	9c a5       	ldd	r25, Y+44	; 0x2c
 624:	01 97       	sbiw	r24, 0x01	; 1
 626:	f1 f7       	brne	.-4      	; 0x624 <LCD_voidInitialize+0x19e>
 628:	9c a7       	std	Y+44, r25	; 0x2c
 62a:	8b a7       	std	Y+43, r24	; 0x2b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 62c:	89 a5       	ldd	r24, Y+41	; 0x29
 62e:	9a a5       	ldd	r25, Y+42	; 0x2a
 630:	01 97       	sbiw	r24, 0x01	; 1
 632:	9a a7       	std	Y+42, r25	; 0x2a
 634:	89 a7       	std	Y+41, r24	; 0x29
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 636:	89 a5       	ldd	r24, Y+41	; 0x29
 638:	9a a5       	ldd	r25, Y+42	; 0x2a
 63a:	89 2b       	or	r24, r25
 63c:	69 f7       	brne	.-38     	; 0x618 <LCD_voidInitialize+0x192>
 63e:	14 c0       	rjmp	.+40     	; 0x668 <LCD_voidInitialize+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 640:	6d a1       	ldd	r22, Y+37	; 0x25
 642:	7e a1       	ldd	r23, Y+38	; 0x26
 644:	8f a1       	ldd	r24, Y+39	; 0x27
 646:	98 a5       	ldd	r25, Y+40	; 0x28
 648:	0e 94 9f 06 	call	0xd3e	; 0xd3e <__fixunssfsi>
 64c:	dc 01       	movw	r26, r24
 64e:	cb 01       	movw	r24, r22
 650:	9a a7       	std	Y+42, r25	; 0x2a
 652:	89 a7       	std	Y+41, r24	; 0x29
 654:	89 a5       	ldd	r24, Y+41	; 0x29
 656:	9a a5       	ldd	r25, Y+42	; 0x2a
 658:	9e a7       	std	Y+46, r25	; 0x2e
 65a:	8d a7       	std	Y+45, r24	; 0x2d
 65c:	8d a5       	ldd	r24, Y+45	; 0x2d
 65e:	9e a5       	ldd	r25, Y+46	; 0x2e
 660:	01 97       	sbiw	r24, 0x01	; 1
 662:	f1 f7       	brne	.-4      	; 0x660 <LCD_voidInitialize+0x1da>
 664:	9e a7       	std	Y+46, r25	; 0x2e
 666:	8d a7       	std	Y+45, r24	; 0x2d
	_delay_ms(1);
	LCD_voidWriteCmd(0b00001100);
 668:	8c e0       	ldi	r24, 0x0C	; 12
 66a:	0e 94 44 04 	call	0x888	; 0x888 <LCD_voidWriteCmd>
 66e:	80 e0       	ldi	r24, 0x00	; 0
 670:	90 e0       	ldi	r25, 0x00	; 0
 672:	a0 e8       	ldi	r26, 0x80	; 128
 674:	bf e3       	ldi	r27, 0x3F	; 63
 676:	89 87       	std	Y+9, r24	; 0x09
 678:	9a 87       	std	Y+10, r25	; 0x0a
 67a:	ab 87       	std	Y+11, r26	; 0x0b
 67c:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 67e:	20 e0       	ldi	r18, 0x00	; 0
 680:	30 e0       	ldi	r19, 0x00	; 0
 682:	4a ef       	ldi	r20, 0xFA	; 250
 684:	54 e4       	ldi	r21, 0x44	; 68
 686:	69 85       	ldd	r22, Y+9	; 0x09
 688:	7a 85       	ldd	r23, Y+10	; 0x0a
 68a:	8b 85       	ldd	r24, Y+11	; 0x0b
 68c:	9c 85       	ldd	r25, Y+12	; 0x0c
 68e:	0e 94 20 07 	call	0xe40	; 0xe40 <__mulsf3>
 692:	dc 01       	movw	r26, r24
 694:	cb 01       	movw	r24, r22
 696:	8b 8f       	std	Y+27, r24	; 0x1b
 698:	9c 8f       	std	Y+28, r25	; 0x1c
 69a:	ad 8f       	std	Y+29, r26	; 0x1d
 69c:	be 8f       	std	Y+30, r27	; 0x1e
	if (__tmp < 1.0)
 69e:	20 e0       	ldi	r18, 0x00	; 0
 6a0:	30 e0       	ldi	r19, 0x00	; 0
 6a2:	40 e8       	ldi	r20, 0x80	; 128
 6a4:	5f e3       	ldi	r21, 0x3F	; 63
 6a6:	6b 8d       	ldd	r22, Y+27	; 0x1b
 6a8:	7c 8d       	ldd	r23, Y+28	; 0x1c
 6aa:	8d 8d       	ldd	r24, Y+29	; 0x1d
 6ac:	9e 8d       	ldd	r25, Y+30	; 0x1e
 6ae:	0e 94 9a 06 	call	0xd34	; 0xd34 <__cmpsf2>
 6b2:	88 23       	and	r24, r24
 6b4:	2c f4       	brge	.+10     	; 0x6c0 <LCD_voidInitialize+0x23a>
		__ticks = 1;
 6b6:	81 e0       	ldi	r24, 0x01	; 1
 6b8:	90 e0       	ldi	r25, 0x00	; 0
 6ba:	98 a3       	std	Y+32, r25	; 0x20
 6bc:	8f 8f       	std	Y+31, r24	; 0x1f
 6be:	3f c0       	rjmp	.+126    	; 0x73e <LCD_voidInitialize+0x2b8>
	else if (__tmp > 65535)
 6c0:	20 e0       	ldi	r18, 0x00	; 0
 6c2:	3f ef       	ldi	r19, 0xFF	; 255
 6c4:	4f e7       	ldi	r20, 0x7F	; 127
 6c6:	57 e4       	ldi	r21, 0x47	; 71
 6c8:	6b 8d       	ldd	r22, Y+27	; 0x1b
 6ca:	7c 8d       	ldd	r23, Y+28	; 0x1c
 6cc:	8d 8d       	ldd	r24, Y+29	; 0x1d
 6ce:	9e 8d       	ldd	r25, Y+30	; 0x1e
 6d0:	0e 94 1b 07 	call	0xe36	; 0xe36 <__gesf2>
 6d4:	18 16       	cp	r1, r24
 6d6:	4c f5       	brge	.+82     	; 0x72a <LCD_voidInitialize+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 6d8:	20 e0       	ldi	r18, 0x00	; 0
 6da:	30 e0       	ldi	r19, 0x00	; 0
 6dc:	40 e2       	ldi	r20, 0x20	; 32
 6de:	51 e4       	ldi	r21, 0x41	; 65
 6e0:	69 85       	ldd	r22, Y+9	; 0x09
 6e2:	7a 85       	ldd	r23, Y+10	; 0x0a
 6e4:	8b 85       	ldd	r24, Y+11	; 0x0b
 6e6:	9c 85       	ldd	r25, Y+12	; 0x0c
 6e8:	0e 94 20 07 	call	0xe40	; 0xe40 <__mulsf3>
 6ec:	dc 01       	movw	r26, r24
 6ee:	cb 01       	movw	r24, r22
 6f0:	bc 01       	movw	r22, r24
 6f2:	cd 01       	movw	r24, r26
 6f4:	0e 94 9f 06 	call	0xd3e	; 0xd3e <__fixunssfsi>
 6f8:	dc 01       	movw	r26, r24
 6fa:	cb 01       	movw	r24, r22
 6fc:	98 a3       	std	Y+32, r25	; 0x20
 6fe:	8f 8f       	std	Y+31, r24	; 0x1f
 700:	0f c0       	rjmp	.+30     	; 0x720 <LCD_voidInitialize+0x29a>
 702:	88 ec       	ldi	r24, 0xC8	; 200
 704:	90 e0       	ldi	r25, 0x00	; 0
 706:	9a a3       	std	Y+34, r25	; 0x22
 708:	89 a3       	std	Y+33, r24	; 0x21
 70a:	89 a1       	ldd	r24, Y+33	; 0x21
 70c:	9a a1       	ldd	r25, Y+34	; 0x22
 70e:	01 97       	sbiw	r24, 0x01	; 1
 710:	f1 f7       	brne	.-4      	; 0x70e <LCD_voidInitialize+0x288>
 712:	9a a3       	std	Y+34, r25	; 0x22
 714:	89 a3       	std	Y+33, r24	; 0x21
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 716:	8f 8d       	ldd	r24, Y+31	; 0x1f
 718:	98 a1       	ldd	r25, Y+32	; 0x20
 71a:	01 97       	sbiw	r24, 0x01	; 1
 71c:	98 a3       	std	Y+32, r25	; 0x20
 71e:	8f 8f       	std	Y+31, r24	; 0x1f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 720:	8f 8d       	ldd	r24, Y+31	; 0x1f
 722:	98 a1       	ldd	r25, Y+32	; 0x20
 724:	89 2b       	or	r24, r25
 726:	69 f7       	brne	.-38     	; 0x702 <LCD_voidInitialize+0x27c>
 728:	14 c0       	rjmp	.+40     	; 0x752 <LCD_voidInitialize+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 72a:	6b 8d       	ldd	r22, Y+27	; 0x1b
 72c:	7c 8d       	ldd	r23, Y+28	; 0x1c
 72e:	8d 8d       	ldd	r24, Y+29	; 0x1d
 730:	9e 8d       	ldd	r25, Y+30	; 0x1e
 732:	0e 94 9f 06 	call	0xd3e	; 0xd3e <__fixunssfsi>
 736:	dc 01       	movw	r26, r24
 738:	cb 01       	movw	r24, r22
 73a:	98 a3       	std	Y+32, r25	; 0x20
 73c:	8f 8f       	std	Y+31, r24	; 0x1f
 73e:	8f 8d       	ldd	r24, Y+31	; 0x1f
 740:	98 a1       	ldd	r25, Y+32	; 0x20
 742:	9c a3       	std	Y+36, r25	; 0x24
 744:	8b a3       	std	Y+35, r24	; 0x23
 746:	8b a1       	ldd	r24, Y+35	; 0x23
 748:	9c a1       	ldd	r25, Y+36	; 0x24
 74a:	01 97       	sbiw	r24, 0x01	; 1
 74c:	f1 f7       	brne	.-4      	; 0x74a <LCD_voidInitialize+0x2c4>
 74e:	9c a3       	std	Y+36, r25	; 0x24
 750:	8b a3       	std	Y+35, r24	; 0x23
	_delay_ms(1);
	LCD_voidWriteCmd(1);
 752:	81 e0       	ldi	r24, 0x01	; 1
 754:	0e 94 44 04 	call	0x888	; 0x888 <LCD_voidWriteCmd>
 758:	80 e0       	ldi	r24, 0x00	; 0
 75a:	90 e0       	ldi	r25, 0x00	; 0
 75c:	a0 e0       	ldi	r26, 0x00	; 0
 75e:	b0 e4       	ldi	r27, 0x40	; 64
 760:	8d 87       	std	Y+13, r24	; 0x0d
 762:	9e 87       	std	Y+14, r25	; 0x0e
 764:	af 87       	std	Y+15, r26	; 0x0f
 766:	b8 8b       	std	Y+16, r27	; 0x10

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 768:	20 e0       	ldi	r18, 0x00	; 0
 76a:	30 e0       	ldi	r19, 0x00	; 0
 76c:	4a ef       	ldi	r20, 0xFA	; 250
 76e:	54 e4       	ldi	r21, 0x44	; 68
 770:	6d 85       	ldd	r22, Y+13	; 0x0d
 772:	7e 85       	ldd	r23, Y+14	; 0x0e
 774:	8f 85       	ldd	r24, Y+15	; 0x0f
 776:	98 89       	ldd	r25, Y+16	; 0x10
 778:	0e 94 20 07 	call	0xe40	; 0xe40 <__mulsf3>
 77c:	dc 01       	movw	r26, r24
 77e:	cb 01       	movw	r24, r22
 780:	89 8b       	std	Y+17, r24	; 0x11
 782:	9a 8b       	std	Y+18, r25	; 0x12
 784:	ab 8b       	std	Y+19, r26	; 0x13
 786:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
 788:	20 e0       	ldi	r18, 0x00	; 0
 78a:	30 e0       	ldi	r19, 0x00	; 0
 78c:	40 e8       	ldi	r20, 0x80	; 128
 78e:	5f e3       	ldi	r21, 0x3F	; 63
 790:	69 89       	ldd	r22, Y+17	; 0x11
 792:	7a 89       	ldd	r23, Y+18	; 0x12
 794:	8b 89       	ldd	r24, Y+19	; 0x13
 796:	9c 89       	ldd	r25, Y+20	; 0x14
 798:	0e 94 9a 06 	call	0xd34	; 0xd34 <__cmpsf2>
 79c:	88 23       	and	r24, r24
 79e:	2c f4       	brge	.+10     	; 0x7aa <LCD_voidInitialize+0x324>
		__ticks = 1;
 7a0:	81 e0       	ldi	r24, 0x01	; 1
 7a2:	90 e0       	ldi	r25, 0x00	; 0
 7a4:	9e 8b       	std	Y+22, r25	; 0x16
 7a6:	8d 8b       	std	Y+21, r24	; 0x15
 7a8:	3f c0       	rjmp	.+126    	; 0x828 <LCD_voidInitialize+0x3a2>
	else if (__tmp > 65535)
 7aa:	20 e0       	ldi	r18, 0x00	; 0
 7ac:	3f ef       	ldi	r19, 0xFF	; 255
 7ae:	4f e7       	ldi	r20, 0x7F	; 127
 7b0:	57 e4       	ldi	r21, 0x47	; 71
 7b2:	69 89       	ldd	r22, Y+17	; 0x11
 7b4:	7a 89       	ldd	r23, Y+18	; 0x12
 7b6:	8b 89       	ldd	r24, Y+19	; 0x13
 7b8:	9c 89       	ldd	r25, Y+20	; 0x14
 7ba:	0e 94 1b 07 	call	0xe36	; 0xe36 <__gesf2>
 7be:	18 16       	cp	r1, r24
 7c0:	4c f5       	brge	.+82     	; 0x814 <LCD_voidInitialize+0x38e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 7c2:	20 e0       	ldi	r18, 0x00	; 0
 7c4:	30 e0       	ldi	r19, 0x00	; 0
 7c6:	40 e2       	ldi	r20, 0x20	; 32
 7c8:	51 e4       	ldi	r21, 0x41	; 65
 7ca:	6d 85       	ldd	r22, Y+13	; 0x0d
 7cc:	7e 85       	ldd	r23, Y+14	; 0x0e
 7ce:	8f 85       	ldd	r24, Y+15	; 0x0f
 7d0:	98 89       	ldd	r25, Y+16	; 0x10
 7d2:	0e 94 20 07 	call	0xe40	; 0xe40 <__mulsf3>
 7d6:	dc 01       	movw	r26, r24
 7d8:	cb 01       	movw	r24, r22
 7da:	bc 01       	movw	r22, r24
 7dc:	cd 01       	movw	r24, r26
 7de:	0e 94 9f 06 	call	0xd3e	; 0xd3e <__fixunssfsi>
 7e2:	dc 01       	movw	r26, r24
 7e4:	cb 01       	movw	r24, r22
 7e6:	9e 8b       	std	Y+22, r25	; 0x16
 7e8:	8d 8b       	std	Y+21, r24	; 0x15
 7ea:	0f c0       	rjmp	.+30     	; 0x80a <LCD_voidInitialize+0x384>
 7ec:	88 ec       	ldi	r24, 0xC8	; 200
 7ee:	90 e0       	ldi	r25, 0x00	; 0
 7f0:	98 8f       	std	Y+24, r25	; 0x18
 7f2:	8f 8b       	std	Y+23, r24	; 0x17
 7f4:	8f 89       	ldd	r24, Y+23	; 0x17
 7f6:	98 8d       	ldd	r25, Y+24	; 0x18
 7f8:	01 97       	sbiw	r24, 0x01	; 1
 7fa:	f1 f7       	brne	.-4      	; 0x7f8 <LCD_voidInitialize+0x372>
 7fc:	98 8f       	std	Y+24, r25	; 0x18
 7fe:	8f 8b       	std	Y+23, r24	; 0x17
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 800:	8d 89       	ldd	r24, Y+21	; 0x15
 802:	9e 89       	ldd	r25, Y+22	; 0x16
 804:	01 97       	sbiw	r24, 0x01	; 1
 806:	9e 8b       	std	Y+22, r25	; 0x16
 808:	8d 8b       	std	Y+21, r24	; 0x15
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 80a:	8d 89       	ldd	r24, Y+21	; 0x15
 80c:	9e 89       	ldd	r25, Y+22	; 0x16
 80e:	89 2b       	or	r24, r25
 810:	69 f7       	brne	.-38     	; 0x7ec <LCD_voidInitialize+0x366>
 812:	14 c0       	rjmp	.+40     	; 0x83c <LCD_voidInitialize+0x3b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 814:	69 89       	ldd	r22, Y+17	; 0x11
 816:	7a 89       	ldd	r23, Y+18	; 0x12
 818:	8b 89       	ldd	r24, Y+19	; 0x13
 81a:	9c 89       	ldd	r25, Y+20	; 0x14
 81c:	0e 94 9f 06 	call	0xd3e	; 0xd3e <__fixunssfsi>
 820:	dc 01       	movw	r26, r24
 822:	cb 01       	movw	r24, r22
 824:	9e 8b       	std	Y+22, r25	; 0x16
 826:	8d 8b       	std	Y+21, r24	; 0x15
 828:	8d 89       	ldd	r24, Y+21	; 0x15
 82a:	9e 89       	ldd	r25, Y+22	; 0x16
 82c:	9a 8f       	std	Y+26, r25	; 0x1a
 82e:	89 8f       	std	Y+25, r24	; 0x19
 830:	89 8d       	ldd	r24, Y+25	; 0x19
 832:	9a 8d       	ldd	r25, Y+26	; 0x1a
 834:	01 97       	sbiw	r24, 0x01	; 1
 836:	f1 f7       	brne	.-4      	; 0x834 <LCD_voidInitialize+0x3ae>
 838:	9a 8f       	std	Y+26, r25	; 0x1a
 83a:	89 8f       	std	Y+25, r24	; 0x19
	_delay_ms(2);
	LCD_voidWriteCmd(0b00000110);
 83c:	86 e0       	ldi	r24, 0x06	; 6
 83e:	0e 94 44 04 	call	0x888	; 0x888 <LCD_voidWriteCmd>
}
 842:	00 00       	nop
 844:	e8 96       	adiw	r28, 0x38	; 56
 846:	0f b6       	in	r0, 0x3f	; 63
 848:	f8 94       	cli
 84a:	de bf       	out	0x3e, r29	; 62
 84c:	0f be       	out	0x3f, r0	; 63
 84e:	cd bf       	out	0x3d, r28	; 61
 850:	df 91       	pop	r29
 852:	cf 91       	pop	r28
 854:	08 95       	ret

00000856 <LCD_voidWriteChar>:

void LCD_voidWriteChar(u8 Data)
{
 856:	cf 93       	push	r28
 858:	df 93       	push	r29
 85a:	1f 92       	push	r1
 85c:	cd b7       	in	r28, 0x3d	; 61
 85e:	de b7       	in	r29, 0x3e	; 62
 860:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPin(LCD_RS_PIN, HIGH);
 862:	61 e0       	ldi	r22, 0x01	; 1
 864:	80 e0       	ldi	r24, 0x00	; 0
 866:	0e 94 5d 00 	call	0xba	; 0xba <DIO_voidSetPin>
	DIO_voidSetPin(LCD_RW_PIN, LOW);
 86a:	60 e0       	ldi	r22, 0x00	; 0
 86c:	81 e0       	ldi	r24, 0x01	; 1
 86e:	0e 94 5d 00 	call	0xba	; 0xba <DIO_voidSetPin>
	LCD_voidWriteHighNibble(Data);
 872:	89 81       	ldd	r24, Y+1	; 0x01
 874:	0e 94 81 04 	call	0x902	; 0x902 <LCD_voidWriteHighNibble>
	LCD_voidWriteLowNibble(Data);
 878:	89 81       	ldd	r24, Y+1	; 0x01
 87a:	0e 94 33 05 	call	0xa66	; 0xa66 <LCD_voidWriteLowNibble>

}
 87e:	00 00       	nop
 880:	0f 90       	pop	r0
 882:	df 91       	pop	r29
 884:	cf 91       	pop	r28
 886:	08 95       	ret

00000888 <LCD_voidWriteCmd>:

void LCD_voidWriteCmd(u8 Cmd)
{
 888:	cf 93       	push	r28
 88a:	df 93       	push	r29
 88c:	1f 92       	push	r1
 88e:	cd b7       	in	r28, 0x3d	; 61
 890:	de b7       	in	r29, 0x3e	; 62
 892:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPin(LCD_RS_PIN, LOW);
 894:	60 e0       	ldi	r22, 0x00	; 0
 896:	80 e0       	ldi	r24, 0x00	; 0
 898:	0e 94 5d 00 	call	0xba	; 0xba <DIO_voidSetPin>
	DIO_voidSetPin(LCD_RW_PIN, LOW);
 89c:	60 e0       	ldi	r22, 0x00	; 0
 89e:	81 e0       	ldi	r24, 0x01	; 1
 8a0:	0e 94 5d 00 	call	0xba	; 0xba <DIO_voidSetPin>
	LCD_voidWriteHighNibble(Cmd);
 8a4:	89 81       	ldd	r24, Y+1	; 0x01
 8a6:	0e 94 81 04 	call	0x902	; 0x902 <LCD_voidWriteHighNibble>
	LCD_voidWriteLowNibble(Cmd);
 8aa:	89 81       	ldd	r24, Y+1	; 0x01
 8ac:	0e 94 33 05 	call	0xa66	; 0xa66 <LCD_voidWriteLowNibble>
}
 8b0:	00 00       	nop
 8b2:	0f 90       	pop	r0
 8b4:	df 91       	pop	r29
 8b6:	cf 91       	pop	r28
 8b8:	08 95       	ret

000008ba <LCD_ClrScreen>:


void LCD_ClrScreen()
{
 8ba:	cf 93       	push	r28
 8bc:	df 93       	push	r29
 8be:	cd b7       	in	r28, 0x3d	; 61
 8c0:	de b7       	in	r29, 0x3e	; 62
	LCD_voidWriteCmd(CLR_DISP);
 8c2:	81 e0       	ldi	r24, 0x01	; 1
 8c4:	0e 94 44 04 	call	0x888	; 0x888 <LCD_voidWriteCmd>
}
 8c8:	00 00       	nop
 8ca:	df 91       	pop	r29
 8cc:	cf 91       	pop	r28
 8ce:	08 95       	ret

000008d0 <LCD_voidGoTo>:

void LCD_voidGoTo(u8 x, u8 y)
{
 8d0:	cf 93       	push	r28
 8d2:	df 93       	push	r29
 8d4:	00 d0       	rcall	.+0      	; 0x8d6 <LCD_voidGoTo+0x6>
 8d6:	cd b7       	in	r28, 0x3d	; 61
 8d8:	de b7       	in	r29, 0x3e	; 62
 8da:	89 83       	std	Y+1, r24	; 0x01
 8dc:	6a 83       	std	Y+2, r22	; 0x02
	if(y == 0)
 8de:	8a 81       	ldd	r24, Y+2	; 0x02
 8e0:	88 23       	and	r24, r24
 8e2:	29 f4       	brne	.+10     	; 0x8ee <LCD_voidGoTo+0x1e>
	{
		LCD_voidWriteCmd(0b10000000 + x);
 8e4:	89 81       	ldd	r24, Y+1	; 0x01
 8e6:	80 58       	subi	r24, 0x80	; 128
 8e8:	0e 94 44 04 	call	0x888	; 0x888 <LCD_voidWriteCmd>
	}
	else
	{
		LCD_voidWriteCmd(0x40 + 0b10000000 + x);
	}
}
 8ec:	04 c0       	rjmp	.+8      	; 0x8f6 <LCD_voidGoTo+0x26>
	{
		LCD_voidWriteCmd(0b10000000 + x);
	}
	else
	{
		LCD_voidWriteCmd(0x40 + 0b10000000 + x);
 8ee:	89 81       	ldd	r24, Y+1	; 0x01
 8f0:	80 54       	subi	r24, 0x40	; 64
 8f2:	0e 94 44 04 	call	0x888	; 0x888 <LCD_voidWriteCmd>
	}
}
 8f6:	00 00       	nop
 8f8:	0f 90       	pop	r0
 8fa:	0f 90       	pop	r0
 8fc:	df 91       	pop	r29
 8fe:	cf 91       	pop	r28
 900:	08 95       	ret

00000902 <LCD_voidWriteHighNibble>:

static void LCD_voidWriteHighNibble(u8 data)
{
 902:	cf 93       	push	r28
 904:	df 93       	push	r29
 906:	cd b7       	in	r28, 0x3d	; 61
 908:	de b7       	in	r29, 0x3e	; 62
 90a:	2f 97       	sbiw	r28, 0x0f	; 15
 90c:	0f b6       	in	r0, 0x3f	; 63
 90e:	f8 94       	cli
 910:	de bf       	out	0x3e, r29	; 62
 912:	0f be       	out	0x3f, r0	; 63
 914:	cd bf       	out	0x3d, r28	; 61
 916:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_voidSetPin(LCD_D7_PIN, GETBIT(data, 7));
 918:	8f 85       	ldd	r24, Y+15	; 0x0f
 91a:	88 1f       	adc	r24, r24
 91c:	88 27       	eor	r24, r24
 91e:	88 1f       	adc	r24, r24
 920:	68 2f       	mov	r22, r24
 922:	86 e0       	ldi	r24, 0x06	; 6
 924:	0e 94 5d 00 	call	0xba	; 0xba <DIO_voidSetPin>
	DIO_voidSetPin(LCD_D6_PIN, GETBIT(data, 6));
 928:	8f 85       	ldd	r24, Y+15	; 0x0f
 92a:	82 95       	swap	r24
 92c:	86 95       	lsr	r24
 92e:	86 95       	lsr	r24
 930:	83 70       	andi	r24, 0x03	; 3
 932:	81 70       	andi	r24, 0x01	; 1
 934:	68 2f       	mov	r22, r24
 936:	85 e0       	ldi	r24, 0x05	; 5
 938:	0e 94 5d 00 	call	0xba	; 0xba <DIO_voidSetPin>
	DIO_voidSetPin(LCD_D5_PIN, GETBIT(data, 5));
 93c:	8f 85       	ldd	r24, Y+15	; 0x0f
 93e:	82 95       	swap	r24
 940:	86 95       	lsr	r24
 942:	87 70       	andi	r24, 0x07	; 7
 944:	81 70       	andi	r24, 0x01	; 1
 946:	68 2f       	mov	r22, r24
 948:	84 e0       	ldi	r24, 0x04	; 4
 94a:	0e 94 5d 00 	call	0xba	; 0xba <DIO_voidSetPin>
	DIO_voidSetPin(LCD_D4_PIN, GETBIT(data, 4));
 94e:	8f 85       	ldd	r24, Y+15	; 0x0f
 950:	82 95       	swap	r24
 952:	8f 70       	andi	r24, 0x0F	; 15
 954:	81 70       	andi	r24, 0x01	; 1
 956:	68 2f       	mov	r22, r24
 958:	83 e0       	ldi	r24, 0x03	; 3
 95a:	0e 94 5d 00 	call	0xba	; 0xba <DIO_voidSetPin>
	DIO_voidSetPin(LCD_EN_PIN, HIGH);
 95e:	61 e0       	ldi	r22, 0x01	; 1
 960:	82 e0       	ldi	r24, 0x02	; 2
 962:	0e 94 5d 00 	call	0xba	; 0xba <DIO_voidSetPin>
 966:	80 e0       	ldi	r24, 0x00	; 0
 968:	90 e0       	ldi	r25, 0x00	; 0
 96a:	a0 ea       	ldi	r26, 0xA0	; 160
 96c:	b0 e4       	ldi	r27, 0x40	; 64
 96e:	89 83       	std	Y+1, r24	; 0x01
 970:	9a 83       	std	Y+2, r25	; 0x02
 972:	ab 83       	std	Y+3, r26	; 0x03
 974:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 976:	20 e0       	ldi	r18, 0x00	; 0
 978:	30 e0       	ldi	r19, 0x00	; 0
 97a:	4a ef       	ldi	r20, 0xFA	; 250
 97c:	54 e4       	ldi	r21, 0x44	; 68
 97e:	69 81       	ldd	r22, Y+1	; 0x01
 980:	7a 81       	ldd	r23, Y+2	; 0x02
 982:	8b 81       	ldd	r24, Y+3	; 0x03
 984:	9c 81       	ldd	r25, Y+4	; 0x04
 986:	0e 94 20 07 	call	0xe40	; 0xe40 <__mulsf3>
 98a:	dc 01       	movw	r26, r24
 98c:	cb 01       	movw	r24, r22
 98e:	8d 83       	std	Y+5, r24	; 0x05
 990:	9e 83       	std	Y+6, r25	; 0x06
 992:	af 83       	std	Y+7, r26	; 0x07
 994:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 996:	20 e0       	ldi	r18, 0x00	; 0
 998:	30 e0       	ldi	r19, 0x00	; 0
 99a:	40 e8       	ldi	r20, 0x80	; 128
 99c:	5f e3       	ldi	r21, 0x3F	; 63
 99e:	6d 81       	ldd	r22, Y+5	; 0x05
 9a0:	7e 81       	ldd	r23, Y+6	; 0x06
 9a2:	8f 81       	ldd	r24, Y+7	; 0x07
 9a4:	98 85       	ldd	r25, Y+8	; 0x08
 9a6:	0e 94 9a 06 	call	0xd34	; 0xd34 <__cmpsf2>
 9aa:	88 23       	and	r24, r24
 9ac:	2c f4       	brge	.+10     	; 0x9b8 <LCD_voidWriteHighNibble+0xb6>
		__ticks = 1;
 9ae:	81 e0       	ldi	r24, 0x01	; 1
 9b0:	90 e0       	ldi	r25, 0x00	; 0
 9b2:	9a 87       	std	Y+10, r25	; 0x0a
 9b4:	89 87       	std	Y+9, r24	; 0x09
 9b6:	3f c0       	rjmp	.+126    	; 0xa36 <LCD_voidWriteHighNibble+0x134>
	else if (__tmp > 65535)
 9b8:	20 e0       	ldi	r18, 0x00	; 0
 9ba:	3f ef       	ldi	r19, 0xFF	; 255
 9bc:	4f e7       	ldi	r20, 0x7F	; 127
 9be:	57 e4       	ldi	r21, 0x47	; 71
 9c0:	6d 81       	ldd	r22, Y+5	; 0x05
 9c2:	7e 81       	ldd	r23, Y+6	; 0x06
 9c4:	8f 81       	ldd	r24, Y+7	; 0x07
 9c6:	98 85       	ldd	r25, Y+8	; 0x08
 9c8:	0e 94 1b 07 	call	0xe36	; 0xe36 <__gesf2>
 9cc:	18 16       	cp	r1, r24
 9ce:	4c f5       	brge	.+82     	; 0xa22 <LCD_voidWriteHighNibble+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 9d0:	20 e0       	ldi	r18, 0x00	; 0
 9d2:	30 e0       	ldi	r19, 0x00	; 0
 9d4:	40 e2       	ldi	r20, 0x20	; 32
 9d6:	51 e4       	ldi	r21, 0x41	; 65
 9d8:	69 81       	ldd	r22, Y+1	; 0x01
 9da:	7a 81       	ldd	r23, Y+2	; 0x02
 9dc:	8b 81       	ldd	r24, Y+3	; 0x03
 9de:	9c 81       	ldd	r25, Y+4	; 0x04
 9e0:	0e 94 20 07 	call	0xe40	; 0xe40 <__mulsf3>
 9e4:	dc 01       	movw	r26, r24
 9e6:	cb 01       	movw	r24, r22
 9e8:	bc 01       	movw	r22, r24
 9ea:	cd 01       	movw	r24, r26
 9ec:	0e 94 9f 06 	call	0xd3e	; 0xd3e <__fixunssfsi>
 9f0:	dc 01       	movw	r26, r24
 9f2:	cb 01       	movw	r24, r22
 9f4:	9a 87       	std	Y+10, r25	; 0x0a
 9f6:	89 87       	std	Y+9, r24	; 0x09
 9f8:	0f c0       	rjmp	.+30     	; 0xa18 <LCD_voidWriteHighNibble+0x116>
 9fa:	88 ec       	ldi	r24, 0xC8	; 200
 9fc:	90 e0       	ldi	r25, 0x00	; 0
 9fe:	9c 87       	std	Y+12, r25	; 0x0c
 a00:	8b 87       	std	Y+11, r24	; 0x0b
 a02:	8b 85       	ldd	r24, Y+11	; 0x0b
 a04:	9c 85       	ldd	r25, Y+12	; 0x0c
 a06:	01 97       	sbiw	r24, 0x01	; 1
 a08:	f1 f7       	brne	.-4      	; 0xa06 <LCD_voidWriteHighNibble+0x104>
 a0a:	9c 87       	std	Y+12, r25	; 0x0c
 a0c:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 a0e:	89 85       	ldd	r24, Y+9	; 0x09
 a10:	9a 85       	ldd	r25, Y+10	; 0x0a
 a12:	01 97       	sbiw	r24, 0x01	; 1
 a14:	9a 87       	std	Y+10, r25	; 0x0a
 a16:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 a18:	89 85       	ldd	r24, Y+9	; 0x09
 a1a:	9a 85       	ldd	r25, Y+10	; 0x0a
 a1c:	89 2b       	or	r24, r25
 a1e:	69 f7       	brne	.-38     	; 0x9fa <LCD_voidWriteHighNibble+0xf8>
 a20:	14 c0       	rjmp	.+40     	; 0xa4a <LCD_voidWriteHighNibble+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 a22:	6d 81       	ldd	r22, Y+5	; 0x05
 a24:	7e 81       	ldd	r23, Y+6	; 0x06
 a26:	8f 81       	ldd	r24, Y+7	; 0x07
 a28:	98 85       	ldd	r25, Y+8	; 0x08
 a2a:	0e 94 9f 06 	call	0xd3e	; 0xd3e <__fixunssfsi>
 a2e:	dc 01       	movw	r26, r24
 a30:	cb 01       	movw	r24, r22
 a32:	9a 87       	std	Y+10, r25	; 0x0a
 a34:	89 87       	std	Y+9, r24	; 0x09
 a36:	89 85       	ldd	r24, Y+9	; 0x09
 a38:	9a 85       	ldd	r25, Y+10	; 0x0a
 a3a:	9e 87       	std	Y+14, r25	; 0x0e
 a3c:	8d 87       	std	Y+13, r24	; 0x0d
 a3e:	8d 85       	ldd	r24, Y+13	; 0x0d
 a40:	9e 85       	ldd	r25, Y+14	; 0x0e
 a42:	01 97       	sbiw	r24, 0x01	; 1
 a44:	f1 f7       	brne	.-4      	; 0xa42 <LCD_voidWriteHighNibble+0x140>
 a46:	9e 87       	std	Y+14, r25	; 0x0e
 a48:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(5);
	DIO_voidSetPin(LCD_EN_PIN, LOW);
 a4a:	60 e0       	ldi	r22, 0x00	; 0
 a4c:	82 e0       	ldi	r24, 0x02	; 2
 a4e:	0e 94 5d 00 	call	0xba	; 0xba <DIO_voidSetPin>
}
 a52:	00 00       	nop
 a54:	2f 96       	adiw	r28, 0x0f	; 15
 a56:	0f b6       	in	r0, 0x3f	; 63
 a58:	f8 94       	cli
 a5a:	de bf       	out	0x3e, r29	; 62
 a5c:	0f be       	out	0x3f, r0	; 63
 a5e:	cd bf       	out	0x3d, r28	; 61
 a60:	df 91       	pop	r29
 a62:	cf 91       	pop	r28
 a64:	08 95       	ret

00000a66 <LCD_voidWriteLowNibble>:

static void LCD_voidWriteLowNibble(u8 data)
{
 a66:	cf 93       	push	r28
 a68:	df 93       	push	r29
 a6a:	cd b7       	in	r28, 0x3d	; 61
 a6c:	de b7       	in	r29, 0x3e	; 62
 a6e:	2f 97       	sbiw	r28, 0x0f	; 15
 a70:	0f b6       	in	r0, 0x3f	; 63
 a72:	f8 94       	cli
 a74:	de bf       	out	0x3e, r29	; 62
 a76:	0f be       	out	0x3f, r0	; 63
 a78:	cd bf       	out	0x3d, r28	; 61
 a7a:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_voidSetPin(LCD_D7_PIN, GETBIT(data, 3));
 a7c:	8f 85       	ldd	r24, Y+15	; 0x0f
 a7e:	86 95       	lsr	r24
 a80:	86 95       	lsr	r24
 a82:	86 95       	lsr	r24
 a84:	81 70       	andi	r24, 0x01	; 1
 a86:	68 2f       	mov	r22, r24
 a88:	86 e0       	ldi	r24, 0x06	; 6
 a8a:	0e 94 5d 00 	call	0xba	; 0xba <DIO_voidSetPin>
	DIO_voidSetPin(LCD_D6_PIN, GETBIT(data, 2));
 a8e:	8f 85       	ldd	r24, Y+15	; 0x0f
 a90:	86 95       	lsr	r24
 a92:	86 95       	lsr	r24
 a94:	81 70       	andi	r24, 0x01	; 1
 a96:	68 2f       	mov	r22, r24
 a98:	85 e0       	ldi	r24, 0x05	; 5
 a9a:	0e 94 5d 00 	call	0xba	; 0xba <DIO_voidSetPin>
	DIO_voidSetPin(LCD_D5_PIN, GETBIT(data, 1));
 a9e:	8f 85       	ldd	r24, Y+15	; 0x0f
 aa0:	86 95       	lsr	r24
 aa2:	81 70       	andi	r24, 0x01	; 1
 aa4:	68 2f       	mov	r22, r24
 aa6:	84 e0       	ldi	r24, 0x04	; 4
 aa8:	0e 94 5d 00 	call	0xba	; 0xba <DIO_voidSetPin>
	DIO_voidSetPin(LCD_D4_PIN, GETBIT(data, 0));
 aac:	8f 85       	ldd	r24, Y+15	; 0x0f
 aae:	81 70       	andi	r24, 0x01	; 1
 ab0:	68 2f       	mov	r22, r24
 ab2:	83 e0       	ldi	r24, 0x03	; 3
 ab4:	0e 94 5d 00 	call	0xba	; 0xba <DIO_voidSetPin>
	DIO_voidSetPin(LCD_EN_PIN, HIGH);
 ab8:	61 e0       	ldi	r22, 0x01	; 1
 aba:	82 e0       	ldi	r24, 0x02	; 2
 abc:	0e 94 5d 00 	call	0xba	; 0xba <DIO_voidSetPin>
 ac0:	80 e0       	ldi	r24, 0x00	; 0
 ac2:	90 e0       	ldi	r25, 0x00	; 0
 ac4:	a0 ea       	ldi	r26, 0xA0	; 160
 ac6:	b0 e4       	ldi	r27, 0x40	; 64
 ac8:	89 83       	std	Y+1, r24	; 0x01
 aca:	9a 83       	std	Y+2, r25	; 0x02
 acc:	ab 83       	std	Y+3, r26	; 0x03
 ace:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 ad0:	20 e0       	ldi	r18, 0x00	; 0
 ad2:	30 e0       	ldi	r19, 0x00	; 0
 ad4:	4a ef       	ldi	r20, 0xFA	; 250
 ad6:	54 e4       	ldi	r21, 0x44	; 68
 ad8:	69 81       	ldd	r22, Y+1	; 0x01
 ada:	7a 81       	ldd	r23, Y+2	; 0x02
 adc:	8b 81       	ldd	r24, Y+3	; 0x03
 ade:	9c 81       	ldd	r25, Y+4	; 0x04
 ae0:	0e 94 20 07 	call	0xe40	; 0xe40 <__mulsf3>
 ae4:	dc 01       	movw	r26, r24
 ae6:	cb 01       	movw	r24, r22
 ae8:	8d 83       	std	Y+5, r24	; 0x05
 aea:	9e 83       	std	Y+6, r25	; 0x06
 aec:	af 83       	std	Y+7, r26	; 0x07
 aee:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 af0:	20 e0       	ldi	r18, 0x00	; 0
 af2:	30 e0       	ldi	r19, 0x00	; 0
 af4:	40 e8       	ldi	r20, 0x80	; 128
 af6:	5f e3       	ldi	r21, 0x3F	; 63
 af8:	6d 81       	ldd	r22, Y+5	; 0x05
 afa:	7e 81       	ldd	r23, Y+6	; 0x06
 afc:	8f 81       	ldd	r24, Y+7	; 0x07
 afe:	98 85       	ldd	r25, Y+8	; 0x08
 b00:	0e 94 9a 06 	call	0xd34	; 0xd34 <__cmpsf2>
 b04:	88 23       	and	r24, r24
 b06:	2c f4       	brge	.+10     	; 0xb12 <LCD_voidWriteLowNibble+0xac>
		__ticks = 1;
 b08:	81 e0       	ldi	r24, 0x01	; 1
 b0a:	90 e0       	ldi	r25, 0x00	; 0
 b0c:	9a 87       	std	Y+10, r25	; 0x0a
 b0e:	89 87       	std	Y+9, r24	; 0x09
 b10:	3f c0       	rjmp	.+126    	; 0xb90 <LCD_voidWriteLowNibble+0x12a>
	else if (__tmp > 65535)
 b12:	20 e0       	ldi	r18, 0x00	; 0
 b14:	3f ef       	ldi	r19, 0xFF	; 255
 b16:	4f e7       	ldi	r20, 0x7F	; 127
 b18:	57 e4       	ldi	r21, 0x47	; 71
 b1a:	6d 81       	ldd	r22, Y+5	; 0x05
 b1c:	7e 81       	ldd	r23, Y+6	; 0x06
 b1e:	8f 81       	ldd	r24, Y+7	; 0x07
 b20:	98 85       	ldd	r25, Y+8	; 0x08
 b22:	0e 94 1b 07 	call	0xe36	; 0xe36 <__gesf2>
 b26:	18 16       	cp	r1, r24
 b28:	4c f5       	brge	.+82     	; 0xb7c <LCD_voidWriteLowNibble+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 b2a:	20 e0       	ldi	r18, 0x00	; 0
 b2c:	30 e0       	ldi	r19, 0x00	; 0
 b2e:	40 e2       	ldi	r20, 0x20	; 32
 b30:	51 e4       	ldi	r21, 0x41	; 65
 b32:	69 81       	ldd	r22, Y+1	; 0x01
 b34:	7a 81       	ldd	r23, Y+2	; 0x02
 b36:	8b 81       	ldd	r24, Y+3	; 0x03
 b38:	9c 81       	ldd	r25, Y+4	; 0x04
 b3a:	0e 94 20 07 	call	0xe40	; 0xe40 <__mulsf3>
 b3e:	dc 01       	movw	r26, r24
 b40:	cb 01       	movw	r24, r22
 b42:	bc 01       	movw	r22, r24
 b44:	cd 01       	movw	r24, r26
 b46:	0e 94 9f 06 	call	0xd3e	; 0xd3e <__fixunssfsi>
 b4a:	dc 01       	movw	r26, r24
 b4c:	cb 01       	movw	r24, r22
 b4e:	9a 87       	std	Y+10, r25	; 0x0a
 b50:	89 87       	std	Y+9, r24	; 0x09
 b52:	0f c0       	rjmp	.+30     	; 0xb72 <LCD_voidWriteLowNibble+0x10c>
 b54:	88 ec       	ldi	r24, 0xC8	; 200
 b56:	90 e0       	ldi	r25, 0x00	; 0
 b58:	9c 87       	std	Y+12, r25	; 0x0c
 b5a:	8b 87       	std	Y+11, r24	; 0x0b
 b5c:	8b 85       	ldd	r24, Y+11	; 0x0b
 b5e:	9c 85       	ldd	r25, Y+12	; 0x0c
 b60:	01 97       	sbiw	r24, 0x01	; 1
 b62:	f1 f7       	brne	.-4      	; 0xb60 <LCD_voidWriteLowNibble+0xfa>
 b64:	9c 87       	std	Y+12, r25	; 0x0c
 b66:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 b68:	89 85       	ldd	r24, Y+9	; 0x09
 b6a:	9a 85       	ldd	r25, Y+10	; 0x0a
 b6c:	01 97       	sbiw	r24, 0x01	; 1
 b6e:	9a 87       	std	Y+10, r25	; 0x0a
 b70:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 b72:	89 85       	ldd	r24, Y+9	; 0x09
 b74:	9a 85       	ldd	r25, Y+10	; 0x0a
 b76:	89 2b       	or	r24, r25
 b78:	69 f7       	brne	.-38     	; 0xb54 <LCD_voidWriteLowNibble+0xee>
 b7a:	14 c0       	rjmp	.+40     	; 0xba4 <LCD_voidWriteLowNibble+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 b7c:	6d 81       	ldd	r22, Y+5	; 0x05
 b7e:	7e 81       	ldd	r23, Y+6	; 0x06
 b80:	8f 81       	ldd	r24, Y+7	; 0x07
 b82:	98 85       	ldd	r25, Y+8	; 0x08
 b84:	0e 94 9f 06 	call	0xd3e	; 0xd3e <__fixunssfsi>
 b88:	dc 01       	movw	r26, r24
 b8a:	cb 01       	movw	r24, r22
 b8c:	9a 87       	std	Y+10, r25	; 0x0a
 b8e:	89 87       	std	Y+9, r24	; 0x09
 b90:	89 85       	ldd	r24, Y+9	; 0x09
 b92:	9a 85       	ldd	r25, Y+10	; 0x0a
 b94:	9e 87       	std	Y+14, r25	; 0x0e
 b96:	8d 87       	std	Y+13, r24	; 0x0d
 b98:	8d 85       	ldd	r24, Y+13	; 0x0d
 b9a:	9e 85       	ldd	r25, Y+14	; 0x0e
 b9c:	01 97       	sbiw	r24, 0x01	; 1
 b9e:	f1 f7       	brne	.-4      	; 0xb9c <LCD_voidWriteLowNibble+0x136>
 ba0:	9e 87       	std	Y+14, r25	; 0x0e
 ba2:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(5);
	DIO_voidSetPin(LCD_EN_PIN, LOW);
 ba4:	60 e0       	ldi	r22, 0x00	; 0
 ba6:	82 e0       	ldi	r24, 0x02	; 2
 ba8:	0e 94 5d 00 	call	0xba	; 0xba <DIO_voidSetPin>
}
 bac:	00 00       	nop
 bae:	2f 96       	adiw	r28, 0x0f	; 15
 bb0:	0f b6       	in	r0, 0x3f	; 63
 bb2:	f8 94       	cli
 bb4:	de bf       	out	0x3e, r29	; 62
 bb6:	0f be       	out	0x3f, r0	; 63
 bb8:	cd bf       	out	0x3d, r28	; 61
 bba:	df 91       	pop	r29
 bbc:	cf 91       	pop	r28
 bbe:	08 95       	ret

00000bc0 <LCD_voidWriteString>:

void LCD_voidWriteString(u8* x)
{
 bc0:	cf 93       	push	r28
 bc2:	df 93       	push	r29
 bc4:	00 d0       	rcall	.+0      	; 0xbc6 <LCD_voidWriteString+0x6>
 bc6:	1f 92       	push	r1
 bc8:	cd b7       	in	r28, 0x3d	; 61
 bca:	de b7       	in	r29, 0x3e	; 62
 bcc:	9b 83       	std	Y+3, r25	; 0x03
 bce:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
 bd0:	19 82       	std	Y+1, r1	; 0x01
	while(*(x+i) != '\0')
 bd2:	0e c0       	rjmp	.+28     	; 0xbf0 <LCD_voidWriteString+0x30>
	{
		LCD_voidWriteChar(*(x + i));
 bd4:	89 81       	ldd	r24, Y+1	; 0x01
 bd6:	88 2f       	mov	r24, r24
 bd8:	90 e0       	ldi	r25, 0x00	; 0
 bda:	2a 81       	ldd	r18, Y+2	; 0x02
 bdc:	3b 81       	ldd	r19, Y+3	; 0x03
 bde:	82 0f       	add	r24, r18
 be0:	93 1f       	adc	r25, r19
 be2:	fc 01       	movw	r30, r24
 be4:	80 81       	ld	r24, Z
 be6:	0e 94 2b 04 	call	0x856	; 0x856 <LCD_voidWriteChar>
		i++;
 bea:	89 81       	ldd	r24, Y+1	; 0x01
 bec:	8f 5f       	subi	r24, 0xFF	; 255
 bee:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_voidWriteString(u8* x)
{
	u8 i = 0;
	while(*(x+i) != '\0')
 bf0:	89 81       	ldd	r24, Y+1	; 0x01
 bf2:	88 2f       	mov	r24, r24
 bf4:	90 e0       	ldi	r25, 0x00	; 0
 bf6:	2a 81       	ldd	r18, Y+2	; 0x02
 bf8:	3b 81       	ldd	r19, Y+3	; 0x03
 bfa:	82 0f       	add	r24, r18
 bfc:	93 1f       	adc	r25, r19
 bfe:	fc 01       	movw	r30, r24
 c00:	80 81       	ld	r24, Z
 c02:	88 23       	and	r24, r24
 c04:	39 f7       	brne	.-50     	; 0xbd4 <LCD_voidWriteString+0x14>
	{
		LCD_voidWriteChar(*(x + i));
		i++;
	}
}
 c06:	00 00       	nop
 c08:	0f 90       	pop	r0
 c0a:	0f 90       	pop	r0
 c0c:	0f 90       	pop	r0
 c0e:	df 91       	pop	r29
 c10:	cf 91       	pop	r28
 c12:	08 95       	ret

00000c14 <main>:
#include "BIT_MATH.h"
#include "DIO_int.h"
#include "LCD_int.h"
#include "avr/delay.h"

int main(void){
 c14:	cf 93       	push	r28
 c16:	df 93       	push	r29
 c18:	cd b7       	in	r28, 0x3d	; 61
 c1a:	de b7       	in	r29, 0x3e	; 62
 c1c:	66 97       	sbiw	r28, 0x16	; 22
 c1e:	0f b6       	in	r0, 0x3f	; 63
 c20:	f8 94       	cli
 c22:	de bf       	out	0x3e, r29	; 62
 c24:	0f be       	out	0x3f, r0	; 63
 c26:	cd bf       	out	0x3d, r28	; 61


	DIO_voidInitialize();
 c28:	0e 94 41 00 	call	0x82	; 0x82 <DIO_voidInitialize>
	LCD_voidInitialize();
 c2c:	0e 94 43 02 	call	0x486	; 0x486 <LCD_voidInitialize>
	u8 test[] = "TESTING";
 c30:	88 e0       	ldi	r24, 0x08	; 8
 c32:	e0 e6       	ldi	r30, 0x60	; 96
 c34:	f0 e0       	ldi	r31, 0x00	; 0
 c36:	de 01       	movw	r26, r28
 c38:	1f 96       	adiw	r26, 0x0f	; 15
 c3a:	01 90       	ld	r0, Z+
 c3c:	0d 92       	st	X+, r0
 c3e:	8a 95       	dec	r24
 c40:	e1 f7       	brne	.-8      	; 0xc3a <main+0x26>

	while(1){
		//LCD_ClrScreen();
		LCD_voidWriteChar('m');
 c42:	8d e6       	ldi	r24, 0x6D	; 109
 c44:	0e 94 2b 04 	call	0x856	; 0x856 <LCD_voidWriteChar>
		LCD_voidWriteChar('i');
 c48:	89 e6       	ldi	r24, 0x69	; 105
 c4a:	0e 94 2b 04 	call	0x856	; 0x856 <LCD_voidWriteChar>
 c4e:	80 e0       	ldi	r24, 0x00	; 0
 c50:	90 e4       	ldi	r25, 0x40	; 64
 c52:	ac e9       	ldi	r26, 0x9C	; 156
 c54:	b5 e4       	ldi	r27, 0x45	; 69
 c56:	89 83       	std	Y+1, r24	; 0x01
 c58:	9a 83       	std	Y+2, r25	; 0x02
 c5a:	ab 83       	std	Y+3, r26	; 0x03
 c5c:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 c5e:	20 e0       	ldi	r18, 0x00	; 0
 c60:	30 e0       	ldi	r19, 0x00	; 0
 c62:	4a ef       	ldi	r20, 0xFA	; 250
 c64:	54 e4       	ldi	r21, 0x44	; 68
 c66:	69 81       	ldd	r22, Y+1	; 0x01
 c68:	7a 81       	ldd	r23, Y+2	; 0x02
 c6a:	8b 81       	ldd	r24, Y+3	; 0x03
 c6c:	9c 81       	ldd	r25, Y+4	; 0x04
 c6e:	0e 94 20 07 	call	0xe40	; 0xe40 <__mulsf3>
 c72:	dc 01       	movw	r26, r24
 c74:	cb 01       	movw	r24, r22
 c76:	8d 83       	std	Y+5, r24	; 0x05
 c78:	9e 83       	std	Y+6, r25	; 0x06
 c7a:	af 83       	std	Y+7, r26	; 0x07
 c7c:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 c7e:	20 e0       	ldi	r18, 0x00	; 0
 c80:	30 e0       	ldi	r19, 0x00	; 0
 c82:	40 e8       	ldi	r20, 0x80	; 128
 c84:	5f e3       	ldi	r21, 0x3F	; 63
 c86:	6d 81       	ldd	r22, Y+5	; 0x05
 c88:	7e 81       	ldd	r23, Y+6	; 0x06
 c8a:	8f 81       	ldd	r24, Y+7	; 0x07
 c8c:	98 85       	ldd	r25, Y+8	; 0x08
 c8e:	0e 94 9a 06 	call	0xd34	; 0xd34 <__cmpsf2>
 c92:	88 23       	and	r24, r24
 c94:	2c f4       	brge	.+10     	; 0xca0 <main+0x8c>
		__ticks = 1;
 c96:	81 e0       	ldi	r24, 0x01	; 1
 c98:	90 e0       	ldi	r25, 0x00	; 0
 c9a:	9a 87       	std	Y+10, r25	; 0x0a
 c9c:	89 87       	std	Y+9, r24	; 0x09
 c9e:	3f c0       	rjmp	.+126    	; 0xd1e <main+0x10a>
	else if (__tmp > 65535)
 ca0:	20 e0       	ldi	r18, 0x00	; 0
 ca2:	3f ef       	ldi	r19, 0xFF	; 255
 ca4:	4f e7       	ldi	r20, 0x7F	; 127
 ca6:	57 e4       	ldi	r21, 0x47	; 71
 ca8:	6d 81       	ldd	r22, Y+5	; 0x05
 caa:	7e 81       	ldd	r23, Y+6	; 0x06
 cac:	8f 81       	ldd	r24, Y+7	; 0x07
 cae:	98 85       	ldd	r25, Y+8	; 0x08
 cb0:	0e 94 1b 07 	call	0xe36	; 0xe36 <__gesf2>
 cb4:	18 16       	cp	r1, r24
 cb6:	4c f5       	brge	.+82     	; 0xd0a <main+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 cb8:	20 e0       	ldi	r18, 0x00	; 0
 cba:	30 e0       	ldi	r19, 0x00	; 0
 cbc:	40 e2       	ldi	r20, 0x20	; 32
 cbe:	51 e4       	ldi	r21, 0x41	; 65
 cc0:	69 81       	ldd	r22, Y+1	; 0x01
 cc2:	7a 81       	ldd	r23, Y+2	; 0x02
 cc4:	8b 81       	ldd	r24, Y+3	; 0x03
 cc6:	9c 81       	ldd	r25, Y+4	; 0x04
 cc8:	0e 94 20 07 	call	0xe40	; 0xe40 <__mulsf3>
 ccc:	dc 01       	movw	r26, r24
 cce:	cb 01       	movw	r24, r22
 cd0:	bc 01       	movw	r22, r24
 cd2:	cd 01       	movw	r24, r26
 cd4:	0e 94 9f 06 	call	0xd3e	; 0xd3e <__fixunssfsi>
 cd8:	dc 01       	movw	r26, r24
 cda:	cb 01       	movw	r24, r22
 cdc:	9a 87       	std	Y+10, r25	; 0x0a
 cde:	89 87       	std	Y+9, r24	; 0x09
 ce0:	0f c0       	rjmp	.+30     	; 0xd00 <main+0xec>
 ce2:	88 ec       	ldi	r24, 0xC8	; 200
 ce4:	90 e0       	ldi	r25, 0x00	; 0
 ce6:	9c 87       	std	Y+12, r25	; 0x0c
 ce8:	8b 87       	std	Y+11, r24	; 0x0b
 cea:	8b 85       	ldd	r24, Y+11	; 0x0b
 cec:	9c 85       	ldd	r25, Y+12	; 0x0c
 cee:	01 97       	sbiw	r24, 0x01	; 1
 cf0:	f1 f7       	brne	.-4      	; 0xcee <main+0xda>
 cf2:	9c 87       	std	Y+12, r25	; 0x0c
 cf4:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 cf6:	89 85       	ldd	r24, Y+9	; 0x09
 cf8:	9a 85       	ldd	r25, Y+10	; 0x0a
 cfa:	01 97       	sbiw	r24, 0x01	; 1
 cfc:	9a 87       	std	Y+10, r25	; 0x0a
 cfe:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 d00:	89 85       	ldd	r24, Y+9	; 0x09
 d02:	9a 85       	ldd	r25, Y+10	; 0x0a
 d04:	89 2b       	or	r24, r25
 d06:	69 f7       	brne	.-38     	; 0xce2 <main+0xce>
 d08:	14 c0       	rjmp	.+40     	; 0xd32 <main+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 d0a:	6d 81       	ldd	r22, Y+5	; 0x05
 d0c:	7e 81       	ldd	r23, Y+6	; 0x06
 d0e:	8f 81       	ldd	r24, Y+7	; 0x07
 d10:	98 85       	ldd	r25, Y+8	; 0x08
 d12:	0e 94 9f 06 	call	0xd3e	; 0xd3e <__fixunssfsi>
 d16:	dc 01       	movw	r26, r24
 d18:	cb 01       	movw	r24, r22
 d1a:	9a 87       	std	Y+10, r25	; 0x0a
 d1c:	89 87       	std	Y+9, r24	; 0x09
 d1e:	89 85       	ldd	r24, Y+9	; 0x09
 d20:	9a 85       	ldd	r25, Y+10	; 0x0a
 d22:	9e 87       	std	Y+14, r25	; 0x0e
 d24:	8d 87       	std	Y+13, r24	; 0x0d
 d26:	8d 85       	ldd	r24, Y+13	; 0x0d
 d28:	9e 85       	ldd	r25, Y+14	; 0x0e
 d2a:	01 97       	sbiw	r24, 0x01	; 1
 d2c:	f1 f7       	brne	.-4      	; 0xd2a <main+0x116>
 d2e:	9e 87       	std	Y+14, r25	; 0x0e
 d30:	8d 87       	std	Y+13, r24	; 0x0d
		LCD_voidWriteChar('a');
		*/
		_delay_ms(5000);
		//

	}
 d32:	87 cf       	rjmp	.-242    	; 0xc42 <main+0x2e>

00000d34 <__cmpsf2>:
 d34:	0e 94 ce 06 	call	0xd9c	; 0xd9c <__fp_cmp>
 d38:	08 f4       	brcc	.+2      	; 0xd3c <__cmpsf2+0x8>
 d3a:	81 e0       	ldi	r24, 0x01	; 1
 d3c:	08 95       	ret

00000d3e <__fixunssfsi>:
 d3e:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <__fp_splitA>
 d42:	88 f0       	brcs	.+34     	; 0xd66 <__fixunssfsi+0x28>
 d44:	9f 57       	subi	r25, 0x7F	; 127
 d46:	98 f0       	brcs	.+38     	; 0xd6e <__fixunssfsi+0x30>
 d48:	b9 2f       	mov	r27, r25
 d4a:	99 27       	eor	r25, r25
 d4c:	b7 51       	subi	r27, 0x17	; 23
 d4e:	b0 f0       	brcs	.+44     	; 0xd7c <__fixunssfsi+0x3e>
 d50:	e1 f0       	breq	.+56     	; 0xd8a <__fixunssfsi+0x4c>
 d52:	66 0f       	add	r22, r22
 d54:	77 1f       	adc	r23, r23
 d56:	88 1f       	adc	r24, r24
 d58:	99 1f       	adc	r25, r25
 d5a:	1a f0       	brmi	.+6      	; 0xd62 <__fixunssfsi+0x24>
 d5c:	ba 95       	dec	r27
 d5e:	c9 f7       	brne	.-14     	; 0xd52 <__fixunssfsi+0x14>
 d60:	14 c0       	rjmp	.+40     	; 0xd8a <__fixunssfsi+0x4c>
 d62:	b1 30       	cpi	r27, 0x01	; 1
 d64:	91 f0       	breq	.+36     	; 0xd8a <__fixunssfsi+0x4c>
 d66:	0e 94 14 07 	call	0xe28	; 0xe28 <__fp_zero>
 d6a:	b1 e0       	ldi	r27, 0x01	; 1
 d6c:	08 95       	ret
 d6e:	0c 94 14 07 	jmp	0xe28	; 0xe28 <__fp_zero>
 d72:	67 2f       	mov	r22, r23
 d74:	78 2f       	mov	r23, r24
 d76:	88 27       	eor	r24, r24
 d78:	b8 5f       	subi	r27, 0xF8	; 248
 d7a:	39 f0       	breq	.+14     	; 0xd8a <__fixunssfsi+0x4c>
 d7c:	b9 3f       	cpi	r27, 0xF9	; 249
 d7e:	cc f3       	brlt	.-14     	; 0xd72 <__fixunssfsi+0x34>
 d80:	86 95       	lsr	r24
 d82:	77 95       	ror	r23
 d84:	67 95       	ror	r22
 d86:	b3 95       	inc	r27
 d88:	d9 f7       	brne	.-10     	; 0xd80 <__fixunssfsi+0x42>
 d8a:	3e f4       	brtc	.+14     	; 0xd9a <__fixunssfsi+0x5c>
 d8c:	90 95       	com	r25
 d8e:	80 95       	com	r24
 d90:	70 95       	com	r23
 d92:	61 95       	neg	r22
 d94:	7f 4f       	sbci	r23, 0xFF	; 255
 d96:	8f 4f       	sbci	r24, 0xFF	; 255
 d98:	9f 4f       	sbci	r25, 0xFF	; 255
 d9a:	08 95       	ret

00000d9c <__fp_cmp>:
 d9c:	99 0f       	add	r25, r25
 d9e:	00 08       	sbc	r0, r0
 da0:	55 0f       	add	r21, r21
 da2:	aa 0b       	sbc	r26, r26
 da4:	e0 e8       	ldi	r30, 0x80	; 128
 da6:	fe ef       	ldi	r31, 0xFE	; 254
 da8:	16 16       	cp	r1, r22
 daa:	17 06       	cpc	r1, r23
 dac:	e8 07       	cpc	r30, r24
 dae:	f9 07       	cpc	r31, r25
 db0:	c0 f0       	brcs	.+48     	; 0xde2 <__fp_cmp+0x46>
 db2:	12 16       	cp	r1, r18
 db4:	13 06       	cpc	r1, r19
 db6:	e4 07       	cpc	r30, r20
 db8:	f5 07       	cpc	r31, r21
 dba:	98 f0       	brcs	.+38     	; 0xde2 <__fp_cmp+0x46>
 dbc:	62 1b       	sub	r22, r18
 dbe:	73 0b       	sbc	r23, r19
 dc0:	84 0b       	sbc	r24, r20
 dc2:	95 0b       	sbc	r25, r21
 dc4:	39 f4       	brne	.+14     	; 0xdd4 <__fp_cmp+0x38>
 dc6:	0a 26       	eor	r0, r26
 dc8:	61 f0       	breq	.+24     	; 0xde2 <__fp_cmp+0x46>
 dca:	23 2b       	or	r18, r19
 dcc:	24 2b       	or	r18, r20
 dce:	25 2b       	or	r18, r21
 dd0:	21 f4       	brne	.+8      	; 0xdda <__fp_cmp+0x3e>
 dd2:	08 95       	ret
 dd4:	0a 26       	eor	r0, r26
 dd6:	09 f4       	brne	.+2      	; 0xdda <__fp_cmp+0x3e>
 dd8:	a1 40       	sbci	r26, 0x01	; 1
 dda:	a6 95       	lsr	r26
 ddc:	8f ef       	ldi	r24, 0xFF	; 255
 dde:	81 1d       	adc	r24, r1
 de0:	81 1d       	adc	r24, r1
 de2:	08 95       	ret

00000de4 <__fp_split3>:
 de4:	57 fd       	sbrc	r21, 7
 de6:	90 58       	subi	r25, 0x80	; 128
 de8:	44 0f       	add	r20, r20
 dea:	55 1f       	adc	r21, r21
 dec:	59 f0       	breq	.+22     	; 0xe04 <__fp_splitA+0x10>
 dee:	5f 3f       	cpi	r21, 0xFF	; 255
 df0:	71 f0       	breq	.+28     	; 0xe0e <__fp_splitA+0x1a>
 df2:	47 95       	ror	r20

00000df4 <__fp_splitA>:
 df4:	88 0f       	add	r24, r24
 df6:	97 fb       	bst	r25, 7
 df8:	99 1f       	adc	r25, r25
 dfa:	61 f0       	breq	.+24     	; 0xe14 <__fp_splitA+0x20>
 dfc:	9f 3f       	cpi	r25, 0xFF	; 255
 dfe:	79 f0       	breq	.+30     	; 0xe1e <__fp_splitA+0x2a>
 e00:	87 95       	ror	r24
 e02:	08 95       	ret
 e04:	12 16       	cp	r1, r18
 e06:	13 06       	cpc	r1, r19
 e08:	14 06       	cpc	r1, r20
 e0a:	55 1f       	adc	r21, r21
 e0c:	f2 cf       	rjmp	.-28     	; 0xdf2 <__fp_split3+0xe>
 e0e:	46 95       	lsr	r20
 e10:	f1 df       	rcall	.-30     	; 0xdf4 <__fp_splitA>
 e12:	08 c0       	rjmp	.+16     	; 0xe24 <__fp_splitA+0x30>
 e14:	16 16       	cp	r1, r22
 e16:	17 06       	cpc	r1, r23
 e18:	18 06       	cpc	r1, r24
 e1a:	99 1f       	adc	r25, r25
 e1c:	f1 cf       	rjmp	.-30     	; 0xe00 <__fp_splitA+0xc>
 e1e:	86 95       	lsr	r24
 e20:	71 05       	cpc	r23, r1
 e22:	61 05       	cpc	r22, r1
 e24:	08 94       	sec
 e26:	08 95       	ret

00000e28 <__fp_zero>:
 e28:	e8 94       	clt

00000e2a <__fp_szero>:
 e2a:	bb 27       	eor	r27, r27
 e2c:	66 27       	eor	r22, r22
 e2e:	77 27       	eor	r23, r23
 e30:	cb 01       	movw	r24, r22
 e32:	97 f9       	bld	r25, 7
 e34:	08 95       	ret

00000e36 <__gesf2>:
 e36:	0e 94 ce 06 	call	0xd9c	; 0xd9c <__fp_cmp>
 e3a:	08 f4       	brcc	.+2      	; 0xe3e <__gesf2+0x8>
 e3c:	8f ef       	ldi	r24, 0xFF	; 255
 e3e:	08 95       	ret

00000e40 <__mulsf3>:
 e40:	0e 94 33 07 	call	0xe66	; 0xe66 <__mulsf3x>
 e44:	0c 94 a4 07 	jmp	0xf48	; 0xf48 <__fp_round>
 e48:	0e 94 96 07 	call	0xf2c	; 0xf2c <__fp_pscA>
 e4c:	38 f0       	brcs	.+14     	; 0xe5c <__mulsf3+0x1c>
 e4e:	0e 94 9d 07 	call	0xf3a	; 0xf3a <__fp_pscB>
 e52:	20 f0       	brcs	.+8      	; 0xe5c <__mulsf3+0x1c>
 e54:	95 23       	and	r25, r21
 e56:	11 f0       	breq	.+4      	; 0xe5c <__mulsf3+0x1c>
 e58:	0c 94 8d 07 	jmp	0xf1a	; 0xf1a <__fp_inf>
 e5c:	0c 94 93 07 	jmp	0xf26	; 0xf26 <__fp_nan>
 e60:	11 24       	eor	r1, r1
 e62:	0c 94 15 07 	jmp	0xe2a	; 0xe2a <__fp_szero>

00000e66 <__mulsf3x>:
 e66:	0e 94 f2 06 	call	0xde4	; 0xde4 <__fp_split3>
 e6a:	70 f3       	brcs	.-36     	; 0xe48 <__mulsf3+0x8>

00000e6c <__mulsf3_pse>:
 e6c:	95 9f       	mul	r25, r21
 e6e:	c1 f3       	breq	.-16     	; 0xe60 <__mulsf3+0x20>
 e70:	95 0f       	add	r25, r21
 e72:	50 e0       	ldi	r21, 0x00	; 0
 e74:	55 1f       	adc	r21, r21
 e76:	62 9f       	mul	r22, r18
 e78:	f0 01       	movw	r30, r0
 e7a:	72 9f       	mul	r23, r18
 e7c:	bb 27       	eor	r27, r27
 e7e:	f0 0d       	add	r31, r0
 e80:	b1 1d       	adc	r27, r1
 e82:	63 9f       	mul	r22, r19
 e84:	aa 27       	eor	r26, r26
 e86:	f0 0d       	add	r31, r0
 e88:	b1 1d       	adc	r27, r1
 e8a:	aa 1f       	adc	r26, r26
 e8c:	64 9f       	mul	r22, r20
 e8e:	66 27       	eor	r22, r22
 e90:	b0 0d       	add	r27, r0
 e92:	a1 1d       	adc	r26, r1
 e94:	66 1f       	adc	r22, r22
 e96:	82 9f       	mul	r24, r18
 e98:	22 27       	eor	r18, r18
 e9a:	b0 0d       	add	r27, r0
 e9c:	a1 1d       	adc	r26, r1
 e9e:	62 1f       	adc	r22, r18
 ea0:	73 9f       	mul	r23, r19
 ea2:	b0 0d       	add	r27, r0
 ea4:	a1 1d       	adc	r26, r1
 ea6:	62 1f       	adc	r22, r18
 ea8:	83 9f       	mul	r24, r19
 eaa:	a0 0d       	add	r26, r0
 eac:	61 1d       	adc	r22, r1
 eae:	22 1f       	adc	r18, r18
 eb0:	74 9f       	mul	r23, r20
 eb2:	33 27       	eor	r19, r19
 eb4:	a0 0d       	add	r26, r0
 eb6:	61 1d       	adc	r22, r1
 eb8:	23 1f       	adc	r18, r19
 eba:	84 9f       	mul	r24, r20
 ebc:	60 0d       	add	r22, r0
 ebe:	21 1d       	adc	r18, r1
 ec0:	82 2f       	mov	r24, r18
 ec2:	76 2f       	mov	r23, r22
 ec4:	6a 2f       	mov	r22, r26
 ec6:	11 24       	eor	r1, r1
 ec8:	9f 57       	subi	r25, 0x7F	; 127
 eca:	50 40       	sbci	r21, 0x00	; 0
 ecc:	9a f0       	brmi	.+38     	; 0xef4 <__mulsf3_pse+0x88>
 ece:	f1 f0       	breq	.+60     	; 0xf0c <__mulsf3_pse+0xa0>
 ed0:	88 23       	and	r24, r24
 ed2:	4a f0       	brmi	.+18     	; 0xee6 <__mulsf3_pse+0x7a>
 ed4:	ee 0f       	add	r30, r30
 ed6:	ff 1f       	adc	r31, r31
 ed8:	bb 1f       	adc	r27, r27
 eda:	66 1f       	adc	r22, r22
 edc:	77 1f       	adc	r23, r23
 ede:	88 1f       	adc	r24, r24
 ee0:	91 50       	subi	r25, 0x01	; 1
 ee2:	50 40       	sbci	r21, 0x00	; 0
 ee4:	a9 f7       	brne	.-22     	; 0xed0 <__mulsf3_pse+0x64>
 ee6:	9e 3f       	cpi	r25, 0xFE	; 254
 ee8:	51 05       	cpc	r21, r1
 eea:	80 f0       	brcs	.+32     	; 0xf0c <__mulsf3_pse+0xa0>
 eec:	0c 94 8d 07 	jmp	0xf1a	; 0xf1a <__fp_inf>
 ef0:	0c 94 15 07 	jmp	0xe2a	; 0xe2a <__fp_szero>
 ef4:	5f 3f       	cpi	r21, 0xFF	; 255
 ef6:	e4 f3       	brlt	.-8      	; 0xef0 <__mulsf3_pse+0x84>
 ef8:	98 3e       	cpi	r25, 0xE8	; 232
 efa:	d4 f3       	brlt	.-12     	; 0xef0 <__mulsf3_pse+0x84>
 efc:	86 95       	lsr	r24
 efe:	77 95       	ror	r23
 f00:	67 95       	ror	r22
 f02:	b7 95       	ror	r27
 f04:	f7 95       	ror	r31
 f06:	e7 95       	ror	r30
 f08:	9f 5f       	subi	r25, 0xFF	; 255
 f0a:	c1 f7       	brne	.-16     	; 0xefc <__mulsf3_pse+0x90>
 f0c:	fe 2b       	or	r31, r30
 f0e:	88 0f       	add	r24, r24
 f10:	91 1d       	adc	r25, r1
 f12:	96 95       	lsr	r25
 f14:	87 95       	ror	r24
 f16:	97 f9       	bld	r25, 7
 f18:	08 95       	ret

00000f1a <__fp_inf>:
 f1a:	97 f9       	bld	r25, 7
 f1c:	9f 67       	ori	r25, 0x7F	; 127
 f1e:	80 e8       	ldi	r24, 0x80	; 128
 f20:	70 e0       	ldi	r23, 0x00	; 0
 f22:	60 e0       	ldi	r22, 0x00	; 0
 f24:	08 95       	ret

00000f26 <__fp_nan>:
 f26:	9f ef       	ldi	r25, 0xFF	; 255
 f28:	80 ec       	ldi	r24, 0xC0	; 192
 f2a:	08 95       	ret

00000f2c <__fp_pscA>:
 f2c:	00 24       	eor	r0, r0
 f2e:	0a 94       	dec	r0
 f30:	16 16       	cp	r1, r22
 f32:	17 06       	cpc	r1, r23
 f34:	18 06       	cpc	r1, r24
 f36:	09 06       	cpc	r0, r25
 f38:	08 95       	ret

00000f3a <__fp_pscB>:
 f3a:	00 24       	eor	r0, r0
 f3c:	0a 94       	dec	r0
 f3e:	12 16       	cp	r1, r18
 f40:	13 06       	cpc	r1, r19
 f42:	14 06       	cpc	r1, r20
 f44:	05 06       	cpc	r0, r21
 f46:	08 95       	ret

00000f48 <__fp_round>:
 f48:	09 2e       	mov	r0, r25
 f4a:	03 94       	inc	r0
 f4c:	00 0c       	add	r0, r0
 f4e:	11 f4       	brne	.+4      	; 0xf54 <__fp_round+0xc>
 f50:	88 23       	and	r24, r24
 f52:	52 f0       	brmi	.+20     	; 0xf68 <__fp_round+0x20>
 f54:	bb 0f       	add	r27, r27
 f56:	40 f4       	brcc	.+16     	; 0xf68 <__fp_round+0x20>
 f58:	bf 2b       	or	r27, r31
 f5a:	11 f4       	brne	.+4      	; 0xf60 <__fp_round+0x18>
 f5c:	60 ff       	sbrs	r22, 0
 f5e:	04 c0       	rjmp	.+8      	; 0xf68 <__fp_round+0x20>
 f60:	6f 5f       	subi	r22, 0xFF	; 255
 f62:	7f 4f       	sbci	r23, 0xFF	; 255
 f64:	8f 4f       	sbci	r24, 0xFF	; 255
 f66:	9f 4f       	sbci	r25, 0xFF	; 255
 f68:	08 95       	ret

00000f6a <_exit>:
 f6a:	f8 94       	cli

00000f6c <__stop_program>:
 f6c:	ff cf       	rjmp	.-2      	; 0xf6c <__stop_program>
