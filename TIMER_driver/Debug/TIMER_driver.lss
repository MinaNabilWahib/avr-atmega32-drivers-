
TIMER_driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b88  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000b88  00000c1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800062  00800062  00000c1e  2**0
                  ALLOC
  3 .stab         00001f80  00000000  00000000  00000c20  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000eb7  00000000  00000000  00002ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00003a57  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003a68  2**2
                  CONTENTS, READONLY
  7 .debug_info   000004e6  00000000  00000000  00003aa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004a3  00000000  00000000  00003f8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  0000442d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000196  00000000  00000000  00004447  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 8a 00 	jmp	0x114	; 0x114 <__ctors_end>
   4:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
   8:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
   c:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  10:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  14:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  18:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  1c:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  20:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  24:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  28:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  2c:	0c 94 5a 05 	jmp	0xab4	; 0xab4 <__vector_11>
  30:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  34:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  38:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  3c:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  40:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  44:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  48:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  4c:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  50:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  54:	ef 02       	muls	r30, r31
  56:	f4 02       	muls	r31, r20
  58:	f9 02       	muls	r31, r25
  5a:	fe 02       	muls	r31, r30
  5c:	03 03       	mulsu	r16, r19
  5e:	08 03       	fmul	r16, r16
  60:	0d 03       	fmul	r16, r21
  62:	12 03       	mulsu	r17, r18
  64:	17 03       	mulsu	r17, r23
  66:	1c 03       	fmul	r17, r20
  68:	21 03       	mulsu	r18, r17
  6a:	26 03       	mulsu	r18, r22
  6c:	2b 03       	fmul	r18, r19
  6e:	30 03       	mulsu	r19, r16
  70:	35 03       	mulsu	r19, r21
  72:	3a 03       	fmul	r19, r18
  74:	3f 03       	fmul	r19, r23
  76:	44 03       	mulsu	r20, r20
  78:	49 03       	fmul	r20, r17
  7a:	4e 03       	fmul	r20, r22
  7c:	53 03       	mulsu	r21, r19
  7e:	58 03       	fmul	r21, r16
  80:	5d 03       	fmul	r21, r21
  82:	62 03       	mulsu	r22, r18
  84:	67 03       	mulsu	r22, r23
  86:	6c 03       	fmul	r22, r20
  88:	71 03       	mulsu	r23, r17
  8a:	76 03       	mulsu	r23, r22
  8c:	7b 03       	fmul	r23, r19
  8e:	80 03       	fmuls	r16, r16
  90:	85 03       	fmuls	r16, r21
  92:	8a 03       	fmulsu	r16, r18
  94:	b0 03       	fmuls	r19, r16
  96:	b5 03       	fmuls	r19, r21
  98:	ba 03       	fmulsu	r19, r18
  9a:	bf 03       	fmulsu	r19, r23
  9c:	c4 03       	fmuls	r20, r20
  9e:	c9 03       	fmulsu	r20, r17
  a0:	ce 03       	fmulsu	r20, r22
  a2:	d3 03       	fmuls	r21, r19
  a4:	d8 03       	fmulsu	r21, r16
  a6:	dd 03       	fmulsu	r21, r21
  a8:	e2 03       	fmuls	r22, r18
  aa:	e7 03       	fmuls	r22, r23
  ac:	ec 03       	fmulsu	r22, r20
  ae:	f1 03       	fmuls	r23, r17
  b0:	f6 03       	fmuls	r23, r22
  b2:	fb 03       	fmulsu	r23, r19
  b4:	00 04       	cpc	r0, r0
  b6:	05 04       	cpc	r0, r5
  b8:	0a 04       	cpc	r0, r10
  ba:	0f 04       	cpc	r0, r15
  bc:	14 04       	cpc	r1, r4
  be:	19 04       	cpc	r1, r9
  c0:	1e 04       	cpc	r1, r14
  c2:	23 04       	cpc	r2, r3
  c4:	28 04       	cpc	r2, r8
  c6:	2d 04       	cpc	r2, r13
  c8:	32 04       	cpc	r3, r2
  ca:	37 04       	cpc	r3, r7
  cc:	3c 04       	cpc	r3, r12
  ce:	41 04       	cpc	r4, r1
  d0:	46 04       	cpc	r4, r6
  d2:	4b 04       	cpc	r4, r11
  d4:	71 04       	cpc	r7, r1
  d6:	75 04       	cpc	r7, r5
  d8:	79 04       	cpc	r7, r9
  da:	7d 04       	cpc	r7, r13
  dc:	81 04       	cpc	r8, r1
  de:	85 04       	cpc	r8, r5
  e0:	89 04       	cpc	r8, r9
  e2:	8d 04       	cpc	r8, r13
  e4:	91 04       	cpc	r9, r1
  e6:	95 04       	cpc	r9, r5
  e8:	99 04       	cpc	r9, r9
  ea:	9d 04       	cpc	r9, r13
  ec:	a1 04       	cpc	r10, r1
  ee:	a5 04       	cpc	r10, r5
  f0:	a9 04       	cpc	r10, r9
  f2:	ad 04       	cpc	r10, r13
  f4:	b1 04       	cpc	r11, r1
  f6:	b5 04       	cpc	r11, r5
  f8:	b9 04       	cpc	r11, r9
  fa:	bd 04       	cpc	r11, r13
  fc:	c1 04       	cpc	r12, r1
  fe:	c5 04       	cpc	r12, r5
 100:	c9 04       	cpc	r12, r9
 102:	cd 04       	cpc	r12, r13
 104:	d1 04       	cpc	r13, r1
 106:	d5 04       	cpc	r13, r5
 108:	d9 04       	cpc	r13, r9
 10a:	dd 04       	cpc	r13, r13
 10c:	e1 04       	cpc	r14, r1
 10e:	e5 04       	cpc	r14, r5
 110:	e9 04       	cpc	r14, r9
 112:	ed 04       	cpc	r14, r13

00000114 <__ctors_end>:
 114:	11 24       	eor	r1, r1
 116:	1f be       	out	0x3f, r1	; 63
 118:	cf e5       	ldi	r28, 0x5F	; 95
 11a:	d8 e0       	ldi	r29, 0x08	; 8
 11c:	de bf       	out	0x3e, r29	; 62
 11e:	cd bf       	out	0x3d, r28	; 61

00000120 <__do_copy_data>:
 120:	10 e0       	ldi	r17, 0x00	; 0
 122:	a0 e6       	ldi	r26, 0x60	; 96
 124:	b0 e0       	ldi	r27, 0x00	; 0
 126:	e8 e8       	ldi	r30, 0x88	; 136
 128:	fb e0       	ldi	r31, 0x0B	; 11
 12a:	02 c0       	rjmp	.+4      	; 0x130 <__do_copy_data+0x10>
 12c:	05 90       	lpm	r0, Z+
 12e:	0d 92       	st	X+, r0
 130:	a2 36       	cpi	r26, 0x62	; 98
 132:	b1 07       	cpc	r27, r17
 134:	d9 f7       	brne	.-10     	; 0x12c <__do_copy_data+0xc>

00000136 <__do_clear_bss>:
 136:	20 e0       	ldi	r18, 0x00	; 0
 138:	a2 e6       	ldi	r26, 0x62	; 98
 13a:	b0 e0       	ldi	r27, 0x00	; 0
 13c:	01 c0       	rjmp	.+2      	; 0x140 <.do_clear_bss_start>

0000013e <.do_clear_bss_loop>:
 13e:	1d 92       	st	X+, r1

00000140 <.do_clear_bss_start>:
 140:	a5 36       	cpi	r26, 0x65	; 101
 142:	b2 07       	cpc	r27, r18
 144:	e1 f7       	brne	.-8      	; 0x13e <.do_clear_bss_loop>
 146:	0e 94 8b 05 	call	0xb16	; 0xb16 <main>
 14a:	0c 94 c2 05 	jmp	0xb84	; 0xb84 <_exit>

0000014e <__bad_interrupt>:
 14e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000152 <DIO_voidInitialize>:
#include "BIT_MATH.h"
#include "DIO_priv.h"
#include "DIO_config.h"
#include "DIO_int.h"

void DIO_voidInitialize(void){
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	cd b7       	in	r28, 0x3d	; 61
 158:	de b7       	in	r29, 0x3e	; 62

	DDRA = CONCBIT(PIN_7DIR,PIN_6DIR,PIN_5DIR,PIN_4DIR,PIN_3DIR,PIN_2DIR,PIN_1DIR,PIN_0DIR);
 15a:	8a e3       	ldi	r24, 0x3A	; 58
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	2f e9       	ldi	r18, 0x9F	; 159
 160:	fc 01       	movw	r30, r24
 162:	20 83       	st	Z, r18
	DDRB = CONCBIT(PIN_15DIR,PIN_14DIR,PIN_13DIR,PIN_12DIR,PIN_11DIR,PIN_10DIR,PIN_9DIR,PIN_8DIR);
 164:	87 e3       	ldi	r24, 0x37	; 55
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	20 e1       	ldi	r18, 0x10	; 16
 16a:	fc 01       	movw	r30, r24
 16c:	20 83       	st	Z, r18
	DDRC = CONCBIT(PIN_23DIR,PIN_22DIR,PIN_21DIR,PIN_20DIR,PIN_19DIR,PIN_18DIR,PIN_17DIR,PIN_16DIR);
 16e:	84 e3       	ldi	r24, 0x34	; 52
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	fc 01       	movw	r30, r24
 174:	10 82       	st	Z, r1
	DDRD = CONCBIT(PIN_31DIR,PIN_30DIR,PIN_29DIR,PIN_28DIR,PIN_27DIR,PIN_26DIR,PIN_25DIR,PIN_24DIR);
 176:	81 e3       	ldi	r24, 0x31	; 49
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	fc 01       	movw	r30, r24
 17c:	10 82       	st	Z, r1

}
 17e:	00 00       	nop
 180:	df 91       	pop	r29
 182:	cf 91       	pop	r28
 184:	08 95       	ret

00000186 <DIO_voidSetPin>:

void DIO_voidSetPin(u8 PinNum,u8 Value){
 186:	cf 93       	push	r28
 188:	df 93       	push	r29
 18a:	00 d0       	rcall	.+0      	; 0x18c <DIO_voidSetPin+0x6>
 18c:	cd b7       	in	r28, 0x3d	; 61
 18e:	de b7       	in	r29, 0x3e	; 62
 190:	89 83       	std	Y+1, r24	; 0x01
 192:	6a 83       	std	Y+2, r22	; 0x02
    if (Value==HIGH){
 194:	8a 81       	ldd	r24, Y+2	; 0x02
 196:	81 30       	cpi	r24, 0x01	; 1
 198:	09 f0       	breq	.+2      	; 0x19c <DIO_voidSetPin+0x16>
 19a:	74 c0       	rjmp	.+232    	; 0x284 <DIO_voidSetPin+0xfe>

        if((PinNum>=0 && PinNum<8)){
 19c:	89 81       	ldd	r24, Y+1	; 0x01
 19e:	88 30       	cpi	r24, 0x08	; 8
 1a0:	a8 f4       	brcc	.+42     	; 0x1cc <DIO_voidSetPin+0x46>
            SETBIT(PORTA,PinNum);
 1a2:	8b e3       	ldi	r24, 0x3B	; 59
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	2b e3       	ldi	r18, 0x3B	; 59
 1a8:	30 e0       	ldi	r19, 0x00	; 0
 1aa:	f9 01       	movw	r30, r18
 1ac:	20 81       	ld	r18, Z
 1ae:	62 2f       	mov	r22, r18
 1b0:	29 81       	ldd	r18, Y+1	; 0x01
 1b2:	42 2f       	mov	r20, r18
 1b4:	50 e0       	ldi	r21, 0x00	; 0
 1b6:	21 e0       	ldi	r18, 0x01	; 1
 1b8:	30 e0       	ldi	r19, 0x00	; 0
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <DIO_voidSetPin+0x3a>
 1bc:	22 0f       	add	r18, r18
 1be:	33 1f       	adc	r19, r19
 1c0:	4a 95       	dec	r20
 1c2:	e2 f7       	brpl	.-8      	; 0x1bc <DIO_voidSetPin+0x36>
 1c4:	26 2b       	or	r18, r22
 1c6:	fc 01       	movw	r30, r24
 1c8:	20 83       	st	Z, r18
    	    CLRBIT(PORTD,PinNum-16);
    	}

    }

}
 1ca:	d6 c0       	rjmp	.+428    	; 0x378 <DIO_voidSetPin+0x1f2>
void DIO_voidSetPin(u8 PinNum,u8 Value){
    if (Value==HIGH){

        if((PinNum>=0 && PinNum<8)){
            SETBIT(PORTA,PinNum);
        }else if((PinNum>=8) && (PinNum<16)){
 1cc:	89 81       	ldd	r24, Y+1	; 0x01
 1ce:	88 30       	cpi	r24, 0x08	; 8
 1d0:	d8 f0       	brcs	.+54     	; 0x208 <DIO_voidSetPin+0x82>
 1d2:	89 81       	ldd	r24, Y+1	; 0x01
 1d4:	80 31       	cpi	r24, 0x10	; 16
 1d6:	c0 f4       	brcc	.+48     	; 0x208 <DIO_voidSetPin+0x82>
        	SETBIT(PORTB,PinNum-8);
 1d8:	88 e3       	ldi	r24, 0x38	; 56
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	28 e3       	ldi	r18, 0x38	; 56
 1de:	30 e0       	ldi	r19, 0x00	; 0
 1e0:	f9 01       	movw	r30, r18
 1e2:	20 81       	ld	r18, Z
 1e4:	62 2f       	mov	r22, r18
 1e6:	29 81       	ldd	r18, Y+1	; 0x01
 1e8:	22 2f       	mov	r18, r18
 1ea:	30 e0       	ldi	r19, 0x00	; 0
 1ec:	a9 01       	movw	r20, r18
 1ee:	48 50       	subi	r20, 0x08	; 8
 1f0:	51 09       	sbc	r21, r1
 1f2:	21 e0       	ldi	r18, 0x01	; 1
 1f4:	30 e0       	ldi	r19, 0x00	; 0
 1f6:	02 c0       	rjmp	.+4      	; 0x1fc <DIO_voidSetPin+0x76>
 1f8:	22 0f       	add	r18, r18
 1fa:	33 1f       	adc	r19, r19
 1fc:	4a 95       	dec	r20
 1fe:	e2 f7       	brpl	.-8      	; 0x1f8 <DIO_voidSetPin+0x72>
 200:	26 2b       	or	r18, r22
 202:	fc 01       	movw	r30, r24
 204:	20 83       	st	Z, r18
 206:	b8 c0       	rjmp	.+368    	; 0x378 <DIO_voidSetPin+0x1f2>
        }else if((PinNum>=16) && (PinNum<24)){
 208:	89 81       	ldd	r24, Y+1	; 0x01
 20a:	80 31       	cpi	r24, 0x10	; 16
 20c:	d8 f0       	brcs	.+54     	; 0x244 <DIO_voidSetPin+0xbe>
 20e:	89 81       	ldd	r24, Y+1	; 0x01
 210:	88 31       	cpi	r24, 0x18	; 24
 212:	c0 f4       	brcc	.+48     	; 0x244 <DIO_voidSetPin+0xbe>
        	SETBIT(PORTC,PinNum-16);
 214:	85 e3       	ldi	r24, 0x35	; 53
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	25 e3       	ldi	r18, 0x35	; 53
 21a:	30 e0       	ldi	r19, 0x00	; 0
 21c:	f9 01       	movw	r30, r18
 21e:	20 81       	ld	r18, Z
 220:	62 2f       	mov	r22, r18
 222:	29 81       	ldd	r18, Y+1	; 0x01
 224:	22 2f       	mov	r18, r18
 226:	30 e0       	ldi	r19, 0x00	; 0
 228:	a9 01       	movw	r20, r18
 22a:	40 51       	subi	r20, 0x10	; 16
 22c:	51 09       	sbc	r21, r1
 22e:	21 e0       	ldi	r18, 0x01	; 1
 230:	30 e0       	ldi	r19, 0x00	; 0
 232:	02 c0       	rjmp	.+4      	; 0x238 <DIO_voidSetPin+0xb2>
 234:	22 0f       	add	r18, r18
 236:	33 1f       	adc	r19, r19
 238:	4a 95       	dec	r20
 23a:	e2 f7       	brpl	.-8      	; 0x234 <DIO_voidSetPin+0xae>
 23c:	26 2b       	or	r18, r22
 23e:	fc 01       	movw	r30, r24
 240:	20 83       	st	Z, r18
 242:	9a c0       	rjmp	.+308    	; 0x378 <DIO_voidSetPin+0x1f2>
        }else if((PinNum>=24) && (PinNum<32)){
 244:	89 81       	ldd	r24, Y+1	; 0x01
 246:	88 31       	cpi	r24, 0x18	; 24
 248:	08 f4       	brcc	.+2      	; 0x24c <DIO_voidSetPin+0xc6>
 24a:	96 c0       	rjmp	.+300    	; 0x378 <DIO_voidSetPin+0x1f2>
 24c:	89 81       	ldd	r24, Y+1	; 0x01
 24e:	80 32       	cpi	r24, 0x20	; 32
 250:	08 f0       	brcs	.+2      	; 0x254 <DIO_voidSetPin+0xce>
 252:	92 c0       	rjmp	.+292    	; 0x378 <DIO_voidSetPin+0x1f2>
        	SETBIT(PORTD,PinNum-16);
 254:	82 e3       	ldi	r24, 0x32	; 50
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	22 e3       	ldi	r18, 0x32	; 50
 25a:	30 e0       	ldi	r19, 0x00	; 0
 25c:	f9 01       	movw	r30, r18
 25e:	20 81       	ld	r18, Z
 260:	62 2f       	mov	r22, r18
 262:	29 81       	ldd	r18, Y+1	; 0x01
 264:	22 2f       	mov	r18, r18
 266:	30 e0       	ldi	r19, 0x00	; 0
 268:	a9 01       	movw	r20, r18
 26a:	40 51       	subi	r20, 0x10	; 16
 26c:	51 09       	sbc	r21, r1
 26e:	21 e0       	ldi	r18, 0x01	; 1
 270:	30 e0       	ldi	r19, 0x00	; 0
 272:	02 c0       	rjmp	.+4      	; 0x278 <DIO_voidSetPin+0xf2>
 274:	22 0f       	add	r18, r18
 276:	33 1f       	adc	r19, r19
 278:	4a 95       	dec	r20
 27a:	e2 f7       	brpl	.-8      	; 0x274 <DIO_voidSetPin+0xee>
 27c:	26 2b       	or	r18, r22
 27e:	fc 01       	movw	r30, r24
 280:	20 83       	st	Z, r18
    	    CLRBIT(PORTD,PinNum-16);
    	}

    }

}
 282:	7a c0       	rjmp	.+244    	; 0x378 <DIO_voidSetPin+0x1f2>
        	SETBIT(PORTC,PinNum-16);
        }else if((PinNum>=24) && (PinNum<32)){
        	SETBIT(PORTD,PinNum-16);
        }

    }else if (Value==LOW){
 284:	8a 81       	ldd	r24, Y+2	; 0x02
 286:	88 23       	and	r24, r24
 288:	09 f0       	breq	.+2      	; 0x28c <DIO_voidSetPin+0x106>
 28a:	76 c0       	rjmp	.+236    	; 0x378 <DIO_voidSetPin+0x1f2>

    	if((PinNum>=0 && PinNum<8)){
 28c:	89 81       	ldd	r24, Y+1	; 0x01
 28e:	88 30       	cpi	r24, 0x08	; 8
 290:	b0 f4       	brcc	.+44     	; 0x2be <DIO_voidSetPin+0x138>
    	    CLRBIT(PORTA,PinNum);
 292:	8b e3       	ldi	r24, 0x3B	; 59
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	2b e3       	ldi	r18, 0x3B	; 59
 298:	30 e0       	ldi	r19, 0x00	; 0
 29a:	f9 01       	movw	r30, r18
 29c:	20 81       	ld	r18, Z
 29e:	62 2f       	mov	r22, r18
 2a0:	29 81       	ldd	r18, Y+1	; 0x01
 2a2:	42 2f       	mov	r20, r18
 2a4:	50 e0       	ldi	r21, 0x00	; 0
 2a6:	21 e0       	ldi	r18, 0x01	; 1
 2a8:	30 e0       	ldi	r19, 0x00	; 0
 2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <DIO_voidSetPin+0x12a>
 2ac:	22 0f       	add	r18, r18
 2ae:	33 1f       	adc	r19, r19
 2b0:	4a 95       	dec	r20
 2b2:	e2 f7       	brpl	.-8      	; 0x2ac <DIO_voidSetPin+0x126>
 2b4:	20 95       	com	r18
 2b6:	26 23       	and	r18, r22
 2b8:	fc 01       	movw	r30, r24
 2ba:	20 83       	st	Z, r18
    	    CLRBIT(PORTD,PinNum-16);
    	}

    }

}
 2bc:	5d c0       	rjmp	.+186    	; 0x378 <DIO_voidSetPin+0x1f2>

    }else if (Value==LOW){

    	if((PinNum>=0 && PinNum<8)){
    	    CLRBIT(PORTA,PinNum);
    	}else if((PinNum>=8) && (PinNum<16)){
 2be:	89 81       	ldd	r24, Y+1	; 0x01
 2c0:	88 30       	cpi	r24, 0x08	; 8
 2c2:	e0 f0       	brcs	.+56     	; 0x2fc <DIO_voidSetPin+0x176>
 2c4:	89 81       	ldd	r24, Y+1	; 0x01
 2c6:	80 31       	cpi	r24, 0x10	; 16
 2c8:	c8 f4       	brcc	.+50     	; 0x2fc <DIO_voidSetPin+0x176>
    	    CLRBIT(PORTB,PinNum-8);
 2ca:	88 e3       	ldi	r24, 0x38	; 56
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	28 e3       	ldi	r18, 0x38	; 56
 2d0:	30 e0       	ldi	r19, 0x00	; 0
 2d2:	f9 01       	movw	r30, r18
 2d4:	20 81       	ld	r18, Z
 2d6:	62 2f       	mov	r22, r18
 2d8:	29 81       	ldd	r18, Y+1	; 0x01
 2da:	22 2f       	mov	r18, r18
 2dc:	30 e0       	ldi	r19, 0x00	; 0
 2de:	a9 01       	movw	r20, r18
 2e0:	48 50       	subi	r20, 0x08	; 8
 2e2:	51 09       	sbc	r21, r1
 2e4:	21 e0       	ldi	r18, 0x01	; 1
 2e6:	30 e0       	ldi	r19, 0x00	; 0
 2e8:	02 c0       	rjmp	.+4      	; 0x2ee <DIO_voidSetPin+0x168>
 2ea:	22 0f       	add	r18, r18
 2ec:	33 1f       	adc	r19, r19
 2ee:	4a 95       	dec	r20
 2f0:	e2 f7       	brpl	.-8      	; 0x2ea <DIO_voidSetPin+0x164>
 2f2:	20 95       	com	r18
 2f4:	26 23       	and	r18, r22
 2f6:	fc 01       	movw	r30, r24
 2f8:	20 83       	st	Z, r18
 2fa:	3e c0       	rjmp	.+124    	; 0x378 <DIO_voidSetPin+0x1f2>
    	}else if((PinNum>=16) && (PinNum<24)){
 2fc:	89 81       	ldd	r24, Y+1	; 0x01
 2fe:	80 31       	cpi	r24, 0x10	; 16
 300:	e0 f0       	brcs	.+56     	; 0x33a <DIO_voidSetPin+0x1b4>
 302:	89 81       	ldd	r24, Y+1	; 0x01
 304:	88 31       	cpi	r24, 0x18	; 24
 306:	c8 f4       	brcc	.+50     	; 0x33a <DIO_voidSetPin+0x1b4>
    	    CLRBIT(PORTC,PinNum-16);
 308:	85 e3       	ldi	r24, 0x35	; 53
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	25 e3       	ldi	r18, 0x35	; 53
 30e:	30 e0       	ldi	r19, 0x00	; 0
 310:	f9 01       	movw	r30, r18
 312:	20 81       	ld	r18, Z
 314:	62 2f       	mov	r22, r18
 316:	29 81       	ldd	r18, Y+1	; 0x01
 318:	22 2f       	mov	r18, r18
 31a:	30 e0       	ldi	r19, 0x00	; 0
 31c:	a9 01       	movw	r20, r18
 31e:	40 51       	subi	r20, 0x10	; 16
 320:	51 09       	sbc	r21, r1
 322:	21 e0       	ldi	r18, 0x01	; 1
 324:	30 e0       	ldi	r19, 0x00	; 0
 326:	02 c0       	rjmp	.+4      	; 0x32c <DIO_voidSetPin+0x1a6>
 328:	22 0f       	add	r18, r18
 32a:	33 1f       	adc	r19, r19
 32c:	4a 95       	dec	r20
 32e:	e2 f7       	brpl	.-8      	; 0x328 <DIO_voidSetPin+0x1a2>
 330:	20 95       	com	r18
 332:	26 23       	and	r18, r22
 334:	fc 01       	movw	r30, r24
 336:	20 83       	st	Z, r18
 338:	1f c0       	rjmp	.+62     	; 0x378 <DIO_voidSetPin+0x1f2>
    	}else if((PinNum>=24) && (PinNum<32)){
 33a:	89 81       	ldd	r24, Y+1	; 0x01
 33c:	88 31       	cpi	r24, 0x18	; 24
 33e:	e0 f0       	brcs	.+56     	; 0x378 <DIO_voidSetPin+0x1f2>
 340:	89 81       	ldd	r24, Y+1	; 0x01
 342:	80 32       	cpi	r24, 0x20	; 32
 344:	c8 f4       	brcc	.+50     	; 0x378 <DIO_voidSetPin+0x1f2>
    	    CLRBIT(PORTD,PinNum-16);
 346:	82 e3       	ldi	r24, 0x32	; 50
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	22 e3       	ldi	r18, 0x32	; 50
 34c:	30 e0       	ldi	r19, 0x00	; 0
 34e:	f9 01       	movw	r30, r18
 350:	20 81       	ld	r18, Z
 352:	62 2f       	mov	r22, r18
 354:	29 81       	ldd	r18, Y+1	; 0x01
 356:	22 2f       	mov	r18, r18
 358:	30 e0       	ldi	r19, 0x00	; 0
 35a:	a9 01       	movw	r20, r18
 35c:	40 51       	subi	r20, 0x10	; 16
 35e:	51 09       	sbc	r21, r1
 360:	21 e0       	ldi	r18, 0x01	; 1
 362:	30 e0       	ldi	r19, 0x00	; 0
 364:	02 c0       	rjmp	.+4      	; 0x36a <DIO_voidSetPin+0x1e4>
 366:	22 0f       	add	r18, r18
 368:	33 1f       	adc	r19, r19
 36a:	4a 95       	dec	r20
 36c:	e2 f7       	brpl	.-8      	; 0x366 <DIO_voidSetPin+0x1e0>
 36e:	20 95       	com	r18
 370:	26 23       	and	r18, r22
 372:	fc 01       	movw	r30, r24
 374:	20 83       	st	Z, r18
    	}

    }

}
 376:	00 c0       	rjmp	.+0      	; 0x378 <DIO_voidSetPin+0x1f2>
 378:	00 00       	nop
 37a:	0f 90       	pop	r0
 37c:	0f 90       	pop	r0
 37e:	df 91       	pop	r29
 380:	cf 91       	pop	r28
 382:	08 95       	ret

00000384 <DIO_u8GetPin>:

u8 DIO_u8GetPin(u8 PinNum){
 384:	cf 93       	push	r28
 386:	df 93       	push	r29
 388:	00 d0       	rcall	.+0      	; 0x38a <DIO_u8GetPin+0x6>
 38a:	cd b7       	in	r28, 0x3d	; 61
 38c:	de b7       	in	r29, 0x3e	; 62
 38e:	8a 83       	std	Y+2, r24	; 0x02

	u8 ret;

	if((PinNum>=0 && PinNum<8)){
 390:	8a 81       	ldd	r24, Y+2	; 0x02
 392:	88 30       	cpi	r24, 0x08	; 8
 394:	88 f4       	brcc	.+34     	; 0x3b8 <DIO_u8GetPin+0x34>
	     ret= GETBIT(PINA,PinNum);
 396:	89 e3       	ldi	r24, 0x39	; 57
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	fc 01       	movw	r30, r24
 39c:	80 81       	ld	r24, Z
 39e:	88 2f       	mov	r24, r24
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	2a 81       	ldd	r18, Y+2	; 0x02
 3a4:	22 2f       	mov	r18, r18
 3a6:	30 e0       	ldi	r19, 0x00	; 0
 3a8:	02 c0       	rjmp	.+4      	; 0x3ae <DIO_u8GetPin+0x2a>
 3aa:	95 95       	asr	r25
 3ac:	87 95       	ror	r24
 3ae:	2a 95       	dec	r18
 3b0:	e2 f7       	brpl	.-8      	; 0x3aa <DIO_u8GetPin+0x26>
 3b2:	81 70       	andi	r24, 0x01	; 1
 3b4:	89 83       	std	Y+1, r24	; 0x01
 3b6:	4a c0       	rjmp	.+148    	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
	}else if((PinNum>=8) && (PinNum<16)){
 3b8:	8a 81       	ldd	r24, Y+2	; 0x02
 3ba:	88 30       	cpi	r24, 0x08	; 8
 3bc:	b0 f0       	brcs	.+44     	; 0x3ea <DIO_u8GetPin+0x66>
 3be:	8a 81       	ldd	r24, Y+2	; 0x02
 3c0:	80 31       	cpi	r24, 0x10	; 16
 3c2:	98 f4       	brcc	.+38     	; 0x3ea <DIO_u8GetPin+0x66>
	     ret= GETBIT(PINB,PinNum-8);
 3c4:	86 e3       	ldi	r24, 0x36	; 54
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	fc 01       	movw	r30, r24
 3ca:	80 81       	ld	r24, Z
 3cc:	88 2f       	mov	r24, r24
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	2a 81       	ldd	r18, Y+2	; 0x02
 3d2:	22 2f       	mov	r18, r18
 3d4:	30 e0       	ldi	r19, 0x00	; 0
 3d6:	28 50       	subi	r18, 0x08	; 8
 3d8:	31 09       	sbc	r19, r1
 3da:	02 c0       	rjmp	.+4      	; 0x3e0 <DIO_u8GetPin+0x5c>
 3dc:	95 95       	asr	r25
 3de:	87 95       	ror	r24
 3e0:	2a 95       	dec	r18
 3e2:	e2 f7       	brpl	.-8      	; 0x3dc <DIO_u8GetPin+0x58>
 3e4:	81 70       	andi	r24, 0x01	; 1
 3e6:	89 83       	std	Y+1, r24	; 0x01
 3e8:	31 c0       	rjmp	.+98     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
	}else if((PinNum>=16) && (PinNum<24)){
 3ea:	8a 81       	ldd	r24, Y+2	; 0x02
 3ec:	80 31       	cpi	r24, 0x10	; 16
 3ee:	b0 f0       	brcs	.+44     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 3f0:	8a 81       	ldd	r24, Y+2	; 0x02
 3f2:	88 31       	cpi	r24, 0x18	; 24
 3f4:	98 f4       	brcc	.+38     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
	     ret= GETBIT(PINC,PinNum-16);
 3f6:	83 e3       	ldi	r24, 0x33	; 51
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	fc 01       	movw	r30, r24
 3fc:	80 81       	ld	r24, Z
 3fe:	88 2f       	mov	r24, r24
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	2a 81       	ldd	r18, Y+2	; 0x02
 404:	22 2f       	mov	r18, r18
 406:	30 e0       	ldi	r19, 0x00	; 0
 408:	20 51       	subi	r18, 0x10	; 16
 40a:	31 09       	sbc	r19, r1
 40c:	02 c0       	rjmp	.+4      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 40e:	95 95       	asr	r25
 410:	87 95       	ror	r24
 412:	2a 95       	dec	r18
 414:	e2 f7       	brpl	.-8      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 416:	81 70       	andi	r24, 0x01	; 1
 418:	89 83       	std	Y+1, r24	; 0x01
 41a:	18 c0       	rjmp	.+48     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
	}else if((PinNum>=24) && (PinNum<32)){
 41c:	8a 81       	ldd	r24, Y+2	; 0x02
 41e:	88 31       	cpi	r24, 0x18	; 24
 420:	a8 f0       	brcs	.+42     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 422:	8a 81       	ldd	r24, Y+2	; 0x02
 424:	80 32       	cpi	r24, 0x20	; 32
 426:	90 f4       	brcc	.+36     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
	     ret= GETBIT(PIND,PinNum-16);
 428:	80 e3       	ldi	r24, 0x30	; 48
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	fc 01       	movw	r30, r24
 42e:	80 81       	ld	r24, Z
 430:	88 2f       	mov	r24, r24
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	2a 81       	ldd	r18, Y+2	; 0x02
 436:	22 2f       	mov	r18, r18
 438:	30 e0       	ldi	r19, 0x00	; 0
 43a:	20 51       	subi	r18, 0x10	; 16
 43c:	31 09       	sbc	r19, r1
 43e:	02 c0       	rjmp	.+4      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 440:	95 95       	asr	r25
 442:	87 95       	ror	r24
 444:	2a 95       	dec	r18
 446:	e2 f7       	brpl	.-8      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 448:	81 70       	andi	r24, 0x01	; 1
 44a:	89 83       	std	Y+1, r24	; 0x01
	}

	return ret;
 44c:	89 81       	ldd	r24, Y+1	; 0x01

}
 44e:	0f 90       	pop	r0
 450:	0f 90       	pop	r0
 452:	df 91       	pop	r29
 454:	cf 91       	pop	r28
 456:	08 95       	ret

00000458 <DIO_voidTogglePin>:

void DIO_voidTogglePin(u8 PinNum){
 458:	cf 93       	push	r28
 45a:	df 93       	push	r29
 45c:	1f 92       	push	r1
 45e:	cd b7       	in	r28, 0x3d	; 61
 460:	de b7       	in	r29, 0x3e	; 62
 462:	89 83       	std	Y+1, r24	; 0x01

	if((PinNum>=0 && PinNum<8)){
 464:	89 81       	ldd	r24, Y+1	; 0x01
 466:	88 30       	cpi	r24, 0x08	; 8
 468:	a8 f4       	brcc	.+42     	; 0x494 <DIO_voidTogglePin+0x3c>
		    TOGGLEBIT(PORTA,PinNum);
 46a:	8b e3       	ldi	r24, 0x3B	; 59
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	2b e3       	ldi	r18, 0x3B	; 59
 470:	30 e0       	ldi	r19, 0x00	; 0
 472:	f9 01       	movw	r30, r18
 474:	20 81       	ld	r18, Z
 476:	62 2f       	mov	r22, r18
 478:	29 81       	ldd	r18, Y+1	; 0x01
 47a:	42 2f       	mov	r20, r18
 47c:	50 e0       	ldi	r21, 0x00	; 0
 47e:	21 e0       	ldi	r18, 0x01	; 1
 480:	30 e0       	ldi	r19, 0x00	; 0
 482:	02 c0       	rjmp	.+4      	; 0x488 <DIO_voidTogglePin+0x30>
 484:	22 0f       	add	r18, r18
 486:	33 1f       	adc	r19, r19
 488:	4a 95       	dec	r20
 48a:	e2 f7       	brpl	.-8      	; 0x484 <DIO_voidTogglePin+0x2c>
 48c:	26 27       	eor	r18, r22
 48e:	fc 01       	movw	r30, r24
 490:	20 83       	st	Z, r18
		}else if((PinNum>=24) && (PinNum<32)){
		    TOGGLEBIT(PORTD,PinNum-16);
		}


}
 492:	5a c0       	rjmp	.+180    	; 0x548 <DIO_voidTogglePin+0xf0>

void DIO_voidTogglePin(u8 PinNum){

	if((PinNum>=0 && PinNum<8)){
		    TOGGLEBIT(PORTA,PinNum);
		}else if((PinNum>=8) && (PinNum<16)){
 494:	89 81       	ldd	r24, Y+1	; 0x01
 496:	88 30       	cpi	r24, 0x08	; 8
 498:	d8 f0       	brcs	.+54     	; 0x4d0 <DIO_voidTogglePin+0x78>
 49a:	89 81       	ldd	r24, Y+1	; 0x01
 49c:	80 31       	cpi	r24, 0x10	; 16
 49e:	c0 f4       	brcc	.+48     	; 0x4d0 <DIO_voidTogglePin+0x78>
		    TOGGLEBIT(PORTB,PinNum-8);
 4a0:	88 e3       	ldi	r24, 0x38	; 56
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	28 e3       	ldi	r18, 0x38	; 56
 4a6:	30 e0       	ldi	r19, 0x00	; 0
 4a8:	f9 01       	movw	r30, r18
 4aa:	20 81       	ld	r18, Z
 4ac:	62 2f       	mov	r22, r18
 4ae:	29 81       	ldd	r18, Y+1	; 0x01
 4b0:	22 2f       	mov	r18, r18
 4b2:	30 e0       	ldi	r19, 0x00	; 0
 4b4:	a9 01       	movw	r20, r18
 4b6:	48 50       	subi	r20, 0x08	; 8
 4b8:	51 09       	sbc	r21, r1
 4ba:	21 e0       	ldi	r18, 0x01	; 1
 4bc:	30 e0       	ldi	r19, 0x00	; 0
 4be:	02 c0       	rjmp	.+4      	; 0x4c4 <DIO_voidTogglePin+0x6c>
 4c0:	22 0f       	add	r18, r18
 4c2:	33 1f       	adc	r19, r19
 4c4:	4a 95       	dec	r20
 4c6:	e2 f7       	brpl	.-8      	; 0x4c0 <DIO_voidTogglePin+0x68>
 4c8:	26 27       	eor	r18, r22
 4ca:	fc 01       	movw	r30, r24
 4cc:	20 83       	st	Z, r18
 4ce:	3c c0       	rjmp	.+120    	; 0x548 <DIO_voidTogglePin+0xf0>
		}else if((PinNum>=16) && (PinNum<24)){
 4d0:	89 81       	ldd	r24, Y+1	; 0x01
 4d2:	80 31       	cpi	r24, 0x10	; 16
 4d4:	d8 f0       	brcs	.+54     	; 0x50c <DIO_voidTogglePin+0xb4>
 4d6:	89 81       	ldd	r24, Y+1	; 0x01
 4d8:	88 31       	cpi	r24, 0x18	; 24
 4da:	c0 f4       	brcc	.+48     	; 0x50c <DIO_voidTogglePin+0xb4>
		    TOGGLEBIT(PORTC,PinNum-16);
 4dc:	85 e3       	ldi	r24, 0x35	; 53
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	25 e3       	ldi	r18, 0x35	; 53
 4e2:	30 e0       	ldi	r19, 0x00	; 0
 4e4:	f9 01       	movw	r30, r18
 4e6:	20 81       	ld	r18, Z
 4e8:	62 2f       	mov	r22, r18
 4ea:	29 81       	ldd	r18, Y+1	; 0x01
 4ec:	22 2f       	mov	r18, r18
 4ee:	30 e0       	ldi	r19, 0x00	; 0
 4f0:	a9 01       	movw	r20, r18
 4f2:	40 51       	subi	r20, 0x10	; 16
 4f4:	51 09       	sbc	r21, r1
 4f6:	21 e0       	ldi	r18, 0x01	; 1
 4f8:	30 e0       	ldi	r19, 0x00	; 0
 4fa:	02 c0       	rjmp	.+4      	; 0x500 <DIO_voidTogglePin+0xa8>
 4fc:	22 0f       	add	r18, r18
 4fe:	33 1f       	adc	r19, r19
 500:	4a 95       	dec	r20
 502:	e2 f7       	brpl	.-8      	; 0x4fc <DIO_voidTogglePin+0xa4>
 504:	26 27       	eor	r18, r22
 506:	fc 01       	movw	r30, r24
 508:	20 83       	st	Z, r18
 50a:	1e c0       	rjmp	.+60     	; 0x548 <DIO_voidTogglePin+0xf0>
		}else if((PinNum>=24) && (PinNum<32)){
 50c:	89 81       	ldd	r24, Y+1	; 0x01
 50e:	88 31       	cpi	r24, 0x18	; 24
 510:	d8 f0       	brcs	.+54     	; 0x548 <DIO_voidTogglePin+0xf0>
 512:	89 81       	ldd	r24, Y+1	; 0x01
 514:	80 32       	cpi	r24, 0x20	; 32
 516:	c0 f4       	brcc	.+48     	; 0x548 <DIO_voidTogglePin+0xf0>
		    TOGGLEBIT(PORTD,PinNum-16);
 518:	82 e3       	ldi	r24, 0x32	; 50
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	22 e3       	ldi	r18, 0x32	; 50
 51e:	30 e0       	ldi	r19, 0x00	; 0
 520:	f9 01       	movw	r30, r18
 522:	20 81       	ld	r18, Z
 524:	62 2f       	mov	r22, r18
 526:	29 81       	ldd	r18, Y+1	; 0x01
 528:	22 2f       	mov	r18, r18
 52a:	30 e0       	ldi	r19, 0x00	; 0
 52c:	a9 01       	movw	r20, r18
 52e:	40 51       	subi	r20, 0x10	; 16
 530:	51 09       	sbc	r21, r1
 532:	21 e0       	ldi	r18, 0x01	; 1
 534:	30 e0       	ldi	r19, 0x00	; 0
 536:	02 c0       	rjmp	.+4      	; 0x53c <DIO_voidTogglePin+0xe4>
 538:	22 0f       	add	r18, r18
 53a:	33 1f       	adc	r19, r19
 53c:	4a 95       	dec	r20
 53e:	e2 f7       	brpl	.-8      	; 0x538 <DIO_voidTogglePin+0xe0>
 540:	26 27       	eor	r18, r22
 542:	fc 01       	movw	r30, r24
 544:	20 83       	st	Z, r18
		}


}
 546:	00 c0       	rjmp	.+0      	; 0x548 <DIO_voidTogglePin+0xf0>
 548:	00 00       	nop
 54a:	0f 90       	pop	r0
 54c:	df 91       	pop	r29
 54e:	cf 91       	pop	r28
 550:	08 95       	ret

00000552 <GIE_voidEnable>:
#include "GIE_int.h"
/*********************************************/
/* Description : Enable global interrupt   	*/
/********************************************/
void GIE_voidEnable(void)
{
 552:	cf 93       	push	r28
 554:	df 93       	push	r29
 556:	cd b7       	in	r28, 0x3d	; 61
 558:	de b7       	in	r29, 0x3e	; 62
	SETBIT(SREG,GIE_u8_BIT_INDEX);
 55a:	8f e5       	ldi	r24, 0x5F	; 95
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	2f e5       	ldi	r18, 0x5F	; 95
 560:	30 e0       	ldi	r19, 0x00	; 0
 562:	f9 01       	movw	r30, r18
 564:	20 81       	ld	r18, Z
 566:	20 68       	ori	r18, 0x80	; 128
 568:	fc 01       	movw	r30, r24
 56a:	20 83       	st	Z, r18
}
 56c:	00 00       	nop
 56e:	df 91       	pop	r29
 570:	cf 91       	pop	r28
 572:	08 95       	ret

00000574 <GIE_voidDisable>:

/********************************************/
/* Description : Disable global interrupt   */
/********************************************/
void GIE_voidDisable(void)
{
 574:	cf 93       	push	r28
 576:	df 93       	push	r29
 578:	cd b7       	in	r28, 0x3d	; 61
 57a:	de b7       	in	r29, 0x3e	; 62
	CLRBIT(SREG,GIE_u8_BIT_INDEX);	
 57c:	8f e5       	ldi	r24, 0x5F	; 95
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	2f e5       	ldi	r18, 0x5F	; 95
 582:	30 e0       	ldi	r19, 0x00	; 0
 584:	f9 01       	movw	r30, r18
 586:	20 81       	ld	r18, Z
 588:	2f 77       	andi	r18, 0x7F	; 127
 58a:	fc 01       	movw	r30, r24
 58c:	20 83       	st	Z, r18
 58e:	00 00       	nop
 590:	df 91       	pop	r29
 592:	cf 91       	pop	r28
 594:	08 95       	ret

00000596 <LED_voidInitialize>:
#include "DIO_int.h"
#include "LED_priv.h"
#include "LED_config.h"
#include "LED_int.h"

void LED_voidInitialize(void){}
 596:	cf 93       	push	r28
 598:	df 93       	push	r29
 59a:	cd b7       	in	r28, 0x3d	; 61
 59c:	de b7       	in	r29, 0x3e	; 62
 59e:	00 00       	nop
 5a0:	df 91       	pop	r29
 5a2:	cf 91       	pop	r28
 5a4:	08 95       	ret

000005a6 <LED_voidON>:

void LED_voidON(u8 LedNum){
 5a6:	cf 93       	push	r28
 5a8:	df 93       	push	r29
 5aa:	1f 92       	push	r1
 5ac:	cd b7       	in	r28, 0x3d	; 61
 5ae:	de b7       	in	r29, 0x3e	; 62
 5b0:	89 83       	std	Y+1, r24	; 0x01

	switch(LedNum){
 5b2:	89 81       	ldd	r24, Y+1	; 0x01
 5b4:	88 2f       	mov	r24, r24
 5b6:	90 e0       	ldi	r25, 0x00	; 0
 5b8:	09 2e       	mov	r0, r25
 5ba:	00 0c       	add	r0, r0
 5bc:	aa 0b       	sbc	r26, r26
 5be:	bb 0b       	sbc	r27, r27
 5c0:	40 e0       	ldi	r20, 0x00	; 0
 5c2:	50 e0       	ldi	r21, 0x00	; 0
 5c4:	2f e1       	ldi	r18, 0x1F	; 31
 5c6:	30 e0       	ldi	r19, 0x00	; 0
 5c8:	84 1b       	sub	r24, r20
 5ca:	95 0b       	sbc	r25, r21
 5cc:	28 17       	cp	r18, r24
 5ce:	39 07       	cpc	r19, r25
 5d0:	08 f4       	brcc	.+2      	; 0x5d4 <LED_voidON+0x2e>
 5d2:	a5 c0       	rjmp	.+330    	; 0x71e <LED_voidON+0x178>
 5d4:	86 5d       	subi	r24, 0xD6	; 214
 5d6:	9f 4f       	sbci	r25, 0xFF	; 255
 5d8:	fc 01       	movw	r30, r24
 5da:	0c 94 bc 05 	jmp	0xb78	; 0xb78 <__tablejump2__>
	case (LED_0):
	    if(LED_0_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_0,HIGH);
 5de:	61 e0       	ldi	r22, 0x01	; 1
 5e0:	80 e0       	ldi	r24, 0x00	; 0
 5e2:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_voidSetPin>
	    }else if(LED_0_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_0,LOW);
	    }
	break;
 5e6:	9b c0       	rjmp	.+310    	; 0x71e <LED_voidON+0x178>
	case (LED_1):
	    if(LED_1_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_1,HIGH);
 5e8:	61 e0       	ldi	r22, 0x01	; 1
 5ea:	81 e0       	ldi	r24, 0x01	; 1
 5ec:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_voidSetPin>
	    }else if(LED_1_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_1,LOW);
	    }
	break;
 5f0:	96 c0       	rjmp	.+300    	; 0x71e <LED_voidON+0x178>
	case (LED_2):
	    if(LED_2_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_2,HIGH);
 5f2:	61 e0       	ldi	r22, 0x01	; 1
 5f4:	82 e0       	ldi	r24, 0x02	; 2
 5f6:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_voidSetPin>
	    }else if(LED_2_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_2,LOW);
	    }
	break;
 5fa:	91 c0       	rjmp	.+290    	; 0x71e <LED_voidON+0x178>
	case (LED_3):
	    if(LED_3_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_3,HIGH);
 5fc:	61 e0       	ldi	r22, 0x01	; 1
 5fe:	83 e0       	ldi	r24, 0x03	; 3
 600:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_voidSetPin>
	    }else if(LED_3_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_3,LOW);
	    }
	break;
 604:	8c c0       	rjmp	.+280    	; 0x71e <LED_voidON+0x178>
	case (LED_4):
	    if(LED_4_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_4,HIGH);
 606:	61 e0       	ldi	r22, 0x01	; 1
 608:	84 e0       	ldi	r24, 0x04	; 4
 60a:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_voidSetPin>
	    }else if(LED_4_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_4,LOW);
	    }
	break;
 60e:	87 c0       	rjmp	.+270    	; 0x71e <LED_voidON+0x178>
	case (LED_5):
	    if(LED_5_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_5,HIGH);
 610:	61 e0       	ldi	r22, 0x01	; 1
 612:	85 e0       	ldi	r24, 0x05	; 5
 614:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_voidSetPin>
	    }else if(LED_5_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_5,LOW);
	    }
	break;
 618:	82 c0       	rjmp	.+260    	; 0x71e <LED_voidON+0x178>
	case (LED_6):
	    if(LED_6_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_6,HIGH);
 61a:	61 e0       	ldi	r22, 0x01	; 1
 61c:	86 e0       	ldi	r24, 0x06	; 6
 61e:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_voidSetPin>
	    }else if(LED_6_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_6,LOW);
	    }
	break;
 622:	7d c0       	rjmp	.+250    	; 0x71e <LED_voidON+0x178>
	case (LED_7):
	    if(LED_7_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_7,HIGH);
 624:	61 e0       	ldi	r22, 0x01	; 1
 626:	87 e0       	ldi	r24, 0x07	; 7
 628:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_voidSetPin>
	    }else if(LED_7_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_7,LOW);
	    }
	break;
 62c:	78 c0       	rjmp	.+240    	; 0x71e <LED_voidON+0x178>
	case (LED_8):
	    if(LED_8_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_8,HIGH);
 62e:	61 e0       	ldi	r22, 0x01	; 1
 630:	88 e0       	ldi	r24, 0x08	; 8
 632:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_voidSetPin>
	    }else if(LED_8_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_8,LOW);
	    }
	break;
 636:	73 c0       	rjmp	.+230    	; 0x71e <LED_voidON+0x178>
	case (LED_9):
	    if(LED_9_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_9,HIGH);
 638:	61 e0       	ldi	r22, 0x01	; 1
 63a:	89 e0       	ldi	r24, 0x09	; 9
 63c:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_voidSetPin>
	    }else if(LED_9_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_9,LOW);
	    }
	break;
 640:	6e c0       	rjmp	.+220    	; 0x71e <LED_voidON+0x178>
	case (LED_10):
	    if(LED_10_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_10,HIGH);
 642:	61 e0       	ldi	r22, 0x01	; 1
 644:	8a e0       	ldi	r24, 0x0A	; 10
 646:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_voidSetPin>
	    }else if(LED_10_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_10,LOW);
	    }
	break;
 64a:	69 c0       	rjmp	.+210    	; 0x71e <LED_voidON+0x178>
	case (LED_11):
	    if(LED_11_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_11,HIGH);
 64c:	61 e0       	ldi	r22, 0x01	; 1
 64e:	8b e0       	ldi	r24, 0x0B	; 11
 650:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_voidSetPin>
	    }else if(LED_11_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_11,LOW);
	    }
	break;
 654:	64 c0       	rjmp	.+200    	; 0x71e <LED_voidON+0x178>
	case (LED_12):
	    if(LED_12_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_12,HIGH);
 656:	61 e0       	ldi	r22, 0x01	; 1
 658:	8c e0       	ldi	r24, 0x0C	; 12
 65a:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_voidSetPin>
	    }else if(LED_12_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_12,LOW);
	    }
	break;
 65e:	5f c0       	rjmp	.+190    	; 0x71e <LED_voidON+0x178>
	case (LED_13):
	    if(LED_13_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_13,HIGH);
 660:	61 e0       	ldi	r22, 0x01	; 1
 662:	8d e0       	ldi	r24, 0x0D	; 13
 664:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_voidSetPin>
	    }else if(LED_13_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_13,LOW);
	    }
	break;
 668:	5a c0       	rjmp	.+180    	; 0x71e <LED_voidON+0x178>
	case (LED_14):
	    if(LED_14_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_14,HIGH);
 66a:	61 e0       	ldi	r22, 0x01	; 1
 66c:	8e e0       	ldi	r24, 0x0E	; 14
 66e:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_voidSetPin>
	    }else if(LED_14_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_14,LOW);
	    }
	break;
 672:	55 c0       	rjmp	.+170    	; 0x71e <LED_voidON+0x178>
	case (LED_15):
	    if(LED_15_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_15,HIGH);
 674:	61 e0       	ldi	r22, 0x01	; 1
 676:	8f e0       	ldi	r24, 0x0F	; 15
 678:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_voidSetPin>
	    }else if(LED_15_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_15,LOW);
	    }
	break;
 67c:	50 c0       	rjmp	.+160    	; 0x71e <LED_voidON+0x178>
	case (LED_16):
	    if(LED_16_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_16,HIGH);
 67e:	61 e0       	ldi	r22, 0x01	; 1
 680:	80 e1       	ldi	r24, 0x10	; 16
 682:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_voidSetPin>
	    }else if(LED_16_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_16,LOW);
	    }
	break;
 686:	4b c0       	rjmp	.+150    	; 0x71e <LED_voidON+0x178>
	case (LED_17):
	    if(LED_17_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_17,HIGH);
 688:	61 e0       	ldi	r22, 0x01	; 1
 68a:	81 e1       	ldi	r24, 0x11	; 17
 68c:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_voidSetPin>
	    }else if(LED_17_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_17,LOW);
	    }
	break;
 690:	46 c0       	rjmp	.+140    	; 0x71e <LED_voidON+0x178>
	case (LED_18):
	    if(LED_18_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_18,HIGH);
 692:	61 e0       	ldi	r22, 0x01	; 1
 694:	82 e1       	ldi	r24, 0x12	; 18
 696:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_voidSetPin>
	    }else if(LED_18_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_18,LOW);
	    }
	break;
 69a:	41 c0       	rjmp	.+130    	; 0x71e <LED_voidON+0x178>
	case (LED_19):
	    if(LED_19_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_19,HIGH);
 69c:	61 e0       	ldi	r22, 0x01	; 1
 69e:	83 e1       	ldi	r24, 0x13	; 19
 6a0:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_voidSetPin>
	    }else if(LED_19_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_19,LOW);
	    }
	break;
 6a4:	3c c0       	rjmp	.+120    	; 0x71e <LED_voidON+0x178>
	case (LED_20):
	    if(LED_20_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_20,HIGH);
 6a6:	61 e0       	ldi	r22, 0x01	; 1
 6a8:	84 e1       	ldi	r24, 0x14	; 20
 6aa:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_voidSetPin>
	    }else if(LED_20_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_20,LOW);
	    }
	break;
 6ae:	37 c0       	rjmp	.+110    	; 0x71e <LED_voidON+0x178>
	case (LED_21):
	    if(LED_21_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_21,HIGH);
 6b0:	61 e0       	ldi	r22, 0x01	; 1
 6b2:	85 e1       	ldi	r24, 0x15	; 21
 6b4:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_voidSetPin>
	    }else if(LED_21_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_21,LOW);
	    }
	break;
 6b8:	32 c0       	rjmp	.+100    	; 0x71e <LED_voidON+0x178>
	case (LED_22):
	    if(LED_22_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_22,HIGH);
 6ba:	61 e0       	ldi	r22, 0x01	; 1
 6bc:	86 e1       	ldi	r24, 0x16	; 22
 6be:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_voidSetPin>
	    }else if(LED_22_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_22,LOW);
	    }
	break;
 6c2:	2d c0       	rjmp	.+90     	; 0x71e <LED_voidON+0x178>
	case (LED_23):
	    if(LED_23_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_23,HIGH);
 6c4:	61 e0       	ldi	r22, 0x01	; 1
 6c6:	87 e1       	ldi	r24, 0x17	; 23
 6c8:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_voidSetPin>
	    }else if(LED_23_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_23,LOW);
	    }
	break;
 6cc:	28 c0       	rjmp	.+80     	; 0x71e <LED_voidON+0x178>
	case (LED_24):
	    if(LED_24_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_24,HIGH);
 6ce:	61 e0       	ldi	r22, 0x01	; 1
 6d0:	88 e1       	ldi	r24, 0x18	; 24
 6d2:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_voidSetPin>
	    }else if(LED_24_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_24,LOW);
	    }
	break;
 6d6:	23 c0       	rjmp	.+70     	; 0x71e <LED_voidON+0x178>
	case (LED_25):
	    if(LED_25_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_25,HIGH);
 6d8:	61 e0       	ldi	r22, 0x01	; 1
 6da:	89 e1       	ldi	r24, 0x19	; 25
 6dc:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_voidSetPin>
	    }else if(LED_25_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_25,LOW);
	    }
	break;
 6e0:	1e c0       	rjmp	.+60     	; 0x71e <LED_voidON+0x178>
	case (LED_26):
	    if(LED_26_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_26,HIGH);
 6e2:	61 e0       	ldi	r22, 0x01	; 1
 6e4:	8a e1       	ldi	r24, 0x1A	; 26
 6e6:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_voidSetPin>
	    }else if(LED_26_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_26,LOW);
	    }
	break;
 6ea:	19 c0       	rjmp	.+50     	; 0x71e <LED_voidON+0x178>
	case (LED_27):
	    if(LED_27_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_27,HIGH);
 6ec:	61 e0       	ldi	r22, 0x01	; 1
 6ee:	8b e1       	ldi	r24, 0x1B	; 27
 6f0:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_voidSetPin>
	    }else if(LED_27_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_27,LOW);
	    }
	break;
 6f4:	14 c0       	rjmp	.+40     	; 0x71e <LED_voidON+0x178>
	case (LED_28):
	    if(LED_28_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_28,HIGH);
 6f6:	61 e0       	ldi	r22, 0x01	; 1
 6f8:	8c e1       	ldi	r24, 0x1C	; 28
 6fa:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_voidSetPin>
	    }else if(LED_28_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_28,LOW);
	    }
	break;
 6fe:	0f c0       	rjmp	.+30     	; 0x71e <LED_voidON+0x178>
	case (LED_29):
	    if(LED_29_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_29,HIGH);
 700:	61 e0       	ldi	r22, 0x01	; 1
 702:	8d e1       	ldi	r24, 0x1D	; 29
 704:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_voidSetPin>
	    }else if(LED_29_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_29,LOW);
	    }
	break;
 708:	0a c0       	rjmp	.+20     	; 0x71e <LED_voidON+0x178>
	case (LED_30):
	    if(LED_30_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_30,HIGH);
 70a:	61 e0       	ldi	r22, 0x01	; 1
 70c:	8e e1       	ldi	r24, 0x1E	; 30
 70e:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_voidSetPin>
	    }else if(LED_30_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_30,LOW);
	    }
	break;
 712:	05 c0       	rjmp	.+10     	; 0x71e <LED_voidON+0x178>
	case (LED_31):
	    if(LED_31_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_31,HIGH);
 714:	61 e0       	ldi	r22, 0x01	; 1
 716:	8f e1       	ldi	r24, 0x1F	; 31
 718:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_voidSetPin>
	    }else if(LED_31_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_31,LOW);
	    }
	break;
 71c:	00 00       	nop


	}

}
 71e:	00 00       	nop
 720:	0f 90       	pop	r0
 722:	df 91       	pop	r29
 724:	cf 91       	pop	r28
 726:	08 95       	ret

00000728 <LED_voidOff>:

void LED_voidOff(u8 LedNum){
 728:	cf 93       	push	r28
 72a:	df 93       	push	r29
 72c:	1f 92       	push	r1
 72e:	cd b7       	in	r28, 0x3d	; 61
 730:	de b7       	in	r29, 0x3e	; 62
 732:	89 83       	std	Y+1, r24	; 0x01

	switch(LedNum){
 734:	89 81       	ldd	r24, Y+1	; 0x01
 736:	88 2f       	mov	r24, r24
 738:	90 e0       	ldi	r25, 0x00	; 0
 73a:	09 2e       	mov	r0, r25
 73c:	00 0c       	add	r0, r0
 73e:	aa 0b       	sbc	r26, r26
 740:	bb 0b       	sbc	r27, r27
 742:	40 e0       	ldi	r20, 0x00	; 0
 744:	50 e0       	ldi	r21, 0x00	; 0
 746:	2f e1       	ldi	r18, 0x1F	; 31
 748:	30 e0       	ldi	r19, 0x00	; 0
 74a:	84 1b       	sub	r24, r20
 74c:	95 0b       	sbc	r25, r21
 74e:	28 17       	cp	r18, r24
 750:	39 07       	cpc	r19, r25
 752:	08 f4       	brcc	.+2      	; 0x756 <LED_voidOff+0x2e>
 754:	a5 c0       	rjmp	.+330    	; 0x8a0 <__stack+0x41>
 756:	86 5b       	subi	r24, 0xB6	; 182
 758:	9f 4f       	sbci	r25, 0xFF	; 255
 75a:	fc 01       	movw	r30, r24
 75c:	0c 94 bc 05 	jmp	0xb78	; 0xb78 <__tablejump2__>

    case (LED_0):
        if(LED_0_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_0,LOW);
 760:	60 e0       	ldi	r22, 0x00	; 0
 762:	80 e0       	ldi	r24, 0x00	; 0
 764:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_voidSetPin>
        }else if(LED_0_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_0,HIGH);
        }
    break;
 768:	9b c0       	rjmp	.+310    	; 0x8a0 <__stack+0x41>
    case (LED_1):
        if(LED_1_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_1,LOW);
 76a:	60 e0       	ldi	r22, 0x00	; 0
 76c:	81 e0       	ldi	r24, 0x01	; 1
 76e:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_voidSetPin>
        }else if(LED_1_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_1,HIGH);
        }
    break;
 772:	96 c0       	rjmp	.+300    	; 0x8a0 <__stack+0x41>
    case (LED_2):
        if(LED_2_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_2,LOW);
 774:	60 e0       	ldi	r22, 0x00	; 0
 776:	82 e0       	ldi	r24, 0x02	; 2
 778:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_voidSetPin>
        }else if(LED_2_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_2,HIGH);
        }
    break;
 77c:	91 c0       	rjmp	.+290    	; 0x8a0 <__stack+0x41>
    case (LED_3):
        if(LED_3_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_3,LOW);
 77e:	60 e0       	ldi	r22, 0x00	; 0
 780:	83 e0       	ldi	r24, 0x03	; 3
 782:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_voidSetPin>
        }else if(LED_3_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_3,HIGH);
        }
    break;
 786:	8c c0       	rjmp	.+280    	; 0x8a0 <__stack+0x41>
    case (LED_4):
        if(LED_4_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_4,LOW);
 788:	60 e0       	ldi	r22, 0x00	; 0
 78a:	84 e0       	ldi	r24, 0x04	; 4
 78c:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_voidSetPin>
        }else if(LED_4_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_4,HIGH);
        }
    break;
 790:	87 c0       	rjmp	.+270    	; 0x8a0 <__stack+0x41>
    case (LED_5):
        if(LED_5_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_5,LOW);
 792:	60 e0       	ldi	r22, 0x00	; 0
 794:	85 e0       	ldi	r24, 0x05	; 5
 796:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_voidSetPin>
        }else if(LED_5_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_5,HIGH);
        }
    break;
 79a:	82 c0       	rjmp	.+260    	; 0x8a0 <__stack+0x41>
    case (LED_6):
        if(LED_6_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_6,LOW);
 79c:	60 e0       	ldi	r22, 0x00	; 0
 79e:	86 e0       	ldi	r24, 0x06	; 6
 7a0:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_voidSetPin>
        }else if(LED_6_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_6,HIGH);
        }
    break;
 7a4:	7d c0       	rjmp	.+250    	; 0x8a0 <__stack+0x41>
    case (LED_7):
        if(LED_7_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_7,LOW);
 7a6:	60 e0       	ldi	r22, 0x00	; 0
 7a8:	87 e0       	ldi	r24, 0x07	; 7
 7aa:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_voidSetPin>
        }else if(LED_7_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_7,HIGH);
        }
    break;
 7ae:	78 c0       	rjmp	.+240    	; 0x8a0 <__stack+0x41>
    case (LED_8):
        if(LED_8_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_8,LOW);
 7b0:	60 e0       	ldi	r22, 0x00	; 0
 7b2:	88 e0       	ldi	r24, 0x08	; 8
 7b4:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_voidSetPin>
        }else if(LED_8_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_8,HIGH);
        }
    break;
 7b8:	73 c0       	rjmp	.+230    	; 0x8a0 <__stack+0x41>
    case (LED_9):
        if(LED_9_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_9,LOW);
 7ba:	60 e0       	ldi	r22, 0x00	; 0
 7bc:	89 e0       	ldi	r24, 0x09	; 9
 7be:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_voidSetPin>
        }else if(LED_9_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_9,HIGH);
        }
    break;
 7c2:	6e c0       	rjmp	.+220    	; 0x8a0 <__stack+0x41>
    case (LED_10):
        if(LED_10_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_10,LOW);
 7c4:	60 e0       	ldi	r22, 0x00	; 0
 7c6:	8a e0       	ldi	r24, 0x0A	; 10
 7c8:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_voidSetPin>
        }else if(LED_10_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_10,HIGH);
        }
    break;
 7cc:	69 c0       	rjmp	.+210    	; 0x8a0 <__stack+0x41>
    case (LED_11):
        if(LED_11_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_11,LOW);
 7ce:	60 e0       	ldi	r22, 0x00	; 0
 7d0:	8b e0       	ldi	r24, 0x0B	; 11
 7d2:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_voidSetPin>
        }else if(LED_11_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_11,HIGH);
        }
    break;
 7d6:	64 c0       	rjmp	.+200    	; 0x8a0 <__stack+0x41>
    case (LED_12):
        if(LED_12_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_12,LOW);
 7d8:	60 e0       	ldi	r22, 0x00	; 0
 7da:	8c e0       	ldi	r24, 0x0C	; 12
 7dc:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_voidSetPin>
        }else if(LED_12_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_12,HIGH);
        }
    break;
 7e0:	5f c0       	rjmp	.+190    	; 0x8a0 <__stack+0x41>
    case (LED_13):
        if(LED_13_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_13,LOW);
 7e2:	60 e0       	ldi	r22, 0x00	; 0
 7e4:	8d e0       	ldi	r24, 0x0D	; 13
 7e6:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_voidSetPin>
        }else if(LED_13_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_13,HIGH);
        }
    break;
 7ea:	5a c0       	rjmp	.+180    	; 0x8a0 <__stack+0x41>
    case (LED_14):
        if(LED_14_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_14,LOW);
 7ec:	60 e0       	ldi	r22, 0x00	; 0
 7ee:	8e e0       	ldi	r24, 0x0E	; 14
 7f0:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_voidSetPin>
        }else if(LED_14_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_14,HIGH);
        }
    break;
 7f4:	55 c0       	rjmp	.+170    	; 0x8a0 <__stack+0x41>
    case (LED_15):
        if(LED_15_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_15,LOW);
 7f6:	60 e0       	ldi	r22, 0x00	; 0
 7f8:	8f e0       	ldi	r24, 0x0F	; 15
 7fa:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_voidSetPin>
        }else if(LED_15_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_15,HIGH);
        }
    break;
 7fe:	50 c0       	rjmp	.+160    	; 0x8a0 <__stack+0x41>
    case (LED_16):
        if(LED_16_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_16,LOW);
 800:	60 e0       	ldi	r22, 0x00	; 0
 802:	80 e1       	ldi	r24, 0x10	; 16
 804:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_voidSetPin>
        }else if(LED_16_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_16,HIGH);
        }
    break;
 808:	4b c0       	rjmp	.+150    	; 0x8a0 <__stack+0x41>
    case (LED_17):
        if(LED_17_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_17,LOW);
 80a:	60 e0       	ldi	r22, 0x00	; 0
 80c:	81 e1       	ldi	r24, 0x11	; 17
 80e:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_voidSetPin>
        }else if(LED_17_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_17,HIGH);
        }
    break;
 812:	46 c0       	rjmp	.+140    	; 0x8a0 <__stack+0x41>
    case (LED_18):
        if(LED_18_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_18,LOW);
 814:	60 e0       	ldi	r22, 0x00	; 0
 816:	82 e1       	ldi	r24, 0x12	; 18
 818:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_voidSetPin>
        }else if(LED_18_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_18,HIGH);
        }
    break;
 81c:	41 c0       	rjmp	.+130    	; 0x8a0 <__stack+0x41>
    case (LED_19):
        if(LED_19_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_19,LOW);
 81e:	60 e0       	ldi	r22, 0x00	; 0
 820:	83 e1       	ldi	r24, 0x13	; 19
 822:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_voidSetPin>
        }else if(LED_19_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_19,HIGH);
        }
    break;
 826:	3c c0       	rjmp	.+120    	; 0x8a0 <__stack+0x41>
    case (LED_20):
        if(LED_20_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_20,LOW);
 828:	60 e0       	ldi	r22, 0x00	; 0
 82a:	84 e1       	ldi	r24, 0x14	; 20
 82c:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_voidSetPin>
        }else if(LED_20_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_20,HIGH);
        }
    break;
 830:	37 c0       	rjmp	.+110    	; 0x8a0 <__stack+0x41>
    case (LED_21):
        if(LED_21_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_21,LOW);
 832:	60 e0       	ldi	r22, 0x00	; 0
 834:	85 e1       	ldi	r24, 0x15	; 21
 836:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_voidSetPin>
        }else if(LED_21_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_21,HIGH);
        }
    break;
 83a:	32 c0       	rjmp	.+100    	; 0x8a0 <__stack+0x41>
    case (LED_22):
        if(LED_22_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_22,LOW);
 83c:	60 e0       	ldi	r22, 0x00	; 0
 83e:	86 e1       	ldi	r24, 0x16	; 22
 840:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_voidSetPin>
        }else if(LED_22_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_22,HIGH);
        }
    break;
 844:	2d c0       	rjmp	.+90     	; 0x8a0 <__stack+0x41>
    case (LED_23):
        if(LED_23_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_23,LOW);
 846:	60 e0       	ldi	r22, 0x00	; 0
 848:	87 e1       	ldi	r24, 0x17	; 23
 84a:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_voidSetPin>
        }else if(LED_23_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_23,HIGH);
        }
    break;
 84e:	28 c0       	rjmp	.+80     	; 0x8a0 <__stack+0x41>
    case (LED_24):
        if(LED_24_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_24,LOW);
 850:	60 e0       	ldi	r22, 0x00	; 0
 852:	88 e1       	ldi	r24, 0x18	; 24
 854:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_voidSetPin>
        }else if(LED_24_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_24,HIGH);
        }
    break;
 858:	23 c0       	rjmp	.+70     	; 0x8a0 <__stack+0x41>
    case (LED_25):
        if(LED_25_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_25,LOW);
 85a:	60 e0       	ldi	r22, 0x00	; 0
 85c:	89 e1       	ldi	r24, 0x19	; 25
 85e:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_voidSetPin>
        }else if(LED_25_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_25,HIGH);
        }
    break;
 862:	1e c0       	rjmp	.+60     	; 0x8a0 <__stack+0x41>
    case (LED_26):
        if(LED_26_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_26,LOW);
 864:	60 e0       	ldi	r22, 0x00	; 0
 866:	8a e1       	ldi	r24, 0x1A	; 26
 868:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_voidSetPin>
        }else if(LED_26_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_26,HIGH);
        }
    break;
 86c:	19 c0       	rjmp	.+50     	; 0x8a0 <__stack+0x41>
    case (LED_27):
        if(LED_27_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_27,LOW);
 86e:	60 e0       	ldi	r22, 0x00	; 0
 870:	8b e1       	ldi	r24, 0x1B	; 27
 872:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_voidSetPin>
        }else if(LED_27_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_27,HIGH);
        }
    break;
 876:	14 c0       	rjmp	.+40     	; 0x8a0 <__stack+0x41>
    case (LED_28):
        if(LED_28_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_28,LOW);
 878:	60 e0       	ldi	r22, 0x00	; 0
 87a:	8c e1       	ldi	r24, 0x1C	; 28
 87c:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_voidSetPin>
        }else if(LED_28_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_28,HIGH);
        }
    break;
 880:	0f c0       	rjmp	.+30     	; 0x8a0 <__stack+0x41>
    case (LED_29):
        if(LED_29_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_29,LOW);
 882:	60 e0       	ldi	r22, 0x00	; 0
 884:	8d e1       	ldi	r24, 0x1D	; 29
 886:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_voidSetPin>
        }else if(LED_29_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_29,HIGH);
        }
    break;
 88a:	0a c0       	rjmp	.+20     	; 0x8a0 <__stack+0x41>
    case (LED_30):
        if(LED_30_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_30,LOW);
 88c:	60 e0       	ldi	r22, 0x00	; 0
 88e:	8e e1       	ldi	r24, 0x1E	; 30
 890:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_voidSetPin>
        }else if(LED_30_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_30,HIGH);
        }
    break;
 894:	05 c0       	rjmp	.+10     	; 0x8a0 <__stack+0x41>
    case (LED_31):
        if(LED_31_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_31,LOW);
 896:	60 e0       	ldi	r22, 0x00	; 0
 898:	8f e1       	ldi	r24, 0x1F	; 31
 89a:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_voidSetPin>
        }else if(LED_31_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_31,HIGH);
        }
    break;
 89e:	00 00       	nop

	}


}
 8a0:	00 00       	nop
 8a2:	0f 90       	pop	r0
 8a4:	df 91       	pop	r29
 8a6:	cf 91       	pop	r28
 8a8:	08 95       	ret

000008aa <LED_voidToggle>:

void LED_voidToggle(u8 LedNum){
 8aa:	cf 93       	push	r28
 8ac:	df 93       	push	r29
 8ae:	1f 92       	push	r1
 8b0:	cd b7       	in	r28, 0x3d	; 61
 8b2:	de b7       	in	r29, 0x3e	; 62
 8b4:	89 83       	std	Y+1, r24	; 0x01

	switch(LedNum){
 8b6:	89 81       	ldd	r24, Y+1	; 0x01
 8b8:	88 2f       	mov	r24, r24
 8ba:	90 e0       	ldi	r25, 0x00	; 0
 8bc:	09 2e       	mov	r0, r25
 8be:	00 0c       	add	r0, r0
 8c0:	aa 0b       	sbc	r26, r26
 8c2:	bb 0b       	sbc	r27, r27
 8c4:	40 e0       	ldi	r20, 0x00	; 0
 8c6:	50 e0       	ldi	r21, 0x00	; 0
 8c8:	2f e1       	ldi	r18, 0x1F	; 31
 8ca:	30 e0       	ldi	r19, 0x00	; 0
 8cc:	84 1b       	sub	r24, r20
 8ce:	95 0b       	sbc	r25, r21
 8d0:	28 17       	cp	r18, r24
 8d2:	39 07       	cpc	r19, r25
 8d4:	08 f4       	brcc	.+2      	; 0x8d8 <LED_voidToggle+0x2e>
 8d6:	85 c0       	rjmp	.+266    	; 0x9e2 <LED_voidToggle+0x138>
 8d8:	86 59       	subi	r24, 0x96	; 150
 8da:	9f 4f       	sbci	r25, 0xFF	; 255
 8dc:	fc 01       	movw	r30, r24
 8de:	0c 94 bc 05 	jmp	0xb78	; 0xb78 <__tablejump2__>

        	case (LED_0):
        		DIO_voidTogglePin(LEDPIN_0);
 8e2:	80 e0       	ldi	r24, 0x00	; 0
 8e4:	0e 94 2c 02 	call	0x458	; 0x458 <DIO_voidTogglePin>
        	break;
 8e8:	7c c0       	rjmp	.+248    	; 0x9e2 <LED_voidToggle+0x138>
        	case (LED_1):
        		DIO_voidTogglePin(LEDPIN_1);
 8ea:	81 e0       	ldi	r24, 0x01	; 1
 8ec:	0e 94 2c 02 	call	0x458	; 0x458 <DIO_voidTogglePin>
        	break;
 8f0:	78 c0       	rjmp	.+240    	; 0x9e2 <LED_voidToggle+0x138>
        	case (LED_2):
        		DIO_voidTogglePin(LEDPIN_2);
 8f2:	82 e0       	ldi	r24, 0x02	; 2
 8f4:	0e 94 2c 02 	call	0x458	; 0x458 <DIO_voidTogglePin>
        	break;
 8f8:	74 c0       	rjmp	.+232    	; 0x9e2 <LED_voidToggle+0x138>
        	case (LED_3):
        		DIO_voidTogglePin(LEDPIN_3);
 8fa:	83 e0       	ldi	r24, 0x03	; 3
 8fc:	0e 94 2c 02 	call	0x458	; 0x458 <DIO_voidTogglePin>
        	break;
 900:	70 c0       	rjmp	.+224    	; 0x9e2 <LED_voidToggle+0x138>
        	case (LED_4):
        		DIO_voidTogglePin(LEDPIN_4);
 902:	84 e0       	ldi	r24, 0x04	; 4
 904:	0e 94 2c 02 	call	0x458	; 0x458 <DIO_voidTogglePin>
        	break;
 908:	6c c0       	rjmp	.+216    	; 0x9e2 <LED_voidToggle+0x138>
        	case (LED_5):
        		DIO_voidTogglePin(LEDPIN_5);
 90a:	85 e0       	ldi	r24, 0x05	; 5
 90c:	0e 94 2c 02 	call	0x458	; 0x458 <DIO_voidTogglePin>
        	break;
 910:	68 c0       	rjmp	.+208    	; 0x9e2 <LED_voidToggle+0x138>
        	case (LED_6):
        		DIO_voidTogglePin(LEDPIN_6);
 912:	86 e0       	ldi	r24, 0x06	; 6
 914:	0e 94 2c 02 	call	0x458	; 0x458 <DIO_voidTogglePin>
        	break;
 918:	64 c0       	rjmp	.+200    	; 0x9e2 <LED_voidToggle+0x138>
        	case (LED_7):
        		DIO_voidTogglePin(LEDPIN_7);
 91a:	87 e0       	ldi	r24, 0x07	; 7
 91c:	0e 94 2c 02 	call	0x458	; 0x458 <DIO_voidTogglePin>
        	break;
 920:	60 c0       	rjmp	.+192    	; 0x9e2 <LED_voidToggle+0x138>
        	case (LED_8):
        		DIO_voidTogglePin(LEDPIN_8);
 922:	88 e0       	ldi	r24, 0x08	; 8
 924:	0e 94 2c 02 	call	0x458	; 0x458 <DIO_voidTogglePin>
        	break;
 928:	5c c0       	rjmp	.+184    	; 0x9e2 <LED_voidToggle+0x138>
        	case (LED_9):
        		DIO_voidTogglePin(LEDPIN_9);
 92a:	89 e0       	ldi	r24, 0x09	; 9
 92c:	0e 94 2c 02 	call	0x458	; 0x458 <DIO_voidTogglePin>
        	break;
 930:	58 c0       	rjmp	.+176    	; 0x9e2 <LED_voidToggle+0x138>
        	case (LED_10):
        		DIO_voidTogglePin(LEDPIN_10);
 932:	8a e0       	ldi	r24, 0x0A	; 10
 934:	0e 94 2c 02 	call	0x458	; 0x458 <DIO_voidTogglePin>
        	break;
 938:	54 c0       	rjmp	.+168    	; 0x9e2 <LED_voidToggle+0x138>
        	case (LED_11):
        		DIO_voidTogglePin(LEDPIN_11);
 93a:	8b e0       	ldi	r24, 0x0B	; 11
 93c:	0e 94 2c 02 	call	0x458	; 0x458 <DIO_voidTogglePin>
        	break;
 940:	50 c0       	rjmp	.+160    	; 0x9e2 <LED_voidToggle+0x138>
        	case (LED_12):
        		DIO_voidTogglePin(LEDPIN_12);
 942:	8c e0       	ldi	r24, 0x0C	; 12
 944:	0e 94 2c 02 	call	0x458	; 0x458 <DIO_voidTogglePin>
        	break;
 948:	4c c0       	rjmp	.+152    	; 0x9e2 <LED_voidToggle+0x138>
        	case (LED_13):
        		DIO_voidTogglePin(LEDPIN_13);
 94a:	8d e0       	ldi	r24, 0x0D	; 13
 94c:	0e 94 2c 02 	call	0x458	; 0x458 <DIO_voidTogglePin>
        	break;
 950:	48 c0       	rjmp	.+144    	; 0x9e2 <LED_voidToggle+0x138>
        	case (LED_14):
        		DIO_voidTogglePin(LEDPIN_14);
 952:	8e e0       	ldi	r24, 0x0E	; 14
 954:	0e 94 2c 02 	call	0x458	; 0x458 <DIO_voidTogglePin>
        	break;
 958:	44 c0       	rjmp	.+136    	; 0x9e2 <LED_voidToggle+0x138>
        	case (LED_15):
        		DIO_voidTogglePin(LEDPIN_15);
 95a:	8f e0       	ldi	r24, 0x0F	; 15
 95c:	0e 94 2c 02 	call	0x458	; 0x458 <DIO_voidTogglePin>
        	break;
 960:	40 c0       	rjmp	.+128    	; 0x9e2 <LED_voidToggle+0x138>
        	case (LED_16):
        		DIO_voidTogglePin(LEDPIN_16);
 962:	80 e1       	ldi	r24, 0x10	; 16
 964:	0e 94 2c 02 	call	0x458	; 0x458 <DIO_voidTogglePin>
        	break;
 968:	3c c0       	rjmp	.+120    	; 0x9e2 <LED_voidToggle+0x138>
        	case (LED_17):
        		DIO_voidTogglePin(LEDPIN_17);
 96a:	81 e1       	ldi	r24, 0x11	; 17
 96c:	0e 94 2c 02 	call	0x458	; 0x458 <DIO_voidTogglePin>
        	break;
 970:	38 c0       	rjmp	.+112    	; 0x9e2 <LED_voidToggle+0x138>
        	case (LED_18):
        		DIO_voidTogglePin(LEDPIN_18);
 972:	82 e1       	ldi	r24, 0x12	; 18
 974:	0e 94 2c 02 	call	0x458	; 0x458 <DIO_voidTogglePin>
        	break;
 978:	34 c0       	rjmp	.+104    	; 0x9e2 <LED_voidToggle+0x138>
        	case (LED_19):
        		DIO_voidTogglePin(LEDPIN_19);
 97a:	83 e1       	ldi	r24, 0x13	; 19
 97c:	0e 94 2c 02 	call	0x458	; 0x458 <DIO_voidTogglePin>
        	break;
 980:	30 c0       	rjmp	.+96     	; 0x9e2 <LED_voidToggle+0x138>
        	case (LED_20):
        		DIO_voidTogglePin(LEDPIN_20);
 982:	84 e1       	ldi	r24, 0x14	; 20
 984:	0e 94 2c 02 	call	0x458	; 0x458 <DIO_voidTogglePin>
        	break;
 988:	2c c0       	rjmp	.+88     	; 0x9e2 <LED_voidToggle+0x138>
        	case (LED_21):
        		DIO_voidTogglePin(LEDPIN_21);
 98a:	85 e1       	ldi	r24, 0x15	; 21
 98c:	0e 94 2c 02 	call	0x458	; 0x458 <DIO_voidTogglePin>
        	break;
 990:	28 c0       	rjmp	.+80     	; 0x9e2 <LED_voidToggle+0x138>
        	case (LED_22):
        		DIO_voidTogglePin(LEDPIN_22);
 992:	86 e1       	ldi	r24, 0x16	; 22
 994:	0e 94 2c 02 	call	0x458	; 0x458 <DIO_voidTogglePin>
        	break;
 998:	24 c0       	rjmp	.+72     	; 0x9e2 <LED_voidToggle+0x138>
        	case (LED_23):
        		DIO_voidTogglePin(LEDPIN_23);
 99a:	87 e1       	ldi	r24, 0x17	; 23
 99c:	0e 94 2c 02 	call	0x458	; 0x458 <DIO_voidTogglePin>
        	break;
 9a0:	20 c0       	rjmp	.+64     	; 0x9e2 <LED_voidToggle+0x138>
        	case (LED_24):
        		DIO_voidTogglePin(LEDPIN_24);
 9a2:	88 e1       	ldi	r24, 0x18	; 24
 9a4:	0e 94 2c 02 	call	0x458	; 0x458 <DIO_voidTogglePin>
        	break;
 9a8:	1c c0       	rjmp	.+56     	; 0x9e2 <LED_voidToggle+0x138>
        	case (LED_25):
        		DIO_voidTogglePin(LEDPIN_25);
 9aa:	89 e1       	ldi	r24, 0x19	; 25
 9ac:	0e 94 2c 02 	call	0x458	; 0x458 <DIO_voidTogglePin>
        	break;
 9b0:	18 c0       	rjmp	.+48     	; 0x9e2 <LED_voidToggle+0x138>
        	case (LED_26):
        		DIO_voidTogglePin(LEDPIN_26);
 9b2:	8a e1       	ldi	r24, 0x1A	; 26
 9b4:	0e 94 2c 02 	call	0x458	; 0x458 <DIO_voidTogglePin>
        	break;
 9b8:	14 c0       	rjmp	.+40     	; 0x9e2 <LED_voidToggle+0x138>
        	case (LED_27):
        		DIO_voidTogglePin(LEDPIN_27);
 9ba:	8b e1       	ldi	r24, 0x1B	; 27
 9bc:	0e 94 2c 02 	call	0x458	; 0x458 <DIO_voidTogglePin>
        	break;
 9c0:	10 c0       	rjmp	.+32     	; 0x9e2 <LED_voidToggle+0x138>
        	case (LED_28):
        		DIO_voidTogglePin(LEDPIN_28);
 9c2:	8c e1       	ldi	r24, 0x1C	; 28
 9c4:	0e 94 2c 02 	call	0x458	; 0x458 <DIO_voidTogglePin>
        	break;
 9c8:	0c c0       	rjmp	.+24     	; 0x9e2 <LED_voidToggle+0x138>
        	case (LED_29):
        		DIO_voidTogglePin(LEDPIN_29);
 9ca:	8d e1       	ldi	r24, 0x1D	; 29
 9cc:	0e 94 2c 02 	call	0x458	; 0x458 <DIO_voidTogglePin>
        	break;
 9d0:	08 c0       	rjmp	.+16     	; 0x9e2 <LED_voidToggle+0x138>
        	case (LED_30):
        		DIO_voidTogglePin(LEDPIN_30);
 9d2:	8e e1       	ldi	r24, 0x1E	; 30
 9d4:	0e 94 2c 02 	call	0x458	; 0x458 <DIO_voidTogglePin>
        	break;
 9d8:	04 c0       	rjmp	.+8      	; 0x9e2 <LED_voidToggle+0x138>
        	case (LED_31):
        		DIO_voidTogglePin(LEDPIN_31);
 9da:	8f e1       	ldi	r24, 0x1F	; 31
 9dc:	0e 94 2c 02 	call	0x458	; 0x458 <DIO_voidTogglePin>
        	break;
 9e0:	00 00       	nop

	}


}
 9e2:	00 00       	nop
 9e4:	0f 90       	pop	r0
 9e6:	df 91       	pop	r29
 9e8:	cf 91       	pop	r28
 9ea:	08 95       	ret

000009ec <TIM0_voidInitialize>:
#include "TIM0_int.h"
static void(*TIM0_CallBack)(void);

/* Description:  */
void TIM0_voidInitialize(void)
{
 9ec:	cf 93       	push	r28
 9ee:	df 93       	push	r29
 9f0:	cd b7       	in	r28, 0x3d	; 61
 9f2:	de b7       	in	r29, 0x3e	; 62
	//han5aly el prescaler a5er 7aga 3shan ana mograd makatbt el prescaller haybtdy 3ad
	
	/*Disable interrupt */  //3ashan el setcallback delwa2ty feha gabrage fna h3melo enable lama y7ot el call back
	CLRBIT(TIMSK,0);
 9f4:	89 e5       	ldi	r24, 0x59	; 89
 9f6:	90 e0       	ldi	r25, 0x00	; 0
 9f8:	29 e5       	ldi	r18, 0x59	; 89
 9fa:	30 e0       	ldi	r19, 0x00	; 0
 9fc:	f9 01       	movw	r30, r18
 9fe:	20 81       	ld	r18, Z
 a00:	2e 7f       	andi	r18, 0xFE	; 254
 a02:	fc 01       	movw	r30, r24
 a04:	20 83       	st	Z, r18
	/* Clear Flag */
	SETBIT(TIFR,0);
 a06:	88 e5       	ldi	r24, 0x58	; 88
 a08:	90 e0       	ldi	r25, 0x00	; 0
 a0a:	28 e5       	ldi	r18, 0x58	; 88
 a0c:	30 e0       	ldi	r19, 0x00	; 0
 a0e:	f9 01       	movw	r30, r18
 a10:	20 81       	ld	r18, Z
 a12:	21 60       	ori	r18, 0x01	; 1
 a14:	fc 01       	movw	r30, r24
 a16:	20 83       	st	Z, r18
	#elif TIM0_u16_PRESCALLER ==TIM0_u16_DIV_64
	TCCR0 = 0b00000011;
	#elif TIM0_u16_PRESCALLER ==TIM0_u16_DIV_256
	TCCR0 = 0b00000100;
	#elif TIM0_u16_PRESCALLER ==TIM0_u16_DIV_1024
	TCCR0 = 0b00000101;
 a18:	83 e5       	ldi	r24, 0x53	; 83
 a1a:	90 e0       	ldi	r25, 0x00	; 0
 a1c:	25 e0       	ldi	r18, 0x05	; 5
 a1e:	fc 01       	movw	r30, r24
 a20:	20 83       	st	Z, r18
	#endif
	
}
 a22:	00 00       	nop
 a24:	df 91       	pop	r29
 a26:	cf 91       	pop	r28
 a28:	08 95       	ret

00000a2a <TIM0_voidEnableInt>:

/* Description:  */
void TIM0_voidEnableInt(void)
{
 a2a:	cf 93       	push	r28
 a2c:	df 93       	push	r29
 a2e:	cd b7       	in	r28, 0x3d	; 61
 a30:	de b7       	in	r29, 0x3e	; 62
	SETBIT(TIMSK,0);
 a32:	89 e5       	ldi	r24, 0x59	; 89
 a34:	90 e0       	ldi	r25, 0x00	; 0
 a36:	29 e5       	ldi	r18, 0x59	; 89
 a38:	30 e0       	ldi	r19, 0x00	; 0
 a3a:	f9 01       	movw	r30, r18
 a3c:	20 81       	ld	r18, Z
 a3e:	21 60       	ori	r18, 0x01	; 1
 a40:	fc 01       	movw	r30, r24
 a42:	20 83       	st	Z, r18
}
 a44:	00 00       	nop
 a46:	df 91       	pop	r29
 a48:	cf 91       	pop	r28
 a4a:	08 95       	ret

00000a4c <TIM0_voidDisableInt>:


void TIM0_voidDisableInt(void)
{
 a4c:	cf 93       	push	r28
 a4e:	df 93       	push	r29
 a50:	cd b7       	in	r28, 0x3d	; 61
 a52:	de b7       	in	r29, 0x3e	; 62
	CLRBIT(TIMSK,0);
 a54:	89 e5       	ldi	r24, 0x59	; 89
 a56:	90 e0       	ldi	r25, 0x00	; 0
 a58:	29 e5       	ldi	r18, 0x59	; 89
 a5a:	30 e0       	ldi	r19, 0x00	; 0
 a5c:	f9 01       	movw	r30, r18
 a5e:	20 81       	ld	r18, Z
 a60:	2e 7f       	andi	r18, 0xFE	; 254
 a62:	fc 01       	movw	r30, r24
 a64:	20 83       	st	Z, r18
}
 a66:	00 00       	nop
 a68:	df 91       	pop	r29
 a6a:	cf 91       	pop	r28
 a6c:	08 95       	ret

00000a6e <TIM0_voidSetRegister>:

void TIM0_voidSetRegister(u8 Copy_u8Value)
{
 a6e:	cf 93       	push	r28
 a70:	df 93       	push	r29
 a72:	1f 92       	push	r1
 a74:	cd b7       	in	r28, 0x3d	; 61
 a76:	de b7       	in	r29, 0x3e	; 62
 a78:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Copy_u8Value;
 a7a:	82 e5       	ldi	r24, 0x52	; 82
 a7c:	90 e0       	ldi	r25, 0x00	; 0
 a7e:	29 81       	ldd	r18, Y+1	; 0x01
 a80:	fc 01       	movw	r30, r24
 a82:	20 83       	st	Z, r18
}
 a84:	00 00       	nop
 a86:	0f 90       	pop	r0
 a88:	df 91       	pop	r29
 a8a:	cf 91       	pop	r28
 a8c:	08 95       	ret

00000a8e <TIM0_voidSetCallBack>:


void TIM0_voidSetCallBack(void (*Copy_ptr) (void))
{
 a8e:	cf 93       	push	r28
 a90:	df 93       	push	r29
 a92:	00 d0       	rcall	.+0      	; 0xa94 <TIM0_voidSetCallBack+0x6>
 a94:	cd b7       	in	r28, 0x3d	; 61
 a96:	de b7       	in	r29, 0x3e	; 62
 a98:	9a 83       	std	Y+2, r25	; 0x02
 a9a:	89 83       	std	Y+1, r24	; 0x01
	TIM0_CallBack = Copy_ptr;
 a9c:	89 81       	ldd	r24, Y+1	; 0x01
 a9e:	9a 81       	ldd	r25, Y+2	; 0x02
 aa0:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__data_end+0x1>
 aa4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
}
 aa8:	00 00       	nop
 aaa:	0f 90       	pop	r0
 aac:	0f 90       	pop	r0
 aae:	df 91       	pop	r29
 ab0:	cf 91       	pop	r28
 ab2:	08 95       	ret

00000ab4 <__vector_11>:

void __vector_11(void) __attribute__((signal,used));
void __vector_11(void)
{
 ab4:	1f 92       	push	r1
 ab6:	0f 92       	push	r0
 ab8:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 abc:	0f 92       	push	r0
 abe:	11 24       	eor	r1, r1
 ac0:	2f 93       	push	r18
 ac2:	3f 93       	push	r19
 ac4:	4f 93       	push	r20
 ac6:	5f 93       	push	r21
 ac8:	6f 93       	push	r22
 aca:	7f 93       	push	r23
 acc:	8f 93       	push	r24
 ace:	9f 93       	push	r25
 ad0:	af 93       	push	r26
 ad2:	bf 93       	push	r27
 ad4:	ef 93       	push	r30
 ad6:	ff 93       	push	r31
 ad8:	cf 93       	push	r28
 ada:	df 93       	push	r29
 adc:	cd b7       	in	r28, 0x3d	; 61
 ade:	de b7       	in	r29, 0x3e	; 62
	TIM0_CallBack();
 ae0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 ae4:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 ae8:	fc 01       	movw	r30, r24
 aea:	09 95       	icall
}
 aec:	00 00       	nop
 aee:	df 91       	pop	r29
 af0:	cf 91       	pop	r28
 af2:	ff 91       	pop	r31
 af4:	ef 91       	pop	r30
 af6:	bf 91       	pop	r27
 af8:	af 91       	pop	r26
 afa:	9f 91       	pop	r25
 afc:	8f 91       	pop	r24
 afe:	7f 91       	pop	r23
 b00:	6f 91       	pop	r22
 b02:	5f 91       	pop	r21
 b04:	4f 91       	pop	r20
 b06:	3f 91       	pop	r19
 b08:	2f 91       	pop	r18
 b0a:	0f 90       	pop	r0
 b0c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 b10:	0f 90       	pop	r0
 b12:	1f 90       	pop	r1
 b14:	18 95       	reti

00000b16 <main>:
void TIMER_ISR(void);
u8 flag=0;
u8 reg = 82;

int main(void)
{
 b16:	cf 93       	push	r28
 b18:	df 93       	push	r29
 b1a:	cd b7       	in	r28, 0x3d	; 61
 b1c:	de b7       	in	r29, 0x3e	; 62
	DIO_voidInitialize();
 b1e:	0e 94 a9 00 	call	0x152	; 0x152 <DIO_voidInitialize>
	LED_voidInitialize();
 b22:	0e 94 cb 02 	call	0x596	; 0x596 <LED_voidInitialize>
	TIM0_voidInitialize();
 b26:	0e 94 f6 04 	call	0x9ec	; 0x9ec <TIM0_voidInitialize>
	TIM0_voidSetCallBack(TIMER_ISR);
 b2a:	82 ea       	ldi	r24, 0xA2	; 162
 b2c:	95 e0       	ldi	r25, 0x05	; 5
 b2e:	0e 94 47 05 	call	0xa8e	; 0xa8e <TIM0_voidSetCallBack>
	GIE_voidEnable();
 b32:	0e 94 a9 02 	call	0x552	; 0x552 <GIE_voidEnable>
	TIM0_voidEnableInt();
 b36:	0e 94 15 05 	call	0xa2a	; 0xa2a <TIM0_voidEnableInt>
	TIM0_voidSetRegister(reg);
 b3a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 b3e:	0e 94 37 05 	call	0xa6e	; 0xa6e <TIM0_voidSetRegister>

	while(1)
	{


	}
 b42:	ff cf       	rjmp	.-2      	; 0xb42 <main+0x2c>

00000b44 <TIMER_ISR>:

	return 0;
}
void TIMER_ISR(void){
 b44:	cf 93       	push	r28
 b46:	df 93       	push	r29
 b48:	cd b7       	in	r28, 0x3d	; 61
 b4a:	de b7       	in	r29, 0x3e	; 62
	flag++;
 b4c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <flag>
 b50:	8f 5f       	subi	r24, 0xFF	; 255
 b52:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <flag>
	if (flag==11){
 b56:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <flag>
 b5a:	8b 30       	cpi	r24, 0x0B	; 11
 b5c:	49 f4       	brne	.+18     	; 0xb70 <TIMER_ISR+0x2c>
		TIM0_voidSetRegister(reg);
 b5e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 b62:	0e 94 37 05 	call	0xa6e	; 0xa6e <TIM0_voidSetRegister>
		LED_voidToggle(LED_7);
 b66:	87 e0       	ldi	r24, 0x07	; 7
 b68:	0e 94 55 04 	call	0x8aa	; 0x8aa <LED_voidToggle>
		flag =0;
 b6c:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <flag>
	}

}
 b70:	00 00       	nop
 b72:	df 91       	pop	r29
 b74:	cf 91       	pop	r28
 b76:	08 95       	ret

00000b78 <__tablejump2__>:
 b78:	ee 0f       	add	r30, r30
 b7a:	ff 1f       	adc	r31, r31
 b7c:	05 90       	lpm	r0, Z+
 b7e:	f4 91       	lpm	r31, Z
 b80:	e0 2d       	mov	r30, r0
 b82:	09 94       	ijmp

00000b84 <_exit>:
 b84:	f8 94       	cli

00000b86 <__stop_program>:
 b86:	ff cf       	rjmp	.-2      	; 0xb86 <__stop_program>
