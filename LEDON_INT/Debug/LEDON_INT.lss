
LEDON_INT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b34  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000b34  00000bc8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  00000bc8  2**0
                  ALLOC
  3 .stab         00001f38  00000000  00000000  00000bc8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e7e  00000000  00000000  00002b00  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000397e  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003990  2**2
                  CONTENTS, READONLY
  7 .debug_info   000004e6  00000000  00000000  000039cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004a3  00000000  00000000  00003eb2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  00004355  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000196  00000000  00000000  0000436f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 8a 00 	jmp	0x114	; 0x114 <__ctors_end>
   4:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__vector_1>
   8:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
   c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  10:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  14:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  18:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  1c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  20:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  24:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  28:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  2c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  30:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  34:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  38:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  3c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  40:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  44:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  48:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  4c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  50:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  54:	6d 03       	fmul	r22, r21
  56:	72 03       	mulsu	r23, r18
  58:	77 03       	mulsu	r23, r23
  5a:	7c 03       	fmul	r23, r20
  5c:	81 03       	fmuls	r16, r17
  5e:	86 03       	fmuls	r16, r22
  60:	8b 03       	fmulsu	r16, r19
  62:	90 03       	fmuls	r17, r16
  64:	95 03       	fmuls	r17, r21
  66:	9a 03       	fmulsu	r17, r18
  68:	9f 03       	fmulsu	r17, r23
  6a:	a4 03       	fmuls	r18, r20
  6c:	a9 03       	fmulsu	r18, r17
  6e:	ae 03       	fmulsu	r18, r22
  70:	b3 03       	fmuls	r19, r19
  72:	b8 03       	fmulsu	r19, r16
  74:	bd 03       	fmulsu	r19, r21
  76:	c2 03       	fmuls	r20, r18
  78:	c7 03       	fmuls	r20, r23
  7a:	cc 03       	fmulsu	r20, r20
  7c:	d1 03       	fmuls	r21, r17
  7e:	d6 03       	fmuls	r21, r22
  80:	db 03       	fmulsu	r21, r19
  82:	e0 03       	fmuls	r22, r16
  84:	e5 03       	fmuls	r22, r21
  86:	ea 03       	fmulsu	r22, r18
  88:	ef 03       	fmulsu	r22, r23
  8a:	f4 03       	fmuls	r23, r20
  8c:	f9 03       	fmulsu	r23, r17
  8e:	fe 03       	fmulsu	r23, r22
  90:	03 04       	cpc	r0, r3
  92:	08 04       	cpc	r0, r8
  94:	2e 04       	cpc	r2, r14
  96:	33 04       	cpc	r3, r3
  98:	38 04       	cpc	r3, r8
  9a:	3d 04       	cpc	r3, r13
  9c:	42 04       	cpc	r4, r2
  9e:	47 04       	cpc	r4, r7
  a0:	4c 04       	cpc	r4, r12
  a2:	51 04       	cpc	r5, r1
  a4:	56 04       	cpc	r5, r6
  a6:	5b 04       	cpc	r5, r11
  a8:	60 04       	cpc	r6, r0
  aa:	65 04       	cpc	r6, r5
  ac:	6a 04       	cpc	r6, r10
  ae:	6f 04       	cpc	r6, r15
  b0:	74 04       	cpc	r7, r4
  b2:	79 04       	cpc	r7, r9
  b4:	7e 04       	cpc	r7, r14
  b6:	83 04       	cpc	r8, r3
  b8:	88 04       	cpc	r8, r8
  ba:	8d 04       	cpc	r8, r13
  bc:	92 04       	cpc	r9, r2
  be:	97 04       	cpc	r9, r7
  c0:	9c 04       	cpc	r9, r12
  c2:	a1 04       	cpc	r10, r1
  c4:	a6 04       	cpc	r10, r6
  c6:	ab 04       	cpc	r10, r11
  c8:	b0 04       	cpc	r11, r0
  ca:	b5 04       	cpc	r11, r5
  cc:	ba 04       	cpc	r11, r10
  ce:	bf 04       	cpc	r11, r15
  d0:	c4 04       	cpc	r12, r4
  d2:	c9 04       	cpc	r12, r9
  d4:	ef 04       	cpc	r14, r15
  d6:	f3 04       	cpc	r15, r3
  d8:	f7 04       	cpc	r15, r7
  da:	fb 04       	cpc	r15, r11
  dc:	ff 04       	cpc	r15, r15
  de:	03 05       	cpc	r16, r3
  e0:	07 05       	cpc	r16, r7
  e2:	0b 05       	cpc	r16, r11
  e4:	0f 05       	cpc	r16, r15
  e6:	13 05       	cpc	r17, r3
  e8:	17 05       	cpc	r17, r7
  ea:	1b 05       	cpc	r17, r11
  ec:	1f 05       	cpc	r17, r15
  ee:	23 05       	cpc	r18, r3
  f0:	27 05       	cpc	r18, r7
  f2:	2b 05       	cpc	r18, r11
  f4:	2f 05       	cpc	r18, r15
  f6:	33 05       	cpc	r19, r3
  f8:	37 05       	cpc	r19, r7
  fa:	3b 05       	cpc	r19, r11
  fc:	3f 05       	cpc	r19, r15
  fe:	43 05       	cpc	r20, r3
 100:	47 05       	cpc	r20, r7
 102:	4b 05       	cpc	r20, r11
 104:	4f 05       	cpc	r20, r15
 106:	53 05       	cpc	r21, r3
 108:	57 05       	cpc	r21, r7
 10a:	5b 05       	cpc	r21, r11
 10c:	5f 05       	cpc	r21, r15
 10e:	63 05       	cpc	r22, r3
 110:	67 05       	cpc	r22, r7
 112:	6b 05       	cpc	r22, r11

00000114 <__ctors_end>:
 114:	11 24       	eor	r1, r1
 116:	1f be       	out	0x3f, r1	; 63
 118:	cf e5       	ldi	r28, 0x5F	; 95
 11a:	d8 e0       	ldi	r29, 0x08	; 8
 11c:	de bf       	out	0x3e, r29	; 62
 11e:	cd bf       	out	0x3d, r28	; 61

00000120 <__do_clear_bss>:
 120:	20 e0       	ldi	r18, 0x00	; 0
 122:	a0 e6       	ldi	r26, 0x60	; 96
 124:	b0 e0       	ldi	r27, 0x00	; 0
 126:	01 c0       	rjmp	.+2      	; 0x12a <.do_clear_bss_start>

00000128 <.do_clear_bss_loop>:
 128:	1d 92       	st	X+, r1

0000012a <.do_clear_bss_start>:
 12a:	a2 36       	cpi	r26, 0x62	; 98
 12c:	b2 07       	cpc	r27, r18
 12e:	e1 f7       	brne	.-8      	; 0x128 <.do_clear_bss_loop>
 130:	0e 94 74 05 	call	0xae8	; 0xae8 <main>
 134:	0c 94 98 05 	jmp	0xb30	; 0xb30 <_exit>

00000138 <__bad_interrupt>:
 138:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000013c <DIO_voidInitialize>:
#include "BIT_MATH.h"
#include "DIO_priv.h"
#include "DIO_config.h"
#include "DIO_int.h"

void DIO_voidInitialize(void){
 13c:	cf 93       	push	r28
 13e:	df 93       	push	r29
 140:	cd b7       	in	r28, 0x3d	; 61
 142:	de b7       	in	r29, 0x3e	; 62

	DDRA = CONCBIT(PIN_7DIR,PIN_6DIR,PIN_5DIR,PIN_4DIR,PIN_3DIR,PIN_2DIR,PIN_1DIR,PIN_0DIR);
 144:	8a e3       	ldi	r24, 0x3A	; 58
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	2f e1       	ldi	r18, 0x1F	; 31
 14a:	fc 01       	movw	r30, r24
 14c:	20 83       	st	Z, r18
	DDRB = CONCBIT(PIN_15DIR,PIN_14DIR,PIN_13DIR,PIN_12DIR,PIN_11DIR,PIN_10DIR,PIN_9DIR,PIN_8DIR);
 14e:	87 e3       	ldi	r24, 0x37	; 55
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	fc 01       	movw	r30, r24
 154:	10 82       	st	Z, r1
	DDRC = CONCBIT(PIN_23DIR,PIN_22DIR,PIN_21DIR,PIN_20DIR,PIN_19DIR,PIN_18DIR,PIN_17DIR,PIN_16DIR);
 156:	84 e3       	ldi	r24, 0x34	; 52
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	fc 01       	movw	r30, r24
 15c:	10 82       	st	Z, r1
	DDRD = CONCBIT(PIN_31DIR,PIN_30DIR,PIN_29DIR,PIN_28DIR,PIN_27DIR,PIN_26DIR,PIN_25DIR,PIN_24DIR);
 15e:	81 e3       	ldi	r24, 0x31	; 49
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	fc 01       	movw	r30, r24
 164:	10 82       	st	Z, r1

}
 166:	00 00       	nop
 168:	df 91       	pop	r29
 16a:	cf 91       	pop	r28
 16c:	08 95       	ret

0000016e <DIO_voidSetPin>:

void DIO_voidSetPin(u8 PinNum,u8 Value){
 16e:	cf 93       	push	r28
 170:	df 93       	push	r29
 172:	00 d0       	rcall	.+0      	; 0x174 <DIO_voidSetPin+0x6>
 174:	cd b7       	in	r28, 0x3d	; 61
 176:	de b7       	in	r29, 0x3e	; 62
 178:	89 83       	std	Y+1, r24	; 0x01
 17a:	6a 83       	std	Y+2, r22	; 0x02
    if (Value==HIGH){
 17c:	8a 81       	ldd	r24, Y+2	; 0x02
 17e:	81 30       	cpi	r24, 0x01	; 1
 180:	09 f0       	breq	.+2      	; 0x184 <DIO_voidSetPin+0x16>
 182:	74 c0       	rjmp	.+232    	; 0x26c <DIO_voidSetPin+0xfe>

        if((PinNum>=0 && PinNum<8)){
 184:	89 81       	ldd	r24, Y+1	; 0x01
 186:	88 30       	cpi	r24, 0x08	; 8
 188:	a8 f4       	brcc	.+42     	; 0x1b4 <DIO_voidSetPin+0x46>
            SETBIT(PORTA,PinNum);
 18a:	8b e3       	ldi	r24, 0x3B	; 59
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	2b e3       	ldi	r18, 0x3B	; 59
 190:	30 e0       	ldi	r19, 0x00	; 0
 192:	f9 01       	movw	r30, r18
 194:	20 81       	ld	r18, Z
 196:	62 2f       	mov	r22, r18
 198:	29 81       	ldd	r18, Y+1	; 0x01
 19a:	42 2f       	mov	r20, r18
 19c:	50 e0       	ldi	r21, 0x00	; 0
 19e:	21 e0       	ldi	r18, 0x01	; 1
 1a0:	30 e0       	ldi	r19, 0x00	; 0
 1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <DIO_voidSetPin+0x3a>
 1a4:	22 0f       	add	r18, r18
 1a6:	33 1f       	adc	r19, r19
 1a8:	4a 95       	dec	r20
 1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <DIO_voidSetPin+0x36>
 1ac:	26 2b       	or	r18, r22
 1ae:	fc 01       	movw	r30, r24
 1b0:	20 83       	st	Z, r18
    	    CLRBIT(PORTD,PinNum-16);
    	}

    }

}
 1b2:	d6 c0       	rjmp	.+428    	; 0x360 <DIO_voidSetPin+0x1f2>
void DIO_voidSetPin(u8 PinNum,u8 Value){
    if (Value==HIGH){

        if((PinNum>=0 && PinNum<8)){
            SETBIT(PORTA,PinNum);
        }else if((PinNum>=8) && (PinNum<16)){
 1b4:	89 81       	ldd	r24, Y+1	; 0x01
 1b6:	88 30       	cpi	r24, 0x08	; 8
 1b8:	d8 f0       	brcs	.+54     	; 0x1f0 <DIO_voidSetPin+0x82>
 1ba:	89 81       	ldd	r24, Y+1	; 0x01
 1bc:	80 31       	cpi	r24, 0x10	; 16
 1be:	c0 f4       	brcc	.+48     	; 0x1f0 <DIO_voidSetPin+0x82>
        	SETBIT(PORTB,PinNum-8);
 1c0:	88 e3       	ldi	r24, 0x38	; 56
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	28 e3       	ldi	r18, 0x38	; 56
 1c6:	30 e0       	ldi	r19, 0x00	; 0
 1c8:	f9 01       	movw	r30, r18
 1ca:	20 81       	ld	r18, Z
 1cc:	62 2f       	mov	r22, r18
 1ce:	29 81       	ldd	r18, Y+1	; 0x01
 1d0:	22 2f       	mov	r18, r18
 1d2:	30 e0       	ldi	r19, 0x00	; 0
 1d4:	a9 01       	movw	r20, r18
 1d6:	48 50       	subi	r20, 0x08	; 8
 1d8:	51 09       	sbc	r21, r1
 1da:	21 e0       	ldi	r18, 0x01	; 1
 1dc:	30 e0       	ldi	r19, 0x00	; 0
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <DIO_voidSetPin+0x76>
 1e0:	22 0f       	add	r18, r18
 1e2:	33 1f       	adc	r19, r19
 1e4:	4a 95       	dec	r20
 1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <DIO_voidSetPin+0x72>
 1e8:	26 2b       	or	r18, r22
 1ea:	fc 01       	movw	r30, r24
 1ec:	20 83       	st	Z, r18
 1ee:	b8 c0       	rjmp	.+368    	; 0x360 <DIO_voidSetPin+0x1f2>
        }else if((PinNum>=16) && (PinNum<24)){
 1f0:	89 81       	ldd	r24, Y+1	; 0x01
 1f2:	80 31       	cpi	r24, 0x10	; 16
 1f4:	d8 f0       	brcs	.+54     	; 0x22c <DIO_voidSetPin+0xbe>
 1f6:	89 81       	ldd	r24, Y+1	; 0x01
 1f8:	88 31       	cpi	r24, 0x18	; 24
 1fa:	c0 f4       	brcc	.+48     	; 0x22c <DIO_voidSetPin+0xbe>
        	SETBIT(PORTC,PinNum-16);
 1fc:	85 e3       	ldi	r24, 0x35	; 53
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	25 e3       	ldi	r18, 0x35	; 53
 202:	30 e0       	ldi	r19, 0x00	; 0
 204:	f9 01       	movw	r30, r18
 206:	20 81       	ld	r18, Z
 208:	62 2f       	mov	r22, r18
 20a:	29 81       	ldd	r18, Y+1	; 0x01
 20c:	22 2f       	mov	r18, r18
 20e:	30 e0       	ldi	r19, 0x00	; 0
 210:	a9 01       	movw	r20, r18
 212:	40 51       	subi	r20, 0x10	; 16
 214:	51 09       	sbc	r21, r1
 216:	21 e0       	ldi	r18, 0x01	; 1
 218:	30 e0       	ldi	r19, 0x00	; 0
 21a:	02 c0       	rjmp	.+4      	; 0x220 <DIO_voidSetPin+0xb2>
 21c:	22 0f       	add	r18, r18
 21e:	33 1f       	adc	r19, r19
 220:	4a 95       	dec	r20
 222:	e2 f7       	brpl	.-8      	; 0x21c <DIO_voidSetPin+0xae>
 224:	26 2b       	or	r18, r22
 226:	fc 01       	movw	r30, r24
 228:	20 83       	st	Z, r18
 22a:	9a c0       	rjmp	.+308    	; 0x360 <DIO_voidSetPin+0x1f2>
        }else if((PinNum>=24) && (PinNum<32)){
 22c:	89 81       	ldd	r24, Y+1	; 0x01
 22e:	88 31       	cpi	r24, 0x18	; 24
 230:	08 f4       	brcc	.+2      	; 0x234 <DIO_voidSetPin+0xc6>
 232:	96 c0       	rjmp	.+300    	; 0x360 <DIO_voidSetPin+0x1f2>
 234:	89 81       	ldd	r24, Y+1	; 0x01
 236:	80 32       	cpi	r24, 0x20	; 32
 238:	08 f0       	brcs	.+2      	; 0x23c <DIO_voidSetPin+0xce>
 23a:	92 c0       	rjmp	.+292    	; 0x360 <DIO_voidSetPin+0x1f2>
        	SETBIT(PORTD,PinNum-16);
 23c:	82 e3       	ldi	r24, 0x32	; 50
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	22 e3       	ldi	r18, 0x32	; 50
 242:	30 e0       	ldi	r19, 0x00	; 0
 244:	f9 01       	movw	r30, r18
 246:	20 81       	ld	r18, Z
 248:	62 2f       	mov	r22, r18
 24a:	29 81       	ldd	r18, Y+1	; 0x01
 24c:	22 2f       	mov	r18, r18
 24e:	30 e0       	ldi	r19, 0x00	; 0
 250:	a9 01       	movw	r20, r18
 252:	40 51       	subi	r20, 0x10	; 16
 254:	51 09       	sbc	r21, r1
 256:	21 e0       	ldi	r18, 0x01	; 1
 258:	30 e0       	ldi	r19, 0x00	; 0
 25a:	02 c0       	rjmp	.+4      	; 0x260 <DIO_voidSetPin+0xf2>
 25c:	22 0f       	add	r18, r18
 25e:	33 1f       	adc	r19, r19
 260:	4a 95       	dec	r20
 262:	e2 f7       	brpl	.-8      	; 0x25c <DIO_voidSetPin+0xee>
 264:	26 2b       	or	r18, r22
 266:	fc 01       	movw	r30, r24
 268:	20 83       	st	Z, r18
    	    CLRBIT(PORTD,PinNum-16);
    	}

    }

}
 26a:	7a c0       	rjmp	.+244    	; 0x360 <DIO_voidSetPin+0x1f2>
        	SETBIT(PORTC,PinNum-16);
        }else if((PinNum>=24) && (PinNum<32)){
        	SETBIT(PORTD,PinNum-16);
        }

    }else if (Value==LOW){
 26c:	8a 81       	ldd	r24, Y+2	; 0x02
 26e:	88 23       	and	r24, r24
 270:	09 f0       	breq	.+2      	; 0x274 <DIO_voidSetPin+0x106>
 272:	76 c0       	rjmp	.+236    	; 0x360 <DIO_voidSetPin+0x1f2>

    	if((PinNum>=0 && PinNum<8)){
 274:	89 81       	ldd	r24, Y+1	; 0x01
 276:	88 30       	cpi	r24, 0x08	; 8
 278:	b0 f4       	brcc	.+44     	; 0x2a6 <DIO_voidSetPin+0x138>
    	    CLRBIT(PORTA,PinNum);
 27a:	8b e3       	ldi	r24, 0x3B	; 59
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	2b e3       	ldi	r18, 0x3B	; 59
 280:	30 e0       	ldi	r19, 0x00	; 0
 282:	f9 01       	movw	r30, r18
 284:	20 81       	ld	r18, Z
 286:	62 2f       	mov	r22, r18
 288:	29 81       	ldd	r18, Y+1	; 0x01
 28a:	42 2f       	mov	r20, r18
 28c:	50 e0       	ldi	r21, 0x00	; 0
 28e:	21 e0       	ldi	r18, 0x01	; 1
 290:	30 e0       	ldi	r19, 0x00	; 0
 292:	02 c0       	rjmp	.+4      	; 0x298 <DIO_voidSetPin+0x12a>
 294:	22 0f       	add	r18, r18
 296:	33 1f       	adc	r19, r19
 298:	4a 95       	dec	r20
 29a:	e2 f7       	brpl	.-8      	; 0x294 <DIO_voidSetPin+0x126>
 29c:	20 95       	com	r18
 29e:	26 23       	and	r18, r22
 2a0:	fc 01       	movw	r30, r24
 2a2:	20 83       	st	Z, r18
    	    CLRBIT(PORTD,PinNum-16);
    	}

    }

}
 2a4:	5d c0       	rjmp	.+186    	; 0x360 <DIO_voidSetPin+0x1f2>

    }else if (Value==LOW){

    	if((PinNum>=0 && PinNum<8)){
    	    CLRBIT(PORTA,PinNum);
    	}else if((PinNum>=8) && (PinNum<16)){
 2a6:	89 81       	ldd	r24, Y+1	; 0x01
 2a8:	88 30       	cpi	r24, 0x08	; 8
 2aa:	e0 f0       	brcs	.+56     	; 0x2e4 <DIO_voidSetPin+0x176>
 2ac:	89 81       	ldd	r24, Y+1	; 0x01
 2ae:	80 31       	cpi	r24, 0x10	; 16
 2b0:	c8 f4       	brcc	.+50     	; 0x2e4 <DIO_voidSetPin+0x176>
    	    CLRBIT(PORTB,PinNum-8);
 2b2:	88 e3       	ldi	r24, 0x38	; 56
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	28 e3       	ldi	r18, 0x38	; 56
 2b8:	30 e0       	ldi	r19, 0x00	; 0
 2ba:	f9 01       	movw	r30, r18
 2bc:	20 81       	ld	r18, Z
 2be:	62 2f       	mov	r22, r18
 2c0:	29 81       	ldd	r18, Y+1	; 0x01
 2c2:	22 2f       	mov	r18, r18
 2c4:	30 e0       	ldi	r19, 0x00	; 0
 2c6:	a9 01       	movw	r20, r18
 2c8:	48 50       	subi	r20, 0x08	; 8
 2ca:	51 09       	sbc	r21, r1
 2cc:	21 e0       	ldi	r18, 0x01	; 1
 2ce:	30 e0       	ldi	r19, 0x00	; 0
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <DIO_voidSetPin+0x168>
 2d2:	22 0f       	add	r18, r18
 2d4:	33 1f       	adc	r19, r19
 2d6:	4a 95       	dec	r20
 2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <DIO_voidSetPin+0x164>
 2da:	20 95       	com	r18
 2dc:	26 23       	and	r18, r22
 2de:	fc 01       	movw	r30, r24
 2e0:	20 83       	st	Z, r18
 2e2:	3e c0       	rjmp	.+124    	; 0x360 <DIO_voidSetPin+0x1f2>
    	}else if((PinNum>=16) && (PinNum<24)){
 2e4:	89 81       	ldd	r24, Y+1	; 0x01
 2e6:	80 31       	cpi	r24, 0x10	; 16
 2e8:	e0 f0       	brcs	.+56     	; 0x322 <DIO_voidSetPin+0x1b4>
 2ea:	89 81       	ldd	r24, Y+1	; 0x01
 2ec:	88 31       	cpi	r24, 0x18	; 24
 2ee:	c8 f4       	brcc	.+50     	; 0x322 <DIO_voidSetPin+0x1b4>
    	    CLRBIT(PORTC,PinNum-16);
 2f0:	85 e3       	ldi	r24, 0x35	; 53
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	25 e3       	ldi	r18, 0x35	; 53
 2f6:	30 e0       	ldi	r19, 0x00	; 0
 2f8:	f9 01       	movw	r30, r18
 2fa:	20 81       	ld	r18, Z
 2fc:	62 2f       	mov	r22, r18
 2fe:	29 81       	ldd	r18, Y+1	; 0x01
 300:	22 2f       	mov	r18, r18
 302:	30 e0       	ldi	r19, 0x00	; 0
 304:	a9 01       	movw	r20, r18
 306:	40 51       	subi	r20, 0x10	; 16
 308:	51 09       	sbc	r21, r1
 30a:	21 e0       	ldi	r18, 0x01	; 1
 30c:	30 e0       	ldi	r19, 0x00	; 0
 30e:	02 c0       	rjmp	.+4      	; 0x314 <DIO_voidSetPin+0x1a6>
 310:	22 0f       	add	r18, r18
 312:	33 1f       	adc	r19, r19
 314:	4a 95       	dec	r20
 316:	e2 f7       	brpl	.-8      	; 0x310 <DIO_voidSetPin+0x1a2>
 318:	20 95       	com	r18
 31a:	26 23       	and	r18, r22
 31c:	fc 01       	movw	r30, r24
 31e:	20 83       	st	Z, r18
 320:	1f c0       	rjmp	.+62     	; 0x360 <DIO_voidSetPin+0x1f2>
    	}else if((PinNum>=24) && (PinNum<32)){
 322:	89 81       	ldd	r24, Y+1	; 0x01
 324:	88 31       	cpi	r24, 0x18	; 24
 326:	e0 f0       	brcs	.+56     	; 0x360 <DIO_voidSetPin+0x1f2>
 328:	89 81       	ldd	r24, Y+1	; 0x01
 32a:	80 32       	cpi	r24, 0x20	; 32
 32c:	c8 f4       	brcc	.+50     	; 0x360 <DIO_voidSetPin+0x1f2>
    	    CLRBIT(PORTD,PinNum-16);
 32e:	82 e3       	ldi	r24, 0x32	; 50
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	22 e3       	ldi	r18, 0x32	; 50
 334:	30 e0       	ldi	r19, 0x00	; 0
 336:	f9 01       	movw	r30, r18
 338:	20 81       	ld	r18, Z
 33a:	62 2f       	mov	r22, r18
 33c:	29 81       	ldd	r18, Y+1	; 0x01
 33e:	22 2f       	mov	r18, r18
 340:	30 e0       	ldi	r19, 0x00	; 0
 342:	a9 01       	movw	r20, r18
 344:	40 51       	subi	r20, 0x10	; 16
 346:	51 09       	sbc	r21, r1
 348:	21 e0       	ldi	r18, 0x01	; 1
 34a:	30 e0       	ldi	r19, 0x00	; 0
 34c:	02 c0       	rjmp	.+4      	; 0x352 <DIO_voidSetPin+0x1e4>
 34e:	22 0f       	add	r18, r18
 350:	33 1f       	adc	r19, r19
 352:	4a 95       	dec	r20
 354:	e2 f7       	brpl	.-8      	; 0x34e <DIO_voidSetPin+0x1e0>
 356:	20 95       	com	r18
 358:	26 23       	and	r18, r22
 35a:	fc 01       	movw	r30, r24
 35c:	20 83       	st	Z, r18
    	}

    }

}
 35e:	00 c0       	rjmp	.+0      	; 0x360 <DIO_voidSetPin+0x1f2>
 360:	00 00       	nop
 362:	0f 90       	pop	r0
 364:	0f 90       	pop	r0
 366:	df 91       	pop	r29
 368:	cf 91       	pop	r28
 36a:	08 95       	ret

0000036c <DIO_u8GetPin>:

u8 DIO_u8GetPin(u8 PinNum){
 36c:	cf 93       	push	r28
 36e:	df 93       	push	r29
 370:	00 d0       	rcall	.+0      	; 0x372 <DIO_u8GetPin+0x6>
 372:	cd b7       	in	r28, 0x3d	; 61
 374:	de b7       	in	r29, 0x3e	; 62
 376:	8a 83       	std	Y+2, r24	; 0x02

	u8 ret;

	if((PinNum>=0 && PinNum<8)){
 378:	8a 81       	ldd	r24, Y+2	; 0x02
 37a:	88 30       	cpi	r24, 0x08	; 8
 37c:	88 f4       	brcc	.+34     	; 0x3a0 <DIO_u8GetPin+0x34>
	     ret= GETBIT(PINA,PinNum);
 37e:	89 e3       	ldi	r24, 0x39	; 57
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	fc 01       	movw	r30, r24
 384:	80 81       	ld	r24, Z
 386:	88 2f       	mov	r24, r24
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	2a 81       	ldd	r18, Y+2	; 0x02
 38c:	22 2f       	mov	r18, r18
 38e:	30 e0       	ldi	r19, 0x00	; 0
 390:	02 c0       	rjmp	.+4      	; 0x396 <DIO_u8GetPin+0x2a>
 392:	95 95       	asr	r25
 394:	87 95       	ror	r24
 396:	2a 95       	dec	r18
 398:	e2 f7       	brpl	.-8      	; 0x392 <DIO_u8GetPin+0x26>
 39a:	81 70       	andi	r24, 0x01	; 1
 39c:	89 83       	std	Y+1, r24	; 0x01
 39e:	4a c0       	rjmp	.+148    	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
	}else if((PinNum>=8) && (PinNum<16)){
 3a0:	8a 81       	ldd	r24, Y+2	; 0x02
 3a2:	88 30       	cpi	r24, 0x08	; 8
 3a4:	b0 f0       	brcs	.+44     	; 0x3d2 <DIO_u8GetPin+0x66>
 3a6:	8a 81       	ldd	r24, Y+2	; 0x02
 3a8:	80 31       	cpi	r24, 0x10	; 16
 3aa:	98 f4       	brcc	.+38     	; 0x3d2 <DIO_u8GetPin+0x66>
	     ret= GETBIT(PINB,PinNum-8);
 3ac:	86 e3       	ldi	r24, 0x36	; 54
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	fc 01       	movw	r30, r24
 3b2:	80 81       	ld	r24, Z
 3b4:	88 2f       	mov	r24, r24
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	2a 81       	ldd	r18, Y+2	; 0x02
 3ba:	22 2f       	mov	r18, r18
 3bc:	30 e0       	ldi	r19, 0x00	; 0
 3be:	28 50       	subi	r18, 0x08	; 8
 3c0:	31 09       	sbc	r19, r1
 3c2:	02 c0       	rjmp	.+4      	; 0x3c8 <DIO_u8GetPin+0x5c>
 3c4:	95 95       	asr	r25
 3c6:	87 95       	ror	r24
 3c8:	2a 95       	dec	r18
 3ca:	e2 f7       	brpl	.-8      	; 0x3c4 <DIO_u8GetPin+0x58>
 3cc:	81 70       	andi	r24, 0x01	; 1
 3ce:	89 83       	std	Y+1, r24	; 0x01
 3d0:	31 c0       	rjmp	.+98     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
	}else if((PinNum>=16) && (PinNum<24)){
 3d2:	8a 81       	ldd	r24, Y+2	; 0x02
 3d4:	80 31       	cpi	r24, 0x10	; 16
 3d6:	b0 f0       	brcs	.+44     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3d8:	8a 81       	ldd	r24, Y+2	; 0x02
 3da:	88 31       	cpi	r24, 0x18	; 24
 3dc:	98 f4       	brcc	.+38     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
	     ret= GETBIT(PINC,PinNum-16);
 3de:	83 e3       	ldi	r24, 0x33	; 51
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	fc 01       	movw	r30, r24
 3e4:	80 81       	ld	r24, Z
 3e6:	88 2f       	mov	r24, r24
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	2a 81       	ldd	r18, Y+2	; 0x02
 3ec:	22 2f       	mov	r18, r18
 3ee:	30 e0       	ldi	r19, 0x00	; 0
 3f0:	20 51       	subi	r18, 0x10	; 16
 3f2:	31 09       	sbc	r19, r1
 3f4:	02 c0       	rjmp	.+4      	; 0x3fa <DIO_u8GetPin+0x8e>
 3f6:	95 95       	asr	r25
 3f8:	87 95       	ror	r24
 3fa:	2a 95       	dec	r18
 3fc:	e2 f7       	brpl	.-8      	; 0x3f6 <DIO_u8GetPin+0x8a>
 3fe:	81 70       	andi	r24, 0x01	; 1
 400:	89 83       	std	Y+1, r24	; 0x01
 402:	18 c0       	rjmp	.+48     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
	}else if((PinNum>=24) && (PinNum<32)){
 404:	8a 81       	ldd	r24, Y+2	; 0x02
 406:	88 31       	cpi	r24, 0x18	; 24
 408:	a8 f0       	brcs	.+42     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 40a:	8a 81       	ldd	r24, Y+2	; 0x02
 40c:	80 32       	cpi	r24, 0x20	; 32
 40e:	90 f4       	brcc	.+36     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
	     ret= GETBIT(PIND,PinNum-16);
 410:	80 e3       	ldi	r24, 0x30	; 48
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	fc 01       	movw	r30, r24
 416:	80 81       	ld	r24, Z
 418:	88 2f       	mov	r24, r24
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	2a 81       	ldd	r18, Y+2	; 0x02
 41e:	22 2f       	mov	r18, r18
 420:	30 e0       	ldi	r19, 0x00	; 0
 422:	20 51       	subi	r18, 0x10	; 16
 424:	31 09       	sbc	r19, r1
 426:	02 c0       	rjmp	.+4      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 428:	95 95       	asr	r25
 42a:	87 95       	ror	r24
 42c:	2a 95       	dec	r18
 42e:	e2 f7       	brpl	.-8      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 430:	81 70       	andi	r24, 0x01	; 1
 432:	89 83       	std	Y+1, r24	; 0x01
	}

	return ret;
 434:	89 81       	ldd	r24, Y+1	; 0x01

}
 436:	0f 90       	pop	r0
 438:	0f 90       	pop	r0
 43a:	df 91       	pop	r29
 43c:	cf 91       	pop	r28
 43e:	08 95       	ret

00000440 <DIO_voidTogglePin>:

void DIO_voidTogglePin(u8 PinNum){
 440:	cf 93       	push	r28
 442:	df 93       	push	r29
 444:	1f 92       	push	r1
 446:	cd b7       	in	r28, 0x3d	; 61
 448:	de b7       	in	r29, 0x3e	; 62
 44a:	89 83       	std	Y+1, r24	; 0x01

	if((PinNum>=0 && PinNum<8)){
 44c:	89 81       	ldd	r24, Y+1	; 0x01
 44e:	88 30       	cpi	r24, 0x08	; 8
 450:	a8 f4       	brcc	.+42     	; 0x47c <DIO_voidTogglePin+0x3c>
		    TOGGLEBIT(PORTA,PinNum);
 452:	8b e3       	ldi	r24, 0x3B	; 59
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	2b e3       	ldi	r18, 0x3B	; 59
 458:	30 e0       	ldi	r19, 0x00	; 0
 45a:	f9 01       	movw	r30, r18
 45c:	20 81       	ld	r18, Z
 45e:	62 2f       	mov	r22, r18
 460:	29 81       	ldd	r18, Y+1	; 0x01
 462:	42 2f       	mov	r20, r18
 464:	50 e0       	ldi	r21, 0x00	; 0
 466:	21 e0       	ldi	r18, 0x01	; 1
 468:	30 e0       	ldi	r19, 0x00	; 0
 46a:	02 c0       	rjmp	.+4      	; 0x470 <DIO_voidTogglePin+0x30>
 46c:	22 0f       	add	r18, r18
 46e:	33 1f       	adc	r19, r19
 470:	4a 95       	dec	r20
 472:	e2 f7       	brpl	.-8      	; 0x46c <DIO_voidTogglePin+0x2c>
 474:	26 27       	eor	r18, r22
 476:	fc 01       	movw	r30, r24
 478:	20 83       	st	Z, r18
		}else if((PinNum>=24) && (PinNum<32)){
		    TOGGLEBIT(PORTD,PinNum-16);
		}


}
 47a:	5a c0       	rjmp	.+180    	; 0x530 <DIO_voidTogglePin+0xf0>

void DIO_voidTogglePin(u8 PinNum){

	if((PinNum>=0 && PinNum<8)){
		    TOGGLEBIT(PORTA,PinNum);
		}else if((PinNum>=8) && (PinNum<16)){
 47c:	89 81       	ldd	r24, Y+1	; 0x01
 47e:	88 30       	cpi	r24, 0x08	; 8
 480:	d8 f0       	brcs	.+54     	; 0x4b8 <DIO_voidTogglePin+0x78>
 482:	89 81       	ldd	r24, Y+1	; 0x01
 484:	80 31       	cpi	r24, 0x10	; 16
 486:	c0 f4       	brcc	.+48     	; 0x4b8 <DIO_voidTogglePin+0x78>
		    TOGGLEBIT(PORTB,PinNum-8);
 488:	88 e3       	ldi	r24, 0x38	; 56
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	28 e3       	ldi	r18, 0x38	; 56
 48e:	30 e0       	ldi	r19, 0x00	; 0
 490:	f9 01       	movw	r30, r18
 492:	20 81       	ld	r18, Z
 494:	62 2f       	mov	r22, r18
 496:	29 81       	ldd	r18, Y+1	; 0x01
 498:	22 2f       	mov	r18, r18
 49a:	30 e0       	ldi	r19, 0x00	; 0
 49c:	a9 01       	movw	r20, r18
 49e:	48 50       	subi	r20, 0x08	; 8
 4a0:	51 09       	sbc	r21, r1
 4a2:	21 e0       	ldi	r18, 0x01	; 1
 4a4:	30 e0       	ldi	r19, 0x00	; 0
 4a6:	02 c0       	rjmp	.+4      	; 0x4ac <DIO_voidTogglePin+0x6c>
 4a8:	22 0f       	add	r18, r18
 4aa:	33 1f       	adc	r19, r19
 4ac:	4a 95       	dec	r20
 4ae:	e2 f7       	brpl	.-8      	; 0x4a8 <DIO_voidTogglePin+0x68>
 4b0:	26 27       	eor	r18, r22
 4b2:	fc 01       	movw	r30, r24
 4b4:	20 83       	st	Z, r18
 4b6:	3c c0       	rjmp	.+120    	; 0x530 <DIO_voidTogglePin+0xf0>
		}else if((PinNum>=16) && (PinNum<24)){
 4b8:	89 81       	ldd	r24, Y+1	; 0x01
 4ba:	80 31       	cpi	r24, 0x10	; 16
 4bc:	d8 f0       	brcs	.+54     	; 0x4f4 <DIO_voidTogglePin+0xb4>
 4be:	89 81       	ldd	r24, Y+1	; 0x01
 4c0:	88 31       	cpi	r24, 0x18	; 24
 4c2:	c0 f4       	brcc	.+48     	; 0x4f4 <DIO_voidTogglePin+0xb4>
		    TOGGLEBIT(PORTC,PinNum-16);
 4c4:	85 e3       	ldi	r24, 0x35	; 53
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	25 e3       	ldi	r18, 0x35	; 53
 4ca:	30 e0       	ldi	r19, 0x00	; 0
 4cc:	f9 01       	movw	r30, r18
 4ce:	20 81       	ld	r18, Z
 4d0:	62 2f       	mov	r22, r18
 4d2:	29 81       	ldd	r18, Y+1	; 0x01
 4d4:	22 2f       	mov	r18, r18
 4d6:	30 e0       	ldi	r19, 0x00	; 0
 4d8:	a9 01       	movw	r20, r18
 4da:	40 51       	subi	r20, 0x10	; 16
 4dc:	51 09       	sbc	r21, r1
 4de:	21 e0       	ldi	r18, 0x01	; 1
 4e0:	30 e0       	ldi	r19, 0x00	; 0
 4e2:	02 c0       	rjmp	.+4      	; 0x4e8 <DIO_voidTogglePin+0xa8>
 4e4:	22 0f       	add	r18, r18
 4e6:	33 1f       	adc	r19, r19
 4e8:	4a 95       	dec	r20
 4ea:	e2 f7       	brpl	.-8      	; 0x4e4 <DIO_voidTogglePin+0xa4>
 4ec:	26 27       	eor	r18, r22
 4ee:	fc 01       	movw	r30, r24
 4f0:	20 83       	st	Z, r18
 4f2:	1e c0       	rjmp	.+60     	; 0x530 <DIO_voidTogglePin+0xf0>
		}else if((PinNum>=24) && (PinNum<32)){
 4f4:	89 81       	ldd	r24, Y+1	; 0x01
 4f6:	88 31       	cpi	r24, 0x18	; 24
 4f8:	d8 f0       	brcs	.+54     	; 0x530 <DIO_voidTogglePin+0xf0>
 4fa:	89 81       	ldd	r24, Y+1	; 0x01
 4fc:	80 32       	cpi	r24, 0x20	; 32
 4fe:	c0 f4       	brcc	.+48     	; 0x530 <DIO_voidTogglePin+0xf0>
		    TOGGLEBIT(PORTD,PinNum-16);
 500:	82 e3       	ldi	r24, 0x32	; 50
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	22 e3       	ldi	r18, 0x32	; 50
 506:	30 e0       	ldi	r19, 0x00	; 0
 508:	f9 01       	movw	r30, r18
 50a:	20 81       	ld	r18, Z
 50c:	62 2f       	mov	r22, r18
 50e:	29 81       	ldd	r18, Y+1	; 0x01
 510:	22 2f       	mov	r18, r18
 512:	30 e0       	ldi	r19, 0x00	; 0
 514:	a9 01       	movw	r20, r18
 516:	40 51       	subi	r20, 0x10	; 16
 518:	51 09       	sbc	r21, r1
 51a:	21 e0       	ldi	r18, 0x01	; 1
 51c:	30 e0       	ldi	r19, 0x00	; 0
 51e:	02 c0       	rjmp	.+4      	; 0x524 <DIO_voidTogglePin+0xe4>
 520:	22 0f       	add	r18, r18
 522:	33 1f       	adc	r19, r19
 524:	4a 95       	dec	r20
 526:	e2 f7       	brpl	.-8      	; 0x520 <DIO_voidTogglePin+0xe0>
 528:	26 27       	eor	r18, r22
 52a:	fc 01       	movw	r30, r24
 52c:	20 83       	st	Z, r18
		}


}
 52e:	00 c0       	rjmp	.+0      	; 0x530 <DIO_voidTogglePin+0xf0>
 530:	00 00       	nop
 532:	0f 90       	pop	r0
 534:	df 91       	pop	r29
 536:	cf 91       	pop	r28
 538:	08 95       	ret

0000053a <EXTI_voidInitialize>:

/********************************************/
/* Description : Initialize EXTI mode   	*/
/********************************************/
void EXTI_voidInitialize(void)
{
 53a:	cf 93       	push	r28
 53c:	df 93       	push	r29
 53e:	cd b7       	in	r28, 0x3d	; 61
 540:	de b7       	in	r29, 0x3e	; 62
/* Set EXTI mode as configured            	*/
	MCUCR = (MCUCR & EXTI_u8_INT0_MODE_CLEAR ) | EXTI_u8_INT0_MODE;
 542:	85 e5       	ldi	r24, 0x55	; 85
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	25 e5       	ldi	r18, 0x55	; 85
 548:	30 e0       	ldi	r19, 0x00	; 0
 54a:	f9 01       	movw	r30, r18
 54c:	20 81       	ld	r18, Z
 54e:	2c 7f       	andi	r18, 0xFC	; 252
 550:	21 60       	ori	r18, 0x01	; 1
 552:	fc 01       	movw	r30, r24
 554:	20 83       	st	Z, r18
	
/* Initialize the state                 	*/	
#if EXTI_u8_INT0_INIT_STATE == EXTI_u8_ENABLE_STATE	
     SETBIT(GICR,EXTI_u8_INT0_PIE);
#else
     CLRBIT(GICR,EXTI_u8_INT0_PIE);
 556:	8b e5       	ldi	r24, 0x5B	; 91
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	2b e5       	ldi	r18, 0x5B	; 91
 55c:	30 e0       	ldi	r19, 0x00	; 0
 55e:	f9 01       	movw	r30, r18
 560:	20 81       	ld	r18, Z
 562:	2f 7b       	andi	r18, 0xBF	; 191
 564:	fc 01       	movw	r30, r24
 566:	20 83       	st	Z, r18
#endif

/* Clear flag                           	*/	 
     SETBIT(GIFR,EXTI_u8_INT0_PIF);
 568:	8a e5       	ldi	r24, 0x5A	; 90
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	2a e5       	ldi	r18, 0x5A	; 90
 56e:	30 e0       	ldi	r19, 0x00	; 0
 570:	f9 01       	movw	r30, r18
 572:	20 81       	ld	r18, Z
 574:	20 64       	ori	r18, 0x40	; 64
 576:	fc 01       	movw	r30, r24
 578:	20 83       	st	Z, r18
}
 57a:	00 00       	nop
 57c:	df 91       	pop	r29
 57e:	cf 91       	pop	r28
 580:	08 95       	ret

00000582 <EXTI_voidEnableInt0>:

/********************************************/
/* Description : enable EXTI 0 ISR   	    */
/********************************************/
void EXTI_voidEnableInt0(void)
{
 582:	cf 93       	push	r28
 584:	df 93       	push	r29
 586:	cd b7       	in	r28, 0x3d	; 61
 588:	de b7       	in	r29, 0x3e	; 62
     SETBIT(GICR,EXTI_u8_INT0_PIE);	
 58a:	8b e5       	ldi	r24, 0x5B	; 91
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	2b e5       	ldi	r18, 0x5B	; 91
 590:	30 e0       	ldi	r19, 0x00	; 0
 592:	f9 01       	movw	r30, r18
 594:	20 81       	ld	r18, Z
 596:	20 64       	ori	r18, 0x40	; 64
 598:	fc 01       	movw	r30, r24
 59a:	20 83       	st	Z, r18
}
 59c:	00 00       	nop
 59e:	df 91       	pop	r29
 5a0:	cf 91       	pop	r28
 5a2:	08 95       	ret

000005a4 <EXTI_voidDisableInt0>:

/********************************************/
/* Description : disable EXTI 0 ISR   	    */
/********************************************/
void EXTI_voidDisableInt0(void)
{
 5a4:	cf 93       	push	r28
 5a6:	df 93       	push	r29
 5a8:	cd b7       	in	r28, 0x3d	; 61
 5aa:	de b7       	in	r29, 0x3e	; 62
     CLRBIT(GICR,EXTI_u8_INT0_PIE);	
 5ac:	8b e5       	ldi	r24, 0x5B	; 91
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	2b e5       	ldi	r18, 0x5B	; 91
 5b2:	30 e0       	ldi	r19, 0x00	; 0
 5b4:	f9 01       	movw	r30, r18
 5b6:	20 81       	ld	r18, Z
 5b8:	2f 7b       	andi	r18, 0xBF	; 191
 5ba:	fc 01       	movw	r30, r24
 5bc:	20 83       	st	Z, r18
}
 5be:	00 00       	nop
 5c0:	df 91       	pop	r29
 5c2:	cf 91       	pop	r28
 5c4:	08 95       	ret

000005c6 <EXTI_voidSetInt0Callback>:

/********************************************/
/* Description : set call back function     */
/********************************************/
void EXTI_voidSetInt0Callback(void (*copy_Callback) (void))
{
 5c6:	cf 93       	push	r28
 5c8:	df 93       	push	r29
 5ca:	00 d0       	rcall	.+0      	; 0x5cc <EXTI_voidSetInt0Callback+0x6>
 5cc:	cd b7       	in	r28, 0x3d	; 61
 5ce:	de b7       	in	r29, 0x3e	; 62
 5d0:	9a 83       	std	Y+2, r25	; 0x02
 5d2:	89 83       	std	Y+1, r24	; 0x01
	EXTI_u8Int0Callback	= copy_Callback;
 5d4:	89 81       	ldd	r24, Y+1	; 0x01
 5d6:	9a 81       	ldd	r25, Y+2	; 0x02
 5d8:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
 5dc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
}
 5e0:	00 00       	nop
 5e2:	0f 90       	pop	r0
 5e4:	0f 90       	pop	r0
 5e6:	df 91       	pop	r29
 5e8:	cf 91       	pop	r28
 5ea:	08 95       	ret

000005ec <__vector_1>:

void __vector_1(void) __attribute__((signal,used));
void __vector_1(void)
{
 5ec:	1f 92       	push	r1
 5ee:	0f 92       	push	r0
 5f0:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 5f4:	0f 92       	push	r0
 5f6:	11 24       	eor	r1, r1
 5f8:	2f 93       	push	r18
 5fa:	3f 93       	push	r19
 5fc:	4f 93       	push	r20
 5fe:	5f 93       	push	r21
 600:	6f 93       	push	r22
 602:	7f 93       	push	r23
 604:	8f 93       	push	r24
 606:	9f 93       	push	r25
 608:	af 93       	push	r26
 60a:	bf 93       	push	r27
 60c:	ef 93       	push	r30
 60e:	ff 93       	push	r31
 610:	cf 93       	push	r28
 612:	df 93       	push	r29
 614:	cd b7       	in	r28, 0x3d	; 61
 616:	de b7       	in	r29, 0x3e	; 62
	EXTI_u8Int0Callback();
 618:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 61c:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
 620:	fc 01       	movw	r30, r24
 622:	09 95       	icall
}
 624:	00 00       	nop
 626:	df 91       	pop	r29
 628:	cf 91       	pop	r28
 62a:	ff 91       	pop	r31
 62c:	ef 91       	pop	r30
 62e:	bf 91       	pop	r27
 630:	af 91       	pop	r26
 632:	9f 91       	pop	r25
 634:	8f 91       	pop	r24
 636:	7f 91       	pop	r23
 638:	6f 91       	pop	r22
 63a:	5f 91       	pop	r21
 63c:	4f 91       	pop	r20
 63e:	3f 91       	pop	r19
 640:	2f 91       	pop	r18
 642:	0f 90       	pop	r0
 644:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 648:	0f 90       	pop	r0
 64a:	1f 90       	pop	r1
 64c:	18 95       	reti

0000064e <GIE_voidEnable>:
#include "GIE_int.h"
/*********************************************/
/* Description : Enable global interrupt   	*/
/********************************************/
void GIE_voidEnable(void)
{
 64e:	cf 93       	push	r28
 650:	df 93       	push	r29
 652:	cd b7       	in	r28, 0x3d	; 61
 654:	de b7       	in	r29, 0x3e	; 62
	SETBIT(SREG,GIE_u8_BIT_INDEX);
 656:	8f e5       	ldi	r24, 0x5F	; 95
 658:	90 e0       	ldi	r25, 0x00	; 0
 65a:	2f e5       	ldi	r18, 0x5F	; 95
 65c:	30 e0       	ldi	r19, 0x00	; 0
 65e:	f9 01       	movw	r30, r18
 660:	20 81       	ld	r18, Z
 662:	20 68       	ori	r18, 0x80	; 128
 664:	fc 01       	movw	r30, r24
 666:	20 83       	st	Z, r18
}
 668:	00 00       	nop
 66a:	df 91       	pop	r29
 66c:	cf 91       	pop	r28
 66e:	08 95       	ret

00000670 <GIE_voidDisable>:

/********************************************/
/* Description : Disable global interrupt   */
/********************************************/
void GIE_voidDisable(void)
{
 670:	cf 93       	push	r28
 672:	df 93       	push	r29
 674:	cd b7       	in	r28, 0x3d	; 61
 676:	de b7       	in	r29, 0x3e	; 62
	CLRBIT(SREG,GIE_u8_BIT_INDEX);	
 678:	8f e5       	ldi	r24, 0x5F	; 95
 67a:	90 e0       	ldi	r25, 0x00	; 0
 67c:	2f e5       	ldi	r18, 0x5F	; 95
 67e:	30 e0       	ldi	r19, 0x00	; 0
 680:	f9 01       	movw	r30, r18
 682:	20 81       	ld	r18, Z
 684:	2f 77       	andi	r18, 0x7F	; 127
 686:	fc 01       	movw	r30, r24
 688:	20 83       	st	Z, r18
 68a:	00 00       	nop
 68c:	df 91       	pop	r29
 68e:	cf 91       	pop	r28
 690:	08 95       	ret

00000692 <LED_voidInitialize>:
#include "DIO_int.h"
#include "LED_priv.h"
#include "LED_config.h"
#include "LED_int.h"

void LED_voidInitialize(void){}
 692:	cf 93       	push	r28
 694:	df 93       	push	r29
 696:	cd b7       	in	r28, 0x3d	; 61
 698:	de b7       	in	r29, 0x3e	; 62
 69a:	00 00       	nop
 69c:	df 91       	pop	r29
 69e:	cf 91       	pop	r28
 6a0:	08 95       	ret

000006a2 <LED_voidON>:

void LED_voidON(u8 LedNum){
 6a2:	cf 93       	push	r28
 6a4:	df 93       	push	r29
 6a6:	1f 92       	push	r1
 6a8:	cd b7       	in	r28, 0x3d	; 61
 6aa:	de b7       	in	r29, 0x3e	; 62
 6ac:	89 83       	std	Y+1, r24	; 0x01

	switch(LedNum){
 6ae:	89 81       	ldd	r24, Y+1	; 0x01
 6b0:	88 2f       	mov	r24, r24
 6b2:	90 e0       	ldi	r25, 0x00	; 0
 6b4:	09 2e       	mov	r0, r25
 6b6:	00 0c       	add	r0, r0
 6b8:	aa 0b       	sbc	r26, r26
 6ba:	bb 0b       	sbc	r27, r27
 6bc:	40 e0       	ldi	r20, 0x00	; 0
 6be:	50 e0       	ldi	r21, 0x00	; 0
 6c0:	2f e1       	ldi	r18, 0x1F	; 31
 6c2:	30 e0       	ldi	r19, 0x00	; 0
 6c4:	84 1b       	sub	r24, r20
 6c6:	95 0b       	sbc	r25, r21
 6c8:	28 17       	cp	r18, r24
 6ca:	39 07       	cpc	r19, r25
 6cc:	08 f4       	brcc	.+2      	; 0x6d0 <LED_voidON+0x2e>
 6ce:	a5 c0       	rjmp	.+330    	; 0x81a <LED_voidON+0x178>
 6d0:	86 5d       	subi	r24, 0xD6	; 214
 6d2:	9f 4f       	sbci	r25, 0xFF	; 255
 6d4:	fc 01       	movw	r30, r24
 6d6:	0c 94 92 05 	jmp	0xb24	; 0xb24 <__tablejump2__>
	case (LED_0):
	    if(LED_0_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_0,HIGH);
 6da:	61 e0       	ldi	r22, 0x01	; 1
 6dc:	80 e0       	ldi	r24, 0x00	; 0
 6de:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_voidSetPin>
	    }else if(LED_0_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_0,LOW);
	    }
	break;
 6e2:	9b c0       	rjmp	.+310    	; 0x81a <LED_voidON+0x178>
	case (LED_1):
	    if(LED_1_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_1,HIGH);
 6e4:	61 e0       	ldi	r22, 0x01	; 1
 6e6:	81 e0       	ldi	r24, 0x01	; 1
 6e8:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_voidSetPin>
	    }else if(LED_1_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_1,LOW);
	    }
	break;
 6ec:	96 c0       	rjmp	.+300    	; 0x81a <LED_voidON+0x178>
	case (LED_2):
	    if(LED_2_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_2,HIGH);
 6ee:	61 e0       	ldi	r22, 0x01	; 1
 6f0:	82 e0       	ldi	r24, 0x02	; 2
 6f2:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_voidSetPin>
	    }else if(LED_2_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_2,LOW);
	    }
	break;
 6f6:	91 c0       	rjmp	.+290    	; 0x81a <LED_voidON+0x178>
	case (LED_3):
	    if(LED_3_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_3,HIGH);
 6f8:	61 e0       	ldi	r22, 0x01	; 1
 6fa:	83 e0       	ldi	r24, 0x03	; 3
 6fc:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_voidSetPin>
	    }else if(LED_3_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_3,LOW);
	    }
	break;
 700:	8c c0       	rjmp	.+280    	; 0x81a <LED_voidON+0x178>
	case (LED_4):
	    if(LED_4_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_4,HIGH);
 702:	61 e0       	ldi	r22, 0x01	; 1
 704:	84 e0       	ldi	r24, 0x04	; 4
 706:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_voidSetPin>
	    }else if(LED_4_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_4,LOW);
	    }
	break;
 70a:	87 c0       	rjmp	.+270    	; 0x81a <LED_voidON+0x178>
	case (LED_5):
	    if(LED_5_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_5,HIGH);
 70c:	61 e0       	ldi	r22, 0x01	; 1
 70e:	85 e0       	ldi	r24, 0x05	; 5
 710:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_voidSetPin>
	    }else if(LED_5_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_5,LOW);
	    }
	break;
 714:	82 c0       	rjmp	.+260    	; 0x81a <LED_voidON+0x178>
	case (LED_6):
	    if(LED_6_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_6,HIGH);
 716:	61 e0       	ldi	r22, 0x01	; 1
 718:	86 e0       	ldi	r24, 0x06	; 6
 71a:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_voidSetPin>
	    }else if(LED_6_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_6,LOW);
	    }
	break;
 71e:	7d c0       	rjmp	.+250    	; 0x81a <LED_voidON+0x178>
	case (LED_7):
	    if(LED_7_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_7,HIGH);
 720:	61 e0       	ldi	r22, 0x01	; 1
 722:	87 e0       	ldi	r24, 0x07	; 7
 724:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_voidSetPin>
	    }else if(LED_7_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_7,LOW);
	    }
	break;
 728:	78 c0       	rjmp	.+240    	; 0x81a <LED_voidON+0x178>
	case (LED_8):
	    if(LED_8_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_8,HIGH);
 72a:	61 e0       	ldi	r22, 0x01	; 1
 72c:	88 e0       	ldi	r24, 0x08	; 8
 72e:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_voidSetPin>
	    }else if(LED_8_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_8,LOW);
	    }
	break;
 732:	73 c0       	rjmp	.+230    	; 0x81a <LED_voidON+0x178>
	case (LED_9):
	    if(LED_9_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_9,HIGH);
 734:	61 e0       	ldi	r22, 0x01	; 1
 736:	89 e0       	ldi	r24, 0x09	; 9
 738:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_voidSetPin>
	    }else if(LED_9_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_9,LOW);
	    }
	break;
 73c:	6e c0       	rjmp	.+220    	; 0x81a <LED_voidON+0x178>
	case (LED_10):
	    if(LED_10_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_10,HIGH);
 73e:	61 e0       	ldi	r22, 0x01	; 1
 740:	8a e0       	ldi	r24, 0x0A	; 10
 742:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_voidSetPin>
	    }else if(LED_10_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_10,LOW);
	    }
	break;
 746:	69 c0       	rjmp	.+210    	; 0x81a <LED_voidON+0x178>
	case (LED_11):
	    if(LED_11_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_11,HIGH);
 748:	61 e0       	ldi	r22, 0x01	; 1
 74a:	8b e0       	ldi	r24, 0x0B	; 11
 74c:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_voidSetPin>
	    }else if(LED_11_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_11,LOW);
	    }
	break;
 750:	64 c0       	rjmp	.+200    	; 0x81a <LED_voidON+0x178>
	case (LED_12):
	    if(LED_12_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_12,HIGH);
 752:	61 e0       	ldi	r22, 0x01	; 1
 754:	8c e0       	ldi	r24, 0x0C	; 12
 756:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_voidSetPin>
	    }else if(LED_12_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_12,LOW);
	    }
	break;
 75a:	5f c0       	rjmp	.+190    	; 0x81a <LED_voidON+0x178>
	case (LED_13):
	    if(LED_13_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_13,HIGH);
 75c:	61 e0       	ldi	r22, 0x01	; 1
 75e:	8d e0       	ldi	r24, 0x0D	; 13
 760:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_voidSetPin>
	    }else if(LED_13_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_13,LOW);
	    }
	break;
 764:	5a c0       	rjmp	.+180    	; 0x81a <LED_voidON+0x178>
	case (LED_14):
	    if(LED_14_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_14,HIGH);
 766:	61 e0       	ldi	r22, 0x01	; 1
 768:	8e e0       	ldi	r24, 0x0E	; 14
 76a:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_voidSetPin>
	    }else if(LED_14_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_14,LOW);
	    }
	break;
 76e:	55 c0       	rjmp	.+170    	; 0x81a <LED_voidON+0x178>
	case (LED_15):
	    if(LED_15_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_15,HIGH);
 770:	61 e0       	ldi	r22, 0x01	; 1
 772:	8f e0       	ldi	r24, 0x0F	; 15
 774:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_voidSetPin>
	    }else if(LED_15_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_15,LOW);
	    }
	break;
 778:	50 c0       	rjmp	.+160    	; 0x81a <LED_voidON+0x178>
	case (LED_16):
	    if(LED_16_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_16,HIGH);
 77a:	61 e0       	ldi	r22, 0x01	; 1
 77c:	80 e1       	ldi	r24, 0x10	; 16
 77e:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_voidSetPin>
	    }else if(LED_16_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_16,LOW);
	    }
	break;
 782:	4b c0       	rjmp	.+150    	; 0x81a <LED_voidON+0x178>
	case (LED_17):
	    if(LED_17_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_17,HIGH);
 784:	61 e0       	ldi	r22, 0x01	; 1
 786:	81 e1       	ldi	r24, 0x11	; 17
 788:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_voidSetPin>
	    }else if(LED_17_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_17,LOW);
	    }
	break;
 78c:	46 c0       	rjmp	.+140    	; 0x81a <LED_voidON+0x178>
	case (LED_18):
	    if(LED_18_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_18,HIGH);
 78e:	61 e0       	ldi	r22, 0x01	; 1
 790:	82 e1       	ldi	r24, 0x12	; 18
 792:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_voidSetPin>
	    }else if(LED_18_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_18,LOW);
	    }
	break;
 796:	41 c0       	rjmp	.+130    	; 0x81a <LED_voidON+0x178>
	case (LED_19):
	    if(LED_19_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_19,HIGH);
 798:	61 e0       	ldi	r22, 0x01	; 1
 79a:	83 e1       	ldi	r24, 0x13	; 19
 79c:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_voidSetPin>
	    }else if(LED_19_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_19,LOW);
	    }
	break;
 7a0:	3c c0       	rjmp	.+120    	; 0x81a <LED_voidON+0x178>
	case (LED_20):
	    if(LED_20_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_20,HIGH);
 7a2:	61 e0       	ldi	r22, 0x01	; 1
 7a4:	84 e1       	ldi	r24, 0x14	; 20
 7a6:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_voidSetPin>
	    }else if(LED_20_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_20,LOW);
	    }
	break;
 7aa:	37 c0       	rjmp	.+110    	; 0x81a <LED_voidON+0x178>
	case (LED_21):
	    if(LED_21_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_21,HIGH);
 7ac:	61 e0       	ldi	r22, 0x01	; 1
 7ae:	85 e1       	ldi	r24, 0x15	; 21
 7b0:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_voidSetPin>
	    }else if(LED_21_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_21,LOW);
	    }
	break;
 7b4:	32 c0       	rjmp	.+100    	; 0x81a <LED_voidON+0x178>
	case (LED_22):
	    if(LED_22_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_22,HIGH);
 7b6:	61 e0       	ldi	r22, 0x01	; 1
 7b8:	86 e1       	ldi	r24, 0x16	; 22
 7ba:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_voidSetPin>
	    }else if(LED_22_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_22,LOW);
	    }
	break;
 7be:	2d c0       	rjmp	.+90     	; 0x81a <LED_voidON+0x178>
	case (LED_23):
	    if(LED_23_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_23,HIGH);
 7c0:	61 e0       	ldi	r22, 0x01	; 1
 7c2:	87 e1       	ldi	r24, 0x17	; 23
 7c4:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_voidSetPin>
	    }else if(LED_23_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_23,LOW);
	    }
	break;
 7c8:	28 c0       	rjmp	.+80     	; 0x81a <LED_voidON+0x178>
	case (LED_24):
	    if(LED_24_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_24,HIGH);
 7ca:	61 e0       	ldi	r22, 0x01	; 1
 7cc:	88 e1       	ldi	r24, 0x18	; 24
 7ce:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_voidSetPin>
	    }else if(LED_24_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_24,LOW);
	    }
	break;
 7d2:	23 c0       	rjmp	.+70     	; 0x81a <LED_voidON+0x178>
	case (LED_25):
	    if(LED_25_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_25,HIGH);
 7d4:	61 e0       	ldi	r22, 0x01	; 1
 7d6:	89 e1       	ldi	r24, 0x19	; 25
 7d8:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_voidSetPin>
	    }else if(LED_25_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_25,LOW);
	    }
	break;
 7dc:	1e c0       	rjmp	.+60     	; 0x81a <LED_voidON+0x178>
	case (LED_26):
	    if(LED_26_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_26,HIGH);
 7de:	61 e0       	ldi	r22, 0x01	; 1
 7e0:	8a e1       	ldi	r24, 0x1A	; 26
 7e2:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_voidSetPin>
	    }else if(LED_26_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_26,LOW);
	    }
	break;
 7e6:	19 c0       	rjmp	.+50     	; 0x81a <LED_voidON+0x178>
	case (LED_27):
	    if(LED_27_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_27,HIGH);
 7e8:	61 e0       	ldi	r22, 0x01	; 1
 7ea:	8b e1       	ldi	r24, 0x1B	; 27
 7ec:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_voidSetPin>
	    }else if(LED_27_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_27,LOW);
	    }
	break;
 7f0:	14 c0       	rjmp	.+40     	; 0x81a <LED_voidON+0x178>
	case (LED_28):
	    if(LED_28_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_28,HIGH);
 7f2:	61 e0       	ldi	r22, 0x01	; 1
 7f4:	8c e1       	ldi	r24, 0x1C	; 28
 7f6:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_voidSetPin>
	    }else if(LED_28_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_28,LOW);
	    }
	break;
 7fa:	0f c0       	rjmp	.+30     	; 0x81a <LED_voidON+0x178>
	case (LED_29):
	    if(LED_29_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_29,HIGH);
 7fc:	61 e0       	ldi	r22, 0x01	; 1
 7fe:	8d e1       	ldi	r24, 0x1D	; 29
 800:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_voidSetPin>
	    }else if(LED_29_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_29,LOW);
	    }
	break;
 804:	0a c0       	rjmp	.+20     	; 0x81a <LED_voidON+0x178>
	case (LED_30):
	    if(LED_30_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_30,HIGH);
 806:	61 e0       	ldi	r22, 0x01	; 1
 808:	8e e1       	ldi	r24, 0x1E	; 30
 80a:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_voidSetPin>
	    }else if(LED_30_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_30,LOW);
	    }
	break;
 80e:	05 c0       	rjmp	.+10     	; 0x81a <LED_voidON+0x178>
	case (LED_31):
	    if(LED_31_mode==FORWARD){
	        DIO_voidSetPin(LEDPIN_31,HIGH);
 810:	61 e0       	ldi	r22, 0x01	; 1
 812:	8f e1       	ldi	r24, 0x1F	; 31
 814:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_voidSetPin>
	    }else if(LED_31_mode==REVERSE){
	        DIO_voidSetPin(LEDPIN_31,LOW);
	    }
	break;
 818:	00 00       	nop


	}

}
 81a:	00 00       	nop
 81c:	0f 90       	pop	r0
 81e:	df 91       	pop	r29
 820:	cf 91       	pop	r28
 822:	08 95       	ret

00000824 <LED_voidOff>:

void LED_voidOff(u8 LedNum){
 824:	cf 93       	push	r28
 826:	df 93       	push	r29
 828:	1f 92       	push	r1
 82a:	cd b7       	in	r28, 0x3d	; 61
 82c:	de b7       	in	r29, 0x3e	; 62
 82e:	89 83       	std	Y+1, r24	; 0x01

	switch(LedNum){
 830:	89 81       	ldd	r24, Y+1	; 0x01
 832:	88 2f       	mov	r24, r24
 834:	90 e0       	ldi	r25, 0x00	; 0
 836:	09 2e       	mov	r0, r25
 838:	00 0c       	add	r0, r0
 83a:	aa 0b       	sbc	r26, r26
 83c:	bb 0b       	sbc	r27, r27
 83e:	40 e0       	ldi	r20, 0x00	; 0
 840:	50 e0       	ldi	r21, 0x00	; 0
 842:	2f e1       	ldi	r18, 0x1F	; 31
 844:	30 e0       	ldi	r19, 0x00	; 0
 846:	84 1b       	sub	r24, r20
 848:	95 0b       	sbc	r25, r21
 84a:	28 17       	cp	r18, r24
 84c:	39 07       	cpc	r19, r25
 84e:	08 f4       	brcc	.+2      	; 0x852 <LED_voidOff+0x2e>
 850:	a5 c0       	rjmp	.+330    	; 0x99c <__stack+0x13d>
 852:	86 5b       	subi	r24, 0xB6	; 182
 854:	9f 4f       	sbci	r25, 0xFF	; 255
 856:	fc 01       	movw	r30, r24
 858:	0c 94 92 05 	jmp	0xb24	; 0xb24 <__tablejump2__>

    case (LED_0):
        if(LED_0_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_0,LOW);
 85c:	60 e0       	ldi	r22, 0x00	; 0
 85e:	80 e0       	ldi	r24, 0x00	; 0
 860:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_voidSetPin>
        }else if(LED_0_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_0,HIGH);
        }
    break;
 864:	9b c0       	rjmp	.+310    	; 0x99c <__stack+0x13d>
    case (LED_1):
        if(LED_1_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_1,LOW);
 866:	60 e0       	ldi	r22, 0x00	; 0
 868:	81 e0       	ldi	r24, 0x01	; 1
 86a:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_voidSetPin>
        }else if(LED_1_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_1,HIGH);
        }
    break;
 86e:	96 c0       	rjmp	.+300    	; 0x99c <__stack+0x13d>
    case (LED_2):
        if(LED_2_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_2,LOW);
 870:	60 e0       	ldi	r22, 0x00	; 0
 872:	82 e0       	ldi	r24, 0x02	; 2
 874:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_voidSetPin>
        }else if(LED_2_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_2,HIGH);
        }
    break;
 878:	91 c0       	rjmp	.+290    	; 0x99c <__stack+0x13d>
    case (LED_3):
        if(LED_3_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_3,LOW);
 87a:	60 e0       	ldi	r22, 0x00	; 0
 87c:	83 e0       	ldi	r24, 0x03	; 3
 87e:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_voidSetPin>
        }else if(LED_3_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_3,HIGH);
        }
    break;
 882:	8c c0       	rjmp	.+280    	; 0x99c <__stack+0x13d>
    case (LED_4):
        if(LED_4_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_4,LOW);
 884:	60 e0       	ldi	r22, 0x00	; 0
 886:	84 e0       	ldi	r24, 0x04	; 4
 888:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_voidSetPin>
        }else if(LED_4_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_4,HIGH);
        }
    break;
 88c:	87 c0       	rjmp	.+270    	; 0x99c <__stack+0x13d>
    case (LED_5):
        if(LED_5_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_5,LOW);
 88e:	60 e0       	ldi	r22, 0x00	; 0
 890:	85 e0       	ldi	r24, 0x05	; 5
 892:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_voidSetPin>
        }else if(LED_5_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_5,HIGH);
        }
    break;
 896:	82 c0       	rjmp	.+260    	; 0x99c <__stack+0x13d>
    case (LED_6):
        if(LED_6_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_6,LOW);
 898:	60 e0       	ldi	r22, 0x00	; 0
 89a:	86 e0       	ldi	r24, 0x06	; 6
 89c:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_voidSetPin>
        }else if(LED_6_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_6,HIGH);
        }
    break;
 8a0:	7d c0       	rjmp	.+250    	; 0x99c <__stack+0x13d>
    case (LED_7):
        if(LED_7_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_7,LOW);
 8a2:	60 e0       	ldi	r22, 0x00	; 0
 8a4:	87 e0       	ldi	r24, 0x07	; 7
 8a6:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_voidSetPin>
        }else if(LED_7_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_7,HIGH);
        }
    break;
 8aa:	78 c0       	rjmp	.+240    	; 0x99c <__stack+0x13d>
    case (LED_8):
        if(LED_8_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_8,LOW);
 8ac:	60 e0       	ldi	r22, 0x00	; 0
 8ae:	88 e0       	ldi	r24, 0x08	; 8
 8b0:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_voidSetPin>
        }else if(LED_8_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_8,HIGH);
        }
    break;
 8b4:	73 c0       	rjmp	.+230    	; 0x99c <__stack+0x13d>
    case (LED_9):
        if(LED_9_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_9,LOW);
 8b6:	60 e0       	ldi	r22, 0x00	; 0
 8b8:	89 e0       	ldi	r24, 0x09	; 9
 8ba:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_voidSetPin>
        }else if(LED_9_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_9,HIGH);
        }
    break;
 8be:	6e c0       	rjmp	.+220    	; 0x99c <__stack+0x13d>
    case (LED_10):
        if(LED_10_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_10,LOW);
 8c0:	60 e0       	ldi	r22, 0x00	; 0
 8c2:	8a e0       	ldi	r24, 0x0A	; 10
 8c4:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_voidSetPin>
        }else if(LED_10_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_10,HIGH);
        }
    break;
 8c8:	69 c0       	rjmp	.+210    	; 0x99c <__stack+0x13d>
    case (LED_11):
        if(LED_11_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_11,LOW);
 8ca:	60 e0       	ldi	r22, 0x00	; 0
 8cc:	8b e0       	ldi	r24, 0x0B	; 11
 8ce:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_voidSetPin>
        }else if(LED_11_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_11,HIGH);
        }
    break;
 8d2:	64 c0       	rjmp	.+200    	; 0x99c <__stack+0x13d>
    case (LED_12):
        if(LED_12_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_12,LOW);
 8d4:	60 e0       	ldi	r22, 0x00	; 0
 8d6:	8c e0       	ldi	r24, 0x0C	; 12
 8d8:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_voidSetPin>
        }else if(LED_12_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_12,HIGH);
        }
    break;
 8dc:	5f c0       	rjmp	.+190    	; 0x99c <__stack+0x13d>
    case (LED_13):
        if(LED_13_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_13,LOW);
 8de:	60 e0       	ldi	r22, 0x00	; 0
 8e0:	8d e0       	ldi	r24, 0x0D	; 13
 8e2:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_voidSetPin>
        }else if(LED_13_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_13,HIGH);
        }
    break;
 8e6:	5a c0       	rjmp	.+180    	; 0x99c <__stack+0x13d>
    case (LED_14):
        if(LED_14_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_14,LOW);
 8e8:	60 e0       	ldi	r22, 0x00	; 0
 8ea:	8e e0       	ldi	r24, 0x0E	; 14
 8ec:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_voidSetPin>
        }else if(LED_14_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_14,HIGH);
        }
    break;
 8f0:	55 c0       	rjmp	.+170    	; 0x99c <__stack+0x13d>
    case (LED_15):
        if(LED_15_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_15,LOW);
 8f2:	60 e0       	ldi	r22, 0x00	; 0
 8f4:	8f e0       	ldi	r24, 0x0F	; 15
 8f6:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_voidSetPin>
        }else if(LED_15_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_15,HIGH);
        }
    break;
 8fa:	50 c0       	rjmp	.+160    	; 0x99c <__stack+0x13d>
    case (LED_16):
        if(LED_16_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_16,LOW);
 8fc:	60 e0       	ldi	r22, 0x00	; 0
 8fe:	80 e1       	ldi	r24, 0x10	; 16
 900:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_voidSetPin>
        }else if(LED_16_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_16,HIGH);
        }
    break;
 904:	4b c0       	rjmp	.+150    	; 0x99c <__stack+0x13d>
    case (LED_17):
        if(LED_17_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_17,LOW);
 906:	60 e0       	ldi	r22, 0x00	; 0
 908:	81 e1       	ldi	r24, 0x11	; 17
 90a:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_voidSetPin>
        }else if(LED_17_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_17,HIGH);
        }
    break;
 90e:	46 c0       	rjmp	.+140    	; 0x99c <__stack+0x13d>
    case (LED_18):
        if(LED_18_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_18,LOW);
 910:	60 e0       	ldi	r22, 0x00	; 0
 912:	82 e1       	ldi	r24, 0x12	; 18
 914:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_voidSetPin>
        }else if(LED_18_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_18,HIGH);
        }
    break;
 918:	41 c0       	rjmp	.+130    	; 0x99c <__stack+0x13d>
    case (LED_19):
        if(LED_19_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_19,LOW);
 91a:	60 e0       	ldi	r22, 0x00	; 0
 91c:	83 e1       	ldi	r24, 0x13	; 19
 91e:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_voidSetPin>
        }else if(LED_19_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_19,HIGH);
        }
    break;
 922:	3c c0       	rjmp	.+120    	; 0x99c <__stack+0x13d>
    case (LED_20):
        if(LED_20_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_20,LOW);
 924:	60 e0       	ldi	r22, 0x00	; 0
 926:	84 e1       	ldi	r24, 0x14	; 20
 928:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_voidSetPin>
        }else if(LED_20_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_20,HIGH);
        }
    break;
 92c:	37 c0       	rjmp	.+110    	; 0x99c <__stack+0x13d>
    case (LED_21):
        if(LED_21_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_21,LOW);
 92e:	60 e0       	ldi	r22, 0x00	; 0
 930:	85 e1       	ldi	r24, 0x15	; 21
 932:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_voidSetPin>
        }else if(LED_21_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_21,HIGH);
        }
    break;
 936:	32 c0       	rjmp	.+100    	; 0x99c <__stack+0x13d>
    case (LED_22):
        if(LED_22_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_22,LOW);
 938:	60 e0       	ldi	r22, 0x00	; 0
 93a:	86 e1       	ldi	r24, 0x16	; 22
 93c:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_voidSetPin>
        }else if(LED_22_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_22,HIGH);
        }
    break;
 940:	2d c0       	rjmp	.+90     	; 0x99c <__stack+0x13d>
    case (LED_23):
        if(LED_23_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_23,LOW);
 942:	60 e0       	ldi	r22, 0x00	; 0
 944:	87 e1       	ldi	r24, 0x17	; 23
 946:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_voidSetPin>
        }else if(LED_23_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_23,HIGH);
        }
    break;
 94a:	28 c0       	rjmp	.+80     	; 0x99c <__stack+0x13d>
    case (LED_24):
        if(LED_24_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_24,LOW);
 94c:	60 e0       	ldi	r22, 0x00	; 0
 94e:	88 e1       	ldi	r24, 0x18	; 24
 950:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_voidSetPin>
        }else if(LED_24_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_24,HIGH);
        }
    break;
 954:	23 c0       	rjmp	.+70     	; 0x99c <__stack+0x13d>
    case (LED_25):
        if(LED_25_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_25,LOW);
 956:	60 e0       	ldi	r22, 0x00	; 0
 958:	89 e1       	ldi	r24, 0x19	; 25
 95a:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_voidSetPin>
        }else if(LED_25_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_25,HIGH);
        }
    break;
 95e:	1e c0       	rjmp	.+60     	; 0x99c <__stack+0x13d>
    case (LED_26):
        if(LED_26_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_26,LOW);
 960:	60 e0       	ldi	r22, 0x00	; 0
 962:	8a e1       	ldi	r24, 0x1A	; 26
 964:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_voidSetPin>
        }else if(LED_26_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_26,HIGH);
        }
    break;
 968:	19 c0       	rjmp	.+50     	; 0x99c <__stack+0x13d>
    case (LED_27):
        if(LED_27_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_27,LOW);
 96a:	60 e0       	ldi	r22, 0x00	; 0
 96c:	8b e1       	ldi	r24, 0x1B	; 27
 96e:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_voidSetPin>
        }else if(LED_27_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_27,HIGH);
        }
    break;
 972:	14 c0       	rjmp	.+40     	; 0x99c <__stack+0x13d>
    case (LED_28):
        if(LED_28_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_28,LOW);
 974:	60 e0       	ldi	r22, 0x00	; 0
 976:	8c e1       	ldi	r24, 0x1C	; 28
 978:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_voidSetPin>
        }else if(LED_28_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_28,HIGH);
        }
    break;
 97c:	0f c0       	rjmp	.+30     	; 0x99c <__stack+0x13d>
    case (LED_29):
        if(LED_29_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_29,LOW);
 97e:	60 e0       	ldi	r22, 0x00	; 0
 980:	8d e1       	ldi	r24, 0x1D	; 29
 982:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_voidSetPin>
        }else if(LED_29_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_29,HIGH);
        }
    break;
 986:	0a c0       	rjmp	.+20     	; 0x99c <__stack+0x13d>
    case (LED_30):
        if(LED_30_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_30,LOW);
 988:	60 e0       	ldi	r22, 0x00	; 0
 98a:	8e e1       	ldi	r24, 0x1E	; 30
 98c:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_voidSetPin>
        }else if(LED_30_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_30,HIGH);
        }
    break;
 990:	05 c0       	rjmp	.+10     	; 0x99c <__stack+0x13d>
    case (LED_31):
        if(LED_31_mode==FORWARD){
            DIO_voidSetPin(LEDPIN_31,LOW);
 992:	60 e0       	ldi	r22, 0x00	; 0
 994:	8f e1       	ldi	r24, 0x1F	; 31
 996:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_voidSetPin>
        }else if(LED_31_mode==REVERSE){
            DIO_voidSetPin(LEDPIN_31,HIGH);
        }
    break;
 99a:	00 00       	nop

	}


}
 99c:	00 00       	nop
 99e:	0f 90       	pop	r0
 9a0:	df 91       	pop	r29
 9a2:	cf 91       	pop	r28
 9a4:	08 95       	ret

000009a6 <LED_voidToggle>:

void LED_voidToggle(u8 LedNum){
 9a6:	cf 93       	push	r28
 9a8:	df 93       	push	r29
 9aa:	1f 92       	push	r1
 9ac:	cd b7       	in	r28, 0x3d	; 61
 9ae:	de b7       	in	r29, 0x3e	; 62
 9b0:	89 83       	std	Y+1, r24	; 0x01

	switch(LedNum){
 9b2:	89 81       	ldd	r24, Y+1	; 0x01
 9b4:	88 2f       	mov	r24, r24
 9b6:	90 e0       	ldi	r25, 0x00	; 0
 9b8:	09 2e       	mov	r0, r25
 9ba:	00 0c       	add	r0, r0
 9bc:	aa 0b       	sbc	r26, r26
 9be:	bb 0b       	sbc	r27, r27
 9c0:	40 e0       	ldi	r20, 0x00	; 0
 9c2:	50 e0       	ldi	r21, 0x00	; 0
 9c4:	2f e1       	ldi	r18, 0x1F	; 31
 9c6:	30 e0       	ldi	r19, 0x00	; 0
 9c8:	84 1b       	sub	r24, r20
 9ca:	95 0b       	sbc	r25, r21
 9cc:	28 17       	cp	r18, r24
 9ce:	39 07       	cpc	r19, r25
 9d0:	08 f4       	brcc	.+2      	; 0x9d4 <LED_voidToggle+0x2e>
 9d2:	85 c0       	rjmp	.+266    	; 0xade <LED_voidToggle+0x138>
 9d4:	86 59       	subi	r24, 0x96	; 150
 9d6:	9f 4f       	sbci	r25, 0xFF	; 255
 9d8:	fc 01       	movw	r30, r24
 9da:	0c 94 92 05 	jmp	0xb24	; 0xb24 <__tablejump2__>

        	case (LED_0):
        		DIO_voidTogglePin(LEDPIN_0);
 9de:	80 e0       	ldi	r24, 0x00	; 0
 9e0:	0e 94 20 02 	call	0x440	; 0x440 <DIO_voidTogglePin>
        	break;
 9e4:	7c c0       	rjmp	.+248    	; 0xade <LED_voidToggle+0x138>
        	case (LED_1):
        		DIO_voidTogglePin(LEDPIN_1);
 9e6:	81 e0       	ldi	r24, 0x01	; 1
 9e8:	0e 94 20 02 	call	0x440	; 0x440 <DIO_voidTogglePin>
        	break;
 9ec:	78 c0       	rjmp	.+240    	; 0xade <LED_voidToggle+0x138>
        	case (LED_2):
        		DIO_voidTogglePin(LEDPIN_2);
 9ee:	82 e0       	ldi	r24, 0x02	; 2
 9f0:	0e 94 20 02 	call	0x440	; 0x440 <DIO_voidTogglePin>
        	break;
 9f4:	74 c0       	rjmp	.+232    	; 0xade <LED_voidToggle+0x138>
        	case (LED_3):
        		DIO_voidTogglePin(LEDPIN_3);
 9f6:	83 e0       	ldi	r24, 0x03	; 3
 9f8:	0e 94 20 02 	call	0x440	; 0x440 <DIO_voidTogglePin>
        	break;
 9fc:	70 c0       	rjmp	.+224    	; 0xade <LED_voidToggle+0x138>
        	case (LED_4):
        		DIO_voidTogglePin(LEDPIN_4);
 9fe:	84 e0       	ldi	r24, 0x04	; 4
 a00:	0e 94 20 02 	call	0x440	; 0x440 <DIO_voidTogglePin>
        	break;
 a04:	6c c0       	rjmp	.+216    	; 0xade <LED_voidToggle+0x138>
        	case (LED_5):
        		DIO_voidTogglePin(LEDPIN_5);
 a06:	85 e0       	ldi	r24, 0x05	; 5
 a08:	0e 94 20 02 	call	0x440	; 0x440 <DIO_voidTogglePin>
        	break;
 a0c:	68 c0       	rjmp	.+208    	; 0xade <LED_voidToggle+0x138>
        	case (LED_6):
        		DIO_voidTogglePin(LEDPIN_6);
 a0e:	86 e0       	ldi	r24, 0x06	; 6
 a10:	0e 94 20 02 	call	0x440	; 0x440 <DIO_voidTogglePin>
        	break;
 a14:	64 c0       	rjmp	.+200    	; 0xade <LED_voidToggle+0x138>
        	case (LED_7):
        		DIO_voidTogglePin(LEDPIN_7);
 a16:	87 e0       	ldi	r24, 0x07	; 7
 a18:	0e 94 20 02 	call	0x440	; 0x440 <DIO_voidTogglePin>
        	break;
 a1c:	60 c0       	rjmp	.+192    	; 0xade <LED_voidToggle+0x138>
        	case (LED_8):
        		DIO_voidTogglePin(LEDPIN_8);
 a1e:	88 e0       	ldi	r24, 0x08	; 8
 a20:	0e 94 20 02 	call	0x440	; 0x440 <DIO_voidTogglePin>
        	break;
 a24:	5c c0       	rjmp	.+184    	; 0xade <LED_voidToggle+0x138>
        	case (LED_9):
        		DIO_voidTogglePin(LEDPIN_9);
 a26:	89 e0       	ldi	r24, 0x09	; 9
 a28:	0e 94 20 02 	call	0x440	; 0x440 <DIO_voidTogglePin>
        	break;
 a2c:	58 c0       	rjmp	.+176    	; 0xade <LED_voidToggle+0x138>
        	case (LED_10):
        		DIO_voidTogglePin(LEDPIN_10);
 a2e:	8a e0       	ldi	r24, 0x0A	; 10
 a30:	0e 94 20 02 	call	0x440	; 0x440 <DIO_voidTogglePin>
        	break;
 a34:	54 c0       	rjmp	.+168    	; 0xade <LED_voidToggle+0x138>
        	case (LED_11):
        		DIO_voidTogglePin(LEDPIN_11);
 a36:	8b e0       	ldi	r24, 0x0B	; 11
 a38:	0e 94 20 02 	call	0x440	; 0x440 <DIO_voidTogglePin>
        	break;
 a3c:	50 c0       	rjmp	.+160    	; 0xade <LED_voidToggle+0x138>
        	case (LED_12):
        		DIO_voidTogglePin(LEDPIN_12);
 a3e:	8c e0       	ldi	r24, 0x0C	; 12
 a40:	0e 94 20 02 	call	0x440	; 0x440 <DIO_voidTogglePin>
        	break;
 a44:	4c c0       	rjmp	.+152    	; 0xade <LED_voidToggle+0x138>
        	case (LED_13):
        		DIO_voidTogglePin(LEDPIN_13);
 a46:	8d e0       	ldi	r24, 0x0D	; 13
 a48:	0e 94 20 02 	call	0x440	; 0x440 <DIO_voidTogglePin>
        	break;
 a4c:	48 c0       	rjmp	.+144    	; 0xade <LED_voidToggle+0x138>
        	case (LED_14):
        		DIO_voidTogglePin(LEDPIN_14);
 a4e:	8e e0       	ldi	r24, 0x0E	; 14
 a50:	0e 94 20 02 	call	0x440	; 0x440 <DIO_voidTogglePin>
        	break;
 a54:	44 c0       	rjmp	.+136    	; 0xade <LED_voidToggle+0x138>
        	case (LED_15):
        		DIO_voidTogglePin(LEDPIN_15);
 a56:	8f e0       	ldi	r24, 0x0F	; 15
 a58:	0e 94 20 02 	call	0x440	; 0x440 <DIO_voidTogglePin>
        	break;
 a5c:	40 c0       	rjmp	.+128    	; 0xade <LED_voidToggle+0x138>
        	case (LED_16):
        		DIO_voidTogglePin(LEDPIN_16);
 a5e:	80 e1       	ldi	r24, 0x10	; 16
 a60:	0e 94 20 02 	call	0x440	; 0x440 <DIO_voidTogglePin>
        	break;
 a64:	3c c0       	rjmp	.+120    	; 0xade <LED_voidToggle+0x138>
        	case (LED_17):
        		DIO_voidTogglePin(LEDPIN_17);
 a66:	81 e1       	ldi	r24, 0x11	; 17
 a68:	0e 94 20 02 	call	0x440	; 0x440 <DIO_voidTogglePin>
        	break;
 a6c:	38 c0       	rjmp	.+112    	; 0xade <LED_voidToggle+0x138>
        	case (LED_18):
        		DIO_voidTogglePin(LEDPIN_18);
 a6e:	82 e1       	ldi	r24, 0x12	; 18
 a70:	0e 94 20 02 	call	0x440	; 0x440 <DIO_voidTogglePin>
        	break;
 a74:	34 c0       	rjmp	.+104    	; 0xade <LED_voidToggle+0x138>
        	case (LED_19):
        		DIO_voidTogglePin(LEDPIN_19);
 a76:	83 e1       	ldi	r24, 0x13	; 19
 a78:	0e 94 20 02 	call	0x440	; 0x440 <DIO_voidTogglePin>
        	break;
 a7c:	30 c0       	rjmp	.+96     	; 0xade <LED_voidToggle+0x138>
        	case (LED_20):
        		DIO_voidTogglePin(LEDPIN_20);
 a7e:	84 e1       	ldi	r24, 0x14	; 20
 a80:	0e 94 20 02 	call	0x440	; 0x440 <DIO_voidTogglePin>
        	break;
 a84:	2c c0       	rjmp	.+88     	; 0xade <LED_voidToggle+0x138>
        	case (LED_21):
        		DIO_voidTogglePin(LEDPIN_21);
 a86:	85 e1       	ldi	r24, 0x15	; 21
 a88:	0e 94 20 02 	call	0x440	; 0x440 <DIO_voidTogglePin>
        	break;
 a8c:	28 c0       	rjmp	.+80     	; 0xade <LED_voidToggle+0x138>
        	case (LED_22):
        		DIO_voidTogglePin(LEDPIN_22);
 a8e:	86 e1       	ldi	r24, 0x16	; 22
 a90:	0e 94 20 02 	call	0x440	; 0x440 <DIO_voidTogglePin>
        	break;
 a94:	24 c0       	rjmp	.+72     	; 0xade <LED_voidToggle+0x138>
        	case (LED_23):
        		DIO_voidTogglePin(LEDPIN_23);
 a96:	87 e1       	ldi	r24, 0x17	; 23
 a98:	0e 94 20 02 	call	0x440	; 0x440 <DIO_voidTogglePin>
        	break;
 a9c:	20 c0       	rjmp	.+64     	; 0xade <LED_voidToggle+0x138>
        	case (LED_24):
        		DIO_voidTogglePin(LEDPIN_24);
 a9e:	88 e1       	ldi	r24, 0x18	; 24
 aa0:	0e 94 20 02 	call	0x440	; 0x440 <DIO_voidTogglePin>
        	break;
 aa4:	1c c0       	rjmp	.+56     	; 0xade <LED_voidToggle+0x138>
        	case (LED_25):
        		DIO_voidTogglePin(LEDPIN_25);
 aa6:	89 e1       	ldi	r24, 0x19	; 25
 aa8:	0e 94 20 02 	call	0x440	; 0x440 <DIO_voidTogglePin>
        	break;
 aac:	18 c0       	rjmp	.+48     	; 0xade <LED_voidToggle+0x138>
        	case (LED_26):
        		DIO_voidTogglePin(LEDPIN_26);
 aae:	8a e1       	ldi	r24, 0x1A	; 26
 ab0:	0e 94 20 02 	call	0x440	; 0x440 <DIO_voidTogglePin>
        	break;
 ab4:	14 c0       	rjmp	.+40     	; 0xade <LED_voidToggle+0x138>
        	case (LED_27):
        		DIO_voidTogglePin(LEDPIN_27);
 ab6:	8b e1       	ldi	r24, 0x1B	; 27
 ab8:	0e 94 20 02 	call	0x440	; 0x440 <DIO_voidTogglePin>
        	break;
 abc:	10 c0       	rjmp	.+32     	; 0xade <LED_voidToggle+0x138>
        	case (LED_28):
        		DIO_voidTogglePin(LEDPIN_28);
 abe:	8c e1       	ldi	r24, 0x1C	; 28
 ac0:	0e 94 20 02 	call	0x440	; 0x440 <DIO_voidTogglePin>
        	break;
 ac4:	0c c0       	rjmp	.+24     	; 0xade <LED_voidToggle+0x138>
        	case (LED_29):
        		DIO_voidTogglePin(LEDPIN_29);
 ac6:	8d e1       	ldi	r24, 0x1D	; 29
 ac8:	0e 94 20 02 	call	0x440	; 0x440 <DIO_voidTogglePin>
        	break;
 acc:	08 c0       	rjmp	.+16     	; 0xade <LED_voidToggle+0x138>
        	case (LED_30):
        		DIO_voidTogglePin(LEDPIN_30);
 ace:	8e e1       	ldi	r24, 0x1E	; 30
 ad0:	0e 94 20 02 	call	0x440	; 0x440 <DIO_voidTogglePin>
        	break;
 ad4:	04 c0       	rjmp	.+8      	; 0xade <LED_voidToggle+0x138>
        	case (LED_31):
        		DIO_voidTogglePin(LEDPIN_31);
 ad6:	8f e1       	ldi	r24, 0x1F	; 31
 ad8:	0e 94 20 02 	call	0x440	; 0x440 <DIO_voidTogglePin>
        	break;
 adc:	00 00       	nop

	}


}
 ade:	00 00       	nop
 ae0:	0f 90       	pop	r0
 ae2:	df 91       	pop	r29
 ae4:	cf 91       	pop	r28
 ae6:	08 95       	ret

00000ae8 <main>:
#include "EXTI_int.h"
#include "GIE_int.h"
#include "avr/delay.h"

void EXTI_ISR(void);
int main(void){
 ae8:	cf 93       	push	r28
 aea:	df 93       	push	r29
 aec:	cd b7       	in	r28, 0x3d	; 61
 aee:	de b7       	in	r29, 0x3e	; 62

	DIO_voidInitialize();
 af0:	0e 94 9e 00 	call	0x13c	; 0x13c <DIO_voidInitialize>
	LED_voidInitialize();
 af4:	0e 94 49 03 	call	0x692	; 0x692 <LED_voidInitialize>
	EXTI_voidInitialize();
 af8:	0e 94 9d 02 	call	0x53a	; 0x53a <EXTI_voidInitialize>
	GIE_voidEnable();
 afc:	0e 94 27 03 	call	0x64e	; 0x64e <GIE_voidEnable>
	EXTI_voidSetInt0Callback(EXTI_ISR);
 b00:	87 e8       	ldi	r24, 0x87	; 135
 b02:	95 e0       	ldi	r25, 0x05	; 5
 b04:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <EXTI_voidSetInt0Callback>
	EXTI_voidEnableInt0();
 b08:	0e 94 c1 02 	call	0x582	; 0x582 <EXTI_voidEnableInt0>

	while(1){



	}
 b0c:	ff cf       	rjmp	.-2      	; 0xb0c <main+0x24>

00000b0e <EXTI_ISR>:

	return 0;
}
void EXTI_ISR(void){
 b0e:	cf 93       	push	r28
 b10:	df 93       	push	r29
 b12:	cd b7       	in	r28, 0x3d	; 61
 b14:	de b7       	in	r29, 0x3e	; 62

	LED_voidToggle(LED_0);
 b16:	80 e0       	ldi	r24, 0x00	; 0
 b18:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <LED_voidToggle>
		LED_voidOff(LED_0);
	}else if (DIO_u8GetPin(PIN_26)==HIGH){
		LED_voidON(LED_0);
	}*/

	}
 b1c:	00 00       	nop
 b1e:	df 91       	pop	r29
 b20:	cf 91       	pop	r28
 b22:	08 95       	ret

00000b24 <__tablejump2__>:
 b24:	ee 0f       	add	r30, r30
 b26:	ff 1f       	adc	r31, r31
 b28:	05 90       	lpm	r0, Z+
 b2a:	f4 91       	lpm	r31, Z
 b2c:	e0 2d       	mov	r30, r0
 b2e:	09 94       	ijmp

00000b30 <_exit>:
 b30:	f8 94       	cli

00000b32 <__stop_program>:
 b32:	ff cf       	rjmp	.-2      	; 0xb32 <__stop_program>
